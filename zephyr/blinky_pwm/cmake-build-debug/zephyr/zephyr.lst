
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_start>:
 8000000:	24000820 	.word	0x24000820
 8000004:	08001ed1 	.word	0x08001ed1
 8000008:	0800451f 	.word	0x0800451f
 800000c:	08001efd 	.word	0x08001efd
 8000010:	08001efd 	.word	0x08001efd
 8000014:	08001efd 	.word	0x08001efd
 8000018:	08001efd 	.word	0x08001efd
	...
 800002c:	08001cc5 	.word	0x08001cc5
 8000030:	08001efd 	.word	0x08001efd
 8000034:	00000000 	.word	0x00000000
 8000038:	08001c71 	.word	0x08001c71
 800003c:	08001abd 	.word	0x08001abd

08000040 <_irq_vector_table>:
 8000040:	08001ea9 08001ea9 08001ea9 08001ea9     ................
 8000050:	08001ea9 08001ea9 08001ea9 08001ea9     ................
 8000060:	08001ea9 08001ea9 08001ea9 08001ea9     ................
 8000070:	08001ea9 08001ea9 08001ea9 08001ea9     ................
 8000080:	08001ea9 08001ea9 08001ea9 08001ea9     ................
 8000090:	08001ea9 08001ea9 08001ea9 08001ea9     ................
 80000a0:	08001ea9 08001ea9 08001ea9 08001ea9     ................
 80000b0:	08001ea9 08001ea9 08001ea9 08001ea9     ................
 80000c0:	08001ea9 08001ea9 08001ea9 08001ea9     ................
 80000d0:	08001ea9 08001ea9 08001ea9 08001ea9     ................
 80000e0:	08001ea9 08001ea9 08001ea9 08001ea9     ................
 80000f0:	08001ea9 08001ea9 08001ea9 08001ea9     ................
 8000100:	08001ea9 08001ea9 08001ea9 08001ea9     ................
 8000110:	08001ea9 08001ea9 08001ea9 08001ea9     ................
 8000120:	08001ea9 08001ea9 08001ea9 08001ea9     ................
 8000130:	08001ea9 08001ea9 08001ea9 08001ea9     ................
 8000140:	08001ea9 08001ea9 08001ea9 08001ea9     ................
 8000150:	08001ea9 08001ea9 08001ea9 08001ea9     ................
 8000160:	08001ea9 08001ea9 08001ea9 08001ea9     ................
 8000170:	08001ea9 08001ea9 08001ea9 08001ea9     ................
 8000180:	08001ea9 08001ea9 08001ea9 08001ea9     ................
 8000190:	08001ea9 08001ea9 08001ea9 08001ea9     ................
 80001a0:	08001ea9 08001ea9 08001ea9 08001ea9     ................
 80001b0:	08001ea9 08001ea9 08001ea9 08001ea9     ................
 80001c0:	08001ea9 08001ea9 08001ea9 08001ea9     ................
 80001d0:	08001ea9 08001ea9 08001ea9 08001ea9     ................
 80001e0:	08001ea9 08001ea9 08001ea9 08001ea9     ................
 80001f0:	08001ea9 08001ea9 08001ea9 08001ea9     ................
 8000200:	08001ea9 08001ea9 08001ea9 08001ea9     ................
 8000210:	08001ea9 08001ea9 08001ea9 08001ea9     ................
 8000220:	08001ea9 08001ea9 08001ea9 08001ea9     ................
 8000230:	08001ea9 08001ea9 08001ea9 08001ea9     ................
 8000240:	08001ea9 08001ea9 08001ea9 08001ea9     ................
 8000250:	08001ea9 08001ea9 08001ea9 08001ea9     ................
 8000260:	08001ea9 08001ea9 08001ea9 08001ea9     ................
 8000270:	08001ea9 08001ea9 08001ea9 08001ea9     ................
 8000280:	08001ea9 08001ea9 08001ea9 08001ea9     ................
 8000290:	08001ea9 08001ea9                       ........

Disassembly of section text:

08000298 <__aeabi_frsub>:
 8000298:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800029c:	e002      	b.n	80002a4 <__addsf3>
 800029e:	bf00      	nop

080002a0 <__aeabi_fsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002a4 <__addsf3>:
 80002a4:	0042      	lsls	r2, r0, #1
 80002a6:	bf1f      	itttt	ne
 80002a8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002ac:	ea92 0f03 	teqne	r2, r3
 80002b0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002b4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002b8:	d06a      	beq.n	8000390 <__addsf3+0xec>
 80002ba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002be:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002c2:	bfc1      	itttt	gt
 80002c4:	18d2      	addgt	r2, r2, r3
 80002c6:	4041      	eorgt	r1, r0
 80002c8:	4048      	eorgt	r0, r1
 80002ca:	4041      	eorgt	r1, r0
 80002cc:	bfb8      	it	lt
 80002ce:	425b      	neglt	r3, r3
 80002d0:	2b19      	cmp	r3, #25
 80002d2:	bf88      	it	hi
 80002d4:	4770      	bxhi	lr
 80002d6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80002da:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002de:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80002e2:	bf18      	it	ne
 80002e4:	4240      	negne	r0, r0
 80002e6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002ea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80002ee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80002f2:	bf18      	it	ne
 80002f4:	4249      	negne	r1, r1
 80002f6:	ea92 0f03 	teq	r2, r3
 80002fa:	d03f      	beq.n	800037c <__addsf3+0xd8>
 80002fc:	f1a2 0201 	sub.w	r2, r2, #1
 8000300:	fa41 fc03 	asr.w	ip, r1, r3
 8000304:	eb10 000c 	adds.w	r0, r0, ip
 8000308:	f1c3 0320 	rsb	r3, r3, #32
 800030c:	fa01 f103 	lsl.w	r1, r1, r3
 8000310:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000314:	d502      	bpl.n	800031c <__addsf3+0x78>
 8000316:	4249      	negs	r1, r1
 8000318:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800031c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000320:	d313      	bcc.n	800034a <__addsf3+0xa6>
 8000322:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000326:	d306      	bcc.n	8000336 <__addsf3+0x92>
 8000328:	0840      	lsrs	r0, r0, #1
 800032a:	ea4f 0131 	mov.w	r1, r1, rrx
 800032e:	f102 0201 	add.w	r2, r2, #1
 8000332:	2afe      	cmp	r2, #254	; 0xfe
 8000334:	d251      	bcs.n	80003da <__addsf3+0x136>
 8000336:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800033a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800033e:	bf08      	it	eq
 8000340:	f020 0001 	biceq.w	r0, r0, #1
 8000344:	ea40 0003 	orr.w	r0, r0, r3
 8000348:	4770      	bx	lr
 800034a:	0049      	lsls	r1, r1, #1
 800034c:	eb40 0000 	adc.w	r0, r0, r0
 8000350:	3a01      	subs	r2, #1
 8000352:	bf28      	it	cs
 8000354:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000358:	d2ed      	bcs.n	8000336 <__addsf3+0x92>
 800035a:	fab0 fc80 	clz	ip, r0
 800035e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000362:	ebb2 020c 	subs.w	r2, r2, ip
 8000366:	fa00 f00c 	lsl.w	r0, r0, ip
 800036a:	bfaa      	itet	ge
 800036c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000370:	4252      	neglt	r2, r2
 8000372:	4318      	orrge	r0, r3
 8000374:	bfbc      	itt	lt
 8000376:	40d0      	lsrlt	r0, r2
 8000378:	4318      	orrlt	r0, r3
 800037a:	4770      	bx	lr
 800037c:	f092 0f00 	teq	r2, #0
 8000380:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000384:	bf06      	itte	eq
 8000386:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800038a:	3201      	addeq	r2, #1
 800038c:	3b01      	subne	r3, #1
 800038e:	e7b5      	b.n	80002fc <__addsf3+0x58>
 8000390:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000394:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000398:	bf18      	it	ne
 800039a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800039e:	d021      	beq.n	80003e4 <__addsf3+0x140>
 80003a0:	ea92 0f03 	teq	r2, r3
 80003a4:	d004      	beq.n	80003b0 <__addsf3+0x10c>
 80003a6:	f092 0f00 	teq	r2, #0
 80003aa:	bf08      	it	eq
 80003ac:	4608      	moveq	r0, r1
 80003ae:	4770      	bx	lr
 80003b0:	ea90 0f01 	teq	r0, r1
 80003b4:	bf1c      	itt	ne
 80003b6:	2000      	movne	r0, #0
 80003b8:	4770      	bxne	lr
 80003ba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003be:	d104      	bne.n	80003ca <__addsf3+0x126>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	bf28      	it	cs
 80003c4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003c8:	4770      	bx	lr
 80003ca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003ce:	bf3c      	itt	cc
 80003d0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003d4:	4770      	bxcc	lr
 80003d6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003da:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80003de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003e2:	4770      	bx	lr
 80003e4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80003e8:	bf16      	itet	ne
 80003ea:	4608      	movne	r0, r1
 80003ec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80003f0:	4601      	movne	r1, r0
 80003f2:	0242      	lsls	r2, r0, #9
 80003f4:	bf06      	itte	eq
 80003f6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80003fa:	ea90 0f01 	teqeq	r0, r1
 80003fe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000402:	4770      	bx	lr

08000404 <__aeabi_ui2f>:
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	e004      	b.n	8000414 <__aeabi_i2f+0x8>
 800040a:	bf00      	nop

0800040c <__aeabi_i2f>:
 800040c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000410:	bf48      	it	mi
 8000412:	4240      	negmi	r0, r0
 8000414:	ea5f 0c00 	movs.w	ip, r0
 8000418:	bf08      	it	eq
 800041a:	4770      	bxeq	lr
 800041c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000420:	4601      	mov	r1, r0
 8000422:	f04f 0000 	mov.w	r0, #0
 8000426:	e01c      	b.n	8000462 <__aeabi_l2f+0x2a>

08000428 <__aeabi_ul2f>:
 8000428:	ea50 0201 	orrs.w	r2, r0, r1
 800042c:	bf08      	it	eq
 800042e:	4770      	bxeq	lr
 8000430:	f04f 0300 	mov.w	r3, #0
 8000434:	e00a      	b.n	800044c <__aeabi_l2f+0x14>
 8000436:	bf00      	nop

08000438 <__aeabi_l2f>:
 8000438:	ea50 0201 	orrs.w	r2, r0, r1
 800043c:	bf08      	it	eq
 800043e:	4770      	bxeq	lr
 8000440:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000444:	d502      	bpl.n	800044c <__aeabi_l2f+0x14>
 8000446:	4240      	negs	r0, r0
 8000448:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800044c:	ea5f 0c01 	movs.w	ip, r1
 8000450:	bf02      	ittt	eq
 8000452:	4684      	moveq	ip, r0
 8000454:	4601      	moveq	r1, r0
 8000456:	2000      	moveq	r0, #0
 8000458:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800045c:	bf08      	it	eq
 800045e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000462:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000466:	fabc f28c 	clz	r2, ip
 800046a:	3a08      	subs	r2, #8
 800046c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000470:	db10      	blt.n	8000494 <__aeabi_l2f+0x5c>
 8000472:	fa01 fc02 	lsl.w	ip, r1, r2
 8000476:	4463      	add	r3, ip
 8000478:	fa00 fc02 	lsl.w	ip, r0, r2
 800047c:	f1c2 0220 	rsb	r2, r2, #32
 8000480:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000484:	fa20 f202 	lsr.w	r2, r0, r2
 8000488:	eb43 0002 	adc.w	r0, r3, r2
 800048c:	bf08      	it	eq
 800048e:	f020 0001 	biceq.w	r0, r0, #1
 8000492:	4770      	bx	lr
 8000494:	f102 0220 	add.w	r2, r2, #32
 8000498:	fa01 fc02 	lsl.w	ip, r1, r2
 800049c:	f1c2 0220 	rsb	r2, r2, #32
 80004a0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004a4:	fa21 f202 	lsr.w	r2, r1, r2
 80004a8:	eb43 0002 	adc.w	r0, r3, r2
 80004ac:	bf08      	it	eq
 80004ae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004b2:	4770      	bx	lr

080004b4 <__aeabi_fmul>:
 80004b4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004b8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004bc:	bf1e      	ittt	ne
 80004be:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004c2:	ea92 0f0c 	teqne	r2, ip
 80004c6:	ea93 0f0c 	teqne	r3, ip
 80004ca:	d06f      	beq.n	80005ac <__aeabi_fmul+0xf8>
 80004cc:	441a      	add	r2, r3
 80004ce:	ea80 0c01 	eor.w	ip, r0, r1
 80004d2:	0240      	lsls	r0, r0, #9
 80004d4:	bf18      	it	ne
 80004d6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80004da:	d01e      	beq.n	800051a <__aeabi_fmul+0x66>
 80004dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80004e0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80004e4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80004e8:	fba0 3101 	umull	r3, r1, r0, r1
 80004ec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80004f0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80004f4:	bf3e      	ittt	cc
 80004f6:	0049      	lslcc	r1, r1, #1
 80004f8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80004fc:	005b      	lslcc	r3, r3, #1
 80004fe:	ea40 0001 	orr.w	r0, r0, r1
 8000502:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000506:	2afd      	cmp	r2, #253	; 0xfd
 8000508:	d81d      	bhi.n	8000546 <__aeabi_fmul+0x92>
 800050a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800050e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000512:	bf08      	it	eq
 8000514:	f020 0001 	biceq.w	r0, r0, #1
 8000518:	4770      	bx	lr
 800051a:	f090 0f00 	teq	r0, #0
 800051e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000522:	bf08      	it	eq
 8000524:	0249      	lsleq	r1, r1, #9
 8000526:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800052a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800052e:	3a7f      	subs	r2, #127	; 0x7f
 8000530:	bfc2      	ittt	gt
 8000532:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000536:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800053a:	4770      	bxgt	lr
 800053c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000540:	f04f 0300 	mov.w	r3, #0
 8000544:	3a01      	subs	r2, #1
 8000546:	dc5d      	bgt.n	8000604 <__aeabi_fmul+0x150>
 8000548:	f112 0f19 	cmn.w	r2, #25
 800054c:	bfdc      	itt	le
 800054e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000552:	4770      	bxle	lr
 8000554:	f1c2 0200 	rsb	r2, r2, #0
 8000558:	0041      	lsls	r1, r0, #1
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	f1c2 0220 	rsb	r2, r2, #32
 8000562:	fa00 fc02 	lsl.w	ip, r0, r2
 8000566:	ea5f 0031 	movs.w	r0, r1, rrx
 800056a:	f140 0000 	adc.w	r0, r0, #0
 800056e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000572:	bf08      	it	eq
 8000574:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000578:	4770      	bx	lr
 800057a:	f092 0f00 	teq	r2, #0
 800057e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000582:	bf02      	ittt	eq
 8000584:	0040      	lsleq	r0, r0, #1
 8000586:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800058a:	3a01      	subeq	r2, #1
 800058c:	d0f9      	beq.n	8000582 <__aeabi_fmul+0xce>
 800058e:	ea40 000c 	orr.w	r0, r0, ip
 8000592:	f093 0f00 	teq	r3, #0
 8000596:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800059a:	bf02      	ittt	eq
 800059c:	0049      	lsleq	r1, r1, #1
 800059e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005a2:	3b01      	subeq	r3, #1
 80005a4:	d0f9      	beq.n	800059a <__aeabi_fmul+0xe6>
 80005a6:	ea41 010c 	orr.w	r1, r1, ip
 80005aa:	e78f      	b.n	80004cc <__aeabi_fmul+0x18>
 80005ac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005b0:	ea92 0f0c 	teq	r2, ip
 80005b4:	bf18      	it	ne
 80005b6:	ea93 0f0c 	teqne	r3, ip
 80005ba:	d00a      	beq.n	80005d2 <__aeabi_fmul+0x11e>
 80005bc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005c0:	bf18      	it	ne
 80005c2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005c6:	d1d8      	bne.n	800057a <__aeabi_fmul+0xc6>
 80005c8:	ea80 0001 	eor.w	r0, r0, r1
 80005cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80005d0:	4770      	bx	lr
 80005d2:	f090 0f00 	teq	r0, #0
 80005d6:	bf17      	itett	ne
 80005d8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80005dc:	4608      	moveq	r0, r1
 80005de:	f091 0f00 	teqne	r1, #0
 80005e2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80005e6:	d014      	beq.n	8000612 <__aeabi_fmul+0x15e>
 80005e8:	ea92 0f0c 	teq	r2, ip
 80005ec:	d101      	bne.n	80005f2 <__aeabi_fmul+0x13e>
 80005ee:	0242      	lsls	r2, r0, #9
 80005f0:	d10f      	bne.n	8000612 <__aeabi_fmul+0x15e>
 80005f2:	ea93 0f0c 	teq	r3, ip
 80005f6:	d103      	bne.n	8000600 <__aeabi_fmul+0x14c>
 80005f8:	024b      	lsls	r3, r1, #9
 80005fa:	bf18      	it	ne
 80005fc:	4608      	movne	r0, r1
 80005fe:	d108      	bne.n	8000612 <__aeabi_fmul+0x15e>
 8000600:	ea80 0001 	eor.w	r0, r0, r1
 8000604:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000608:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800060c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000610:	4770      	bx	lr
 8000612:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000616:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800061a:	4770      	bx	lr

0800061c <__aeabi_fdiv>:
 800061c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000620:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000624:	bf1e      	ittt	ne
 8000626:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800062a:	ea92 0f0c 	teqne	r2, ip
 800062e:	ea93 0f0c 	teqne	r3, ip
 8000632:	d069      	beq.n	8000708 <__aeabi_fdiv+0xec>
 8000634:	eba2 0203 	sub.w	r2, r2, r3
 8000638:	ea80 0c01 	eor.w	ip, r0, r1
 800063c:	0249      	lsls	r1, r1, #9
 800063e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000642:	d037      	beq.n	80006b4 <__aeabi_fdiv+0x98>
 8000644:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000648:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800064c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000650:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000654:	428b      	cmp	r3, r1
 8000656:	bf38      	it	cc
 8000658:	005b      	lslcc	r3, r3, #1
 800065a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800065e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000662:	428b      	cmp	r3, r1
 8000664:	bf24      	itt	cs
 8000666:	1a5b      	subcs	r3, r3, r1
 8000668:	ea40 000c 	orrcs.w	r0, r0, ip
 800066c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000670:	bf24      	itt	cs
 8000672:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000676:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800067a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800067e:	bf24      	itt	cs
 8000680:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000684:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000688:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800068c:	bf24      	itt	cs
 800068e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000692:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000696:	011b      	lsls	r3, r3, #4
 8000698:	bf18      	it	ne
 800069a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800069e:	d1e0      	bne.n	8000662 <__aeabi_fdiv+0x46>
 80006a0:	2afd      	cmp	r2, #253	; 0xfd
 80006a2:	f63f af50 	bhi.w	8000546 <__aeabi_fmul+0x92>
 80006a6:	428b      	cmp	r3, r1
 80006a8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80006ac:	bf08      	it	eq
 80006ae:	f020 0001 	biceq.w	r0, r0, #1
 80006b2:	4770      	bx	lr
 80006b4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80006b8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80006bc:	327f      	adds	r2, #127	; 0x7f
 80006be:	bfc2      	ittt	gt
 80006c0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80006c4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80006c8:	4770      	bxgt	lr
 80006ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006ce:	f04f 0300 	mov.w	r3, #0
 80006d2:	3a01      	subs	r2, #1
 80006d4:	e737      	b.n	8000546 <__aeabi_fmul+0x92>
 80006d6:	f092 0f00 	teq	r2, #0
 80006da:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80006de:	bf02      	ittt	eq
 80006e0:	0040      	lsleq	r0, r0, #1
 80006e2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80006e6:	3a01      	subeq	r2, #1
 80006e8:	d0f9      	beq.n	80006de <__aeabi_fdiv+0xc2>
 80006ea:	ea40 000c 	orr.w	r0, r0, ip
 80006ee:	f093 0f00 	teq	r3, #0
 80006f2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80006f6:	bf02      	ittt	eq
 80006f8:	0049      	lsleq	r1, r1, #1
 80006fa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80006fe:	3b01      	subeq	r3, #1
 8000700:	d0f9      	beq.n	80006f6 <__aeabi_fdiv+0xda>
 8000702:	ea41 010c 	orr.w	r1, r1, ip
 8000706:	e795      	b.n	8000634 <__aeabi_fdiv+0x18>
 8000708:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800070c:	ea92 0f0c 	teq	r2, ip
 8000710:	d108      	bne.n	8000724 <__aeabi_fdiv+0x108>
 8000712:	0242      	lsls	r2, r0, #9
 8000714:	f47f af7d 	bne.w	8000612 <__aeabi_fmul+0x15e>
 8000718:	ea93 0f0c 	teq	r3, ip
 800071c:	f47f af70 	bne.w	8000600 <__aeabi_fmul+0x14c>
 8000720:	4608      	mov	r0, r1
 8000722:	e776      	b.n	8000612 <__aeabi_fmul+0x15e>
 8000724:	ea93 0f0c 	teq	r3, ip
 8000728:	d104      	bne.n	8000734 <__aeabi_fdiv+0x118>
 800072a:	024b      	lsls	r3, r1, #9
 800072c:	f43f af4c 	beq.w	80005c8 <__aeabi_fmul+0x114>
 8000730:	4608      	mov	r0, r1
 8000732:	e76e      	b.n	8000612 <__aeabi_fmul+0x15e>
 8000734:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000738:	bf18      	it	ne
 800073a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800073e:	d1ca      	bne.n	80006d6 <__aeabi_fdiv+0xba>
 8000740:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000744:	f47f af5c 	bne.w	8000600 <__aeabi_fmul+0x14c>
 8000748:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800074c:	f47f af3c 	bne.w	80005c8 <__aeabi_fmul+0x114>
 8000750:	e75f      	b.n	8000612 <__aeabi_fmul+0x15e>
 8000752:	bf00      	nop

08000754 <__aeabi_f2uiz>:
 8000754:	0042      	lsls	r2, r0, #1
 8000756:	d20e      	bcs.n	8000776 <__aeabi_f2uiz+0x22>
 8000758:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800075c:	d30b      	bcc.n	8000776 <__aeabi_f2uiz+0x22>
 800075e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000762:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000766:	d409      	bmi.n	800077c <__aeabi_f2uiz+0x28>
 8000768:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800076c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000770:	fa23 f002 	lsr.w	r0, r3, r2
 8000774:	4770      	bx	lr
 8000776:	f04f 0000 	mov.w	r0, #0
 800077a:	4770      	bx	lr
 800077c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000780:	d101      	bne.n	8000786 <__aeabi_f2uiz+0x32>
 8000782:	0242      	lsls	r2, r0, #9
 8000784:	d102      	bne.n	800078c <__aeabi_f2uiz+0x38>
 8000786:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800078a:	4770      	bx	lr
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop

08000794 <__aeabi_uldivmod>:
 8000794:	b953      	cbnz	r3, 80007ac <__aeabi_uldivmod+0x18>
 8000796:	b94a      	cbnz	r2, 80007ac <__aeabi_uldivmod+0x18>
 8000798:	2900      	cmp	r1, #0
 800079a:	bf08      	it	eq
 800079c:	2800      	cmpeq	r0, #0
 800079e:	bf1c      	itt	ne
 80007a0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80007a4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80007a8:	f000 b96e 	b.w	8000a88 <__aeabi_idiv0>
 80007ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80007b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007b4:	f000 f806 	bl	80007c4 <__udivmoddi4>
 80007b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007c0:	b004      	add	sp, #16
 80007c2:	4770      	bx	lr

080007c4 <__udivmoddi4>:
 80007c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007c8:	9d08      	ldr	r5, [sp, #32]
 80007ca:	460e      	mov	r6, r1
 80007cc:	4604      	mov	r4, r0
 80007ce:	468c      	mov	ip, r1
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	f040 8081 	bne.w	80008d8 <__udivmoddi4+0x114>
 80007d6:	428a      	cmp	r2, r1
 80007d8:	4617      	mov	r7, r2
 80007da:	d945      	bls.n	8000868 <__udivmoddi4+0xa4>
 80007dc:	fab2 f282 	clz	r2, r2
 80007e0:	b14a      	cbz	r2, 80007f6 <__udivmoddi4+0x32>
 80007e2:	f1c2 0120 	rsb	r1, r2, #32
 80007e6:	fa06 f302 	lsl.w	r3, r6, r2
 80007ea:	fa20 f101 	lsr.w	r1, r0, r1
 80007ee:	4097      	lsls	r7, r2
 80007f0:	ea41 0c03 	orr.w	ip, r1, r3
 80007f4:	4094      	lsls	r4, r2
 80007f6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007fa:	0c23      	lsrs	r3, r4, #16
 80007fc:	fbbc f6fe 	udiv	r6, ip, lr
 8000800:	b2b9      	uxth	r1, r7
 8000802:	fb0e cc16 	mls	ip, lr, r6, ip
 8000806:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 800080a:	fb06 f001 	mul.w	r0, r6, r1
 800080e:	4298      	cmp	r0, r3
 8000810:	d909      	bls.n	8000826 <__udivmoddi4+0x62>
 8000812:	18fb      	adds	r3, r7, r3
 8000814:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000818:	f080 8115 	bcs.w	8000a46 <__udivmoddi4+0x282>
 800081c:	4298      	cmp	r0, r3
 800081e:	f240 8112 	bls.w	8000a46 <__udivmoddi4+0x282>
 8000822:	3e02      	subs	r6, #2
 8000824:	443b      	add	r3, r7
 8000826:	1a1b      	subs	r3, r3, r0
 8000828:	b2a4      	uxth	r4, r4
 800082a:	fbb3 f0fe 	udiv	r0, r3, lr
 800082e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000832:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000836:	fb00 f101 	mul.w	r1, r0, r1
 800083a:	42a1      	cmp	r1, r4
 800083c:	d909      	bls.n	8000852 <__udivmoddi4+0x8e>
 800083e:	193c      	adds	r4, r7, r4
 8000840:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000844:	f080 8101 	bcs.w	8000a4a <__udivmoddi4+0x286>
 8000848:	42a1      	cmp	r1, r4
 800084a:	f240 80fe 	bls.w	8000a4a <__udivmoddi4+0x286>
 800084e:	3802      	subs	r0, #2
 8000850:	443c      	add	r4, r7
 8000852:	1a64      	subs	r4, r4, r1
 8000854:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000858:	2100      	movs	r1, #0
 800085a:	b11d      	cbz	r5, 8000864 <__udivmoddi4+0xa0>
 800085c:	40d4      	lsrs	r4, r2
 800085e:	2300      	movs	r3, #0
 8000860:	e9c5 4300 	strd	r4, r3, [r5]
 8000864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000868:	b902      	cbnz	r2, 800086c <__udivmoddi4+0xa8>
 800086a:	deff      	udf	#255	; 0xff
 800086c:	fab2 f282 	clz	r2, r2
 8000870:	2a00      	cmp	r2, #0
 8000872:	d14f      	bne.n	8000914 <__udivmoddi4+0x150>
 8000874:	1bcb      	subs	r3, r1, r7
 8000876:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800087a:	fa1f f887 	uxth.w	r8, r7
 800087e:	2101      	movs	r1, #1
 8000880:	fbb3 fcfe 	udiv	ip, r3, lr
 8000884:	0c26      	lsrs	r6, r4, #16
 8000886:	fb0e 331c 	mls	r3, lr, ip, r3
 800088a:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 800088e:	fb08 f30c 	mul.w	r3, r8, ip
 8000892:	42b3      	cmp	r3, r6
 8000894:	d907      	bls.n	80008a6 <__udivmoddi4+0xe2>
 8000896:	19be      	adds	r6, r7, r6
 8000898:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800089c:	d202      	bcs.n	80008a4 <__udivmoddi4+0xe0>
 800089e:	42b3      	cmp	r3, r6
 80008a0:	f200 80eb 	bhi.w	8000a7a <__udivmoddi4+0x2b6>
 80008a4:	4684      	mov	ip, r0
 80008a6:	1af6      	subs	r6, r6, r3
 80008a8:	b2a3      	uxth	r3, r4
 80008aa:	fbb6 f0fe 	udiv	r0, r6, lr
 80008ae:	fb0e 6610 	mls	r6, lr, r0, r6
 80008b2:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 80008b6:	fb08 f800 	mul.w	r8, r8, r0
 80008ba:	45a0      	cmp	r8, r4
 80008bc:	d907      	bls.n	80008ce <__udivmoddi4+0x10a>
 80008be:	193c      	adds	r4, r7, r4
 80008c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80008c4:	d202      	bcs.n	80008cc <__udivmoddi4+0x108>
 80008c6:	45a0      	cmp	r8, r4
 80008c8:	f200 80d2 	bhi.w	8000a70 <__udivmoddi4+0x2ac>
 80008cc:	4618      	mov	r0, r3
 80008ce:	eba4 0408 	sub.w	r4, r4, r8
 80008d2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80008d6:	e7c0      	b.n	800085a <__udivmoddi4+0x96>
 80008d8:	428b      	cmp	r3, r1
 80008da:	d908      	bls.n	80008ee <__udivmoddi4+0x12a>
 80008dc:	2d00      	cmp	r5, #0
 80008de:	f000 80af 	beq.w	8000a40 <__udivmoddi4+0x27c>
 80008e2:	2100      	movs	r1, #0
 80008e4:	e9c5 0600 	strd	r0, r6, [r5]
 80008e8:	4608      	mov	r0, r1
 80008ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ee:	fab3 f183 	clz	r1, r3
 80008f2:	2900      	cmp	r1, #0
 80008f4:	d149      	bne.n	800098a <__udivmoddi4+0x1c6>
 80008f6:	42b3      	cmp	r3, r6
 80008f8:	d302      	bcc.n	8000900 <__udivmoddi4+0x13c>
 80008fa:	4282      	cmp	r2, r0
 80008fc:	f200 80bb 	bhi.w	8000a76 <__udivmoddi4+0x2b2>
 8000900:	1a84      	subs	r4, r0, r2
 8000902:	eb66 0303 	sbc.w	r3, r6, r3
 8000906:	2001      	movs	r0, #1
 8000908:	469c      	mov	ip, r3
 800090a:	2d00      	cmp	r5, #0
 800090c:	d0aa      	beq.n	8000864 <__udivmoddi4+0xa0>
 800090e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000912:	e7a7      	b.n	8000864 <__udivmoddi4+0xa0>
 8000914:	f1c2 0320 	rsb	r3, r2, #32
 8000918:	4097      	lsls	r7, r2
 800091a:	40d8      	lsrs	r0, r3
 800091c:	4091      	lsls	r1, r2
 800091e:	40de      	lsrs	r6, r3
 8000920:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000924:	4308      	orrs	r0, r1
 8000926:	ea4f 4c10 	mov.w	ip, r0, lsr #16
 800092a:	fbb6 f1fe 	udiv	r1, r6, lr
 800092e:	fa1f f887 	uxth.w	r8, r7
 8000932:	fb0e 6611 	mls	r6, lr, r1, r6
 8000936:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
 800093a:	fb01 f308 	mul.w	r3, r1, r8
 800093e:	42b3      	cmp	r3, r6
 8000940:	fa04 f402 	lsl.w	r4, r4, r2
 8000944:	d909      	bls.n	800095a <__udivmoddi4+0x196>
 8000946:	19be      	adds	r6, r7, r6
 8000948:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
 800094c:	f080 808e 	bcs.w	8000a6c <__udivmoddi4+0x2a8>
 8000950:	42b3      	cmp	r3, r6
 8000952:	f240 808b 	bls.w	8000a6c <__udivmoddi4+0x2a8>
 8000956:	3902      	subs	r1, #2
 8000958:	443e      	add	r6, r7
 800095a:	1af3      	subs	r3, r6, r3
 800095c:	b286      	uxth	r6, r0
 800095e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000962:	fb0e 3310 	mls	r3, lr, r0, r3
 8000966:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 800096a:	fb00 f308 	mul.w	r3, r0, r8
 800096e:	42b3      	cmp	r3, r6
 8000970:	d907      	bls.n	8000982 <__udivmoddi4+0x1be>
 8000972:	19be      	adds	r6, r7, r6
 8000974:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000978:	d274      	bcs.n	8000a64 <__udivmoddi4+0x2a0>
 800097a:	42b3      	cmp	r3, r6
 800097c:	d972      	bls.n	8000a64 <__udivmoddi4+0x2a0>
 800097e:	3802      	subs	r0, #2
 8000980:	443e      	add	r6, r7
 8000982:	1af3      	subs	r3, r6, r3
 8000984:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000988:	e77a      	b.n	8000880 <__udivmoddi4+0xbc>
 800098a:	f1c1 0720 	rsb	r7, r1, #32
 800098e:	fa03 f401 	lsl.w	r4, r3, r1
 8000992:	fa22 f307 	lsr.w	r3, r2, r7
 8000996:	431c      	orrs	r4, r3
 8000998:	fa20 f907 	lsr.w	r9, r0, r7
 800099c:	fa06 f301 	lsl.w	r3, r6, r1
 80009a0:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80009a4:	40fe      	lsrs	r6, r7
 80009a6:	ea49 0903 	orr.w	r9, r9, r3
 80009aa:	ea4f 4319 	mov.w	r3, r9, lsr #16
 80009ae:	fbb6 fefc 	udiv	lr, r6, ip
 80009b2:	fa1f f884 	uxth.w	r8, r4
 80009b6:	fb0c 661e 	mls	r6, ip, lr, r6
 80009ba:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 80009be:	fb0e fa08 	mul.w	sl, lr, r8
 80009c2:	45b2      	cmp	sl, r6
 80009c4:	fa02 f201 	lsl.w	r2, r2, r1
 80009c8:	fa00 f301 	lsl.w	r3, r0, r1
 80009cc:	d908      	bls.n	80009e0 <__udivmoddi4+0x21c>
 80009ce:	19a6      	adds	r6, r4, r6
 80009d0:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 80009d4:	d248      	bcs.n	8000a68 <__udivmoddi4+0x2a4>
 80009d6:	45b2      	cmp	sl, r6
 80009d8:	d946      	bls.n	8000a68 <__udivmoddi4+0x2a4>
 80009da:	f1ae 0e02 	sub.w	lr, lr, #2
 80009de:	4426      	add	r6, r4
 80009e0:	eba6 060a 	sub.w	r6, r6, sl
 80009e4:	fa1f f989 	uxth.w	r9, r9
 80009e8:	fbb6 f0fc 	udiv	r0, r6, ip
 80009ec:	fb0c 6610 	mls	r6, ip, r0, r6
 80009f0:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
 80009f4:	fb00 f808 	mul.w	r8, r0, r8
 80009f8:	45b0      	cmp	r8, r6
 80009fa:	d907      	bls.n	8000a0c <__udivmoddi4+0x248>
 80009fc:	19a6      	adds	r6, r4, r6
 80009fe:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000a02:	d22d      	bcs.n	8000a60 <__udivmoddi4+0x29c>
 8000a04:	45b0      	cmp	r8, r6
 8000a06:	d92b      	bls.n	8000a60 <__udivmoddi4+0x29c>
 8000a08:	3802      	subs	r0, #2
 8000a0a:	4426      	add	r6, r4
 8000a0c:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000a10:	eba6 0608 	sub.w	r6, r6, r8
 8000a14:	fba0 8902 	umull	r8, r9, r0, r2
 8000a18:	454e      	cmp	r6, r9
 8000a1a:	46c4      	mov	ip, r8
 8000a1c:	46ce      	mov	lr, r9
 8000a1e:	d318      	bcc.n	8000a52 <__udivmoddi4+0x28e>
 8000a20:	d015      	beq.n	8000a4e <__udivmoddi4+0x28a>
 8000a22:	b375      	cbz	r5, 8000a82 <__udivmoddi4+0x2be>
 8000a24:	ebb3 020c 	subs.w	r2, r3, ip
 8000a28:	eb66 060e 	sbc.w	r6, r6, lr
 8000a2c:	fa06 f707 	lsl.w	r7, r6, r7
 8000a30:	fa22 f301 	lsr.w	r3, r2, r1
 8000a34:	40ce      	lsrs	r6, r1
 8000a36:	431f      	orrs	r7, r3
 8000a38:	e9c5 7600 	strd	r7, r6, [r5]
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	e711      	b.n	8000864 <__udivmoddi4+0xa0>
 8000a40:	4629      	mov	r1, r5
 8000a42:	4628      	mov	r0, r5
 8000a44:	e70e      	b.n	8000864 <__udivmoddi4+0xa0>
 8000a46:	4666      	mov	r6, ip
 8000a48:	e6ed      	b.n	8000826 <__udivmoddi4+0x62>
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	e701      	b.n	8000852 <__udivmoddi4+0x8e>
 8000a4e:	4543      	cmp	r3, r8
 8000a50:	d2e7      	bcs.n	8000a22 <__udivmoddi4+0x25e>
 8000a52:	ebb8 0c02 	subs.w	ip, r8, r2
 8000a56:	eb69 0404 	sbc.w	r4, r9, r4
 8000a5a:	3801      	subs	r0, #1
 8000a5c:	46a6      	mov	lr, r4
 8000a5e:	e7e0      	b.n	8000a22 <__udivmoddi4+0x25e>
 8000a60:	4660      	mov	r0, ip
 8000a62:	e7d3      	b.n	8000a0c <__udivmoddi4+0x248>
 8000a64:	4660      	mov	r0, ip
 8000a66:	e78c      	b.n	8000982 <__udivmoddi4+0x1be>
 8000a68:	4686      	mov	lr, r0
 8000a6a:	e7b9      	b.n	80009e0 <__udivmoddi4+0x21c>
 8000a6c:	4661      	mov	r1, ip
 8000a6e:	e774      	b.n	800095a <__udivmoddi4+0x196>
 8000a70:	3802      	subs	r0, #2
 8000a72:	443c      	add	r4, r7
 8000a74:	e72b      	b.n	80008ce <__udivmoddi4+0x10a>
 8000a76:	4608      	mov	r0, r1
 8000a78:	e747      	b.n	800090a <__udivmoddi4+0x146>
 8000a7a:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a7e:	443e      	add	r6, r7
 8000a80:	e711      	b.n	80008a6 <__udivmoddi4+0xe2>
 8000a82:	4629      	mov	r1, r5
 8000a84:	e6ee      	b.n	8000864 <__udivmoddi4+0xa0>
 8000a86:	bf00      	nop

08000a88 <__aeabi_idiv0>:
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <pwm_pin_set_usec.constprop.0>:
 * @param flags Flags for pin configuration (polarity).
 *
 * @retval 0 If successful.
 * @retval Negative errno code if failure.
 */
static inline int pwm_pin_set_usec(const struct device *dev, uint32_t pwm,
 8000a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a90:	4606      	mov	r6, r0
 8000a92:	b087      	sub	sp, #28
 8000a94:	460d      	mov	r5, r1
 8000a96:	4617      	mov	r7, r2
	return api->get_cycles_per_sec(dev, pwm, cycles);
 8000a98:	6883      	ldr	r3, [r0, #8]
 8000a9a:	aa04      	add	r2, sp, #16
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	4798      	blx	r3
				   uint32_t period, uint32_t pulse,
				   pwm_flags_t flags)
{
	uint64_t period_cycles, pulse_cycles, cycles_per_sec;

	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
 8000aa2:	9003      	str	r0, [sp, #12]
 8000aa4:	bb80      	cbnz	r0, 8000b08 <pwm_pin_set_usec.constprop.0+0x7c>
		return -EIO;
	}

	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 8000aa6:	4a1b      	ldr	r2, [pc, #108]	; (8000b14 <pwm_pin_set_usec.constprop.0+0x88>)
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	e9dd 4b04 	ldrd	r4, fp, [sp, #16]
 8000aae:	fba5 8904 	umull	r8, r9, r5, r4
 8000ab2:	fb05 990b 	mla	r9, r5, fp, r9
 8000ab6:	4640      	mov	r0, r8
 8000ab8:	4649      	mov	r1, r9
 8000aba:	f7ff fe6b 	bl	8000794 <__aeabi_uldivmod>
	if (period_cycles >= ((uint64_t)1 << 32)) {
 8000abe:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <pwm_pin_set_usec.constprop.0+0x8c>)
 8000ac0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 8000ac4:	4682      	mov	sl, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
 8000ac6:	454b      	cmp	r3, r9
 8000ac8:	bf08      	it	eq
 8000aca:	4542      	cmpeq	r2, r8
 8000acc:	d31f      	bcc.n	8000b0e <pwm_pin_set_usec.constprop.0+0x82>
		return -ENOTSUP;
	}

	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
 8000ace:	fba7 4504 	umull	r4, r5, r7, r4
 8000ad2:	4a10      	ldr	r2, [pc, #64]	; (8000b14 <pwm_pin_set_usec.constprop.0+0x88>)
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	fb07 550b 	mla	r5, r7, fp, r5
 8000ada:	4620      	mov	r0, r4
 8000adc:	4629      	mov	r1, r5
 8000ade:	f7ff fe59 	bl	8000794 <__aeabi_uldivmod>
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
 8000ae2:	4a0d      	ldr	r2, [pc, #52]	; (8000b18 <pwm_pin_set_usec.constprop.0+0x8c>)
 8000ae4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
 8000ae8:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
 8000aea:	42aa      	cmp	r2, r5
 8000aec:	bf08      	it	eq
 8000aee:	42a1      	cmpeq	r1, r4
 8000af0:	d30d      	bcc.n	8000b0e <pwm_pin_set_usec.constprop.0+0x82>
	return api->pin_set(dev, pwm, period, pulse, flags);
 8000af2:	68b2      	ldr	r2, [r6, #8]
 8000af4:	4630      	mov	r0, r6
 8000af6:	9903      	ldr	r1, [sp, #12]
 8000af8:	9100      	str	r1, [sp, #0]
 8000afa:	2101      	movs	r1, #1
 8000afc:	6814      	ldr	r4, [r2, #0]
 8000afe:	4652      	mov	r2, sl
 8000b00:	47a0      	blx	r4
		return -ENOTSUP;
	}

	return pwm_pin_set_cycles(dev, pwm, (uint32_t)period_cycles,
				  (uint32_t)pulse_cycles, flags);
}
 8000b02:	b007      	add	sp, #28
 8000b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EIO;
 8000b08:	f06f 0004 	mvn.w	r0, #4
 8000b0c:	e7f9      	b.n	8000b02 <pwm_pin_set_usec.constprop.0+0x76>
		return -ENOTSUP;
 8000b0e:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8000b12:	e7f6      	b.n	8000b02 <pwm_pin_set_usec.constprop.0+0x76>
 8000b14:	000f4240 	.word	0x000f4240
 8000b18:	000f423f 	.word	0x000f423f

08000b1c <main>:
	uint32_t max_period;
	uint32_t period;
	uint8_t dir = 0U;
	int ret;

	printk("PWM-based blinky\n");
 8000b1c:	4828      	ldr	r0, [pc, #160]	; (8000bc0 <main+0xa4>)
{
 8000b1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	printk("PWM-based blinky\n");
 8000b22:	f003 fb09 	bl	8004138 <printk>
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
 8000b26:	4827      	ldr	r0, [pc, #156]	; (8000bc4 <main+0xa8>)
 8000b28:	f002 fc3c 	bl	80033a4 <z_impl_device_get_binding>

	pwm = device_get_binding(PWM_LABEL);
	if (!pwm) {
 8000b2c:	4607      	mov	r7, r0
 8000b2e:	b928      	cbnz	r0, 8000b3c <main+0x20>
		printk("Error: didn't find %s device\n", PWM_LABEL);
 8000b30:	4924      	ldr	r1, [pc, #144]	; (8000bc4 <main+0xa8>)
 8000b32:	4825      	ldr	r0, [pc, #148]	; (8000bc8 <main+0xac>)
			dir = 1U;
		}

		k_sleep(K_SECONDS(4U));
	}
}
 8000b34:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			printk("Error %d: failed to set pulse width\n", ret);
 8000b38:	f003 bafe 	b.w	8004138 <printk>
	while (pwm_pin_set_usec(pwm, PWM_CHANNEL,
 8000b3c:	2505      	movs	r5, #5
	max_period = MAX_PERIOD_USEC;
 8000b3e:	4e23      	ldr	r6, [pc, #140]	; (8000bcc <main+0xb0>)
	printk("Calibrating for device %s channel %d...\n",
 8000b40:	2201      	movs	r2, #1
 8000b42:	4920      	ldr	r1, [pc, #128]	; (8000bc4 <main+0xa8>)
 8000b44:	4822      	ldr	r0, [pc, #136]	; (8000bd0 <main+0xb4>)
 8000b46:	f003 faf7 	bl	8004138 <printk>
	while (pwm_pin_set_usec(pwm, PWM_CHANNEL,
 8000b4a:	46b1      	mov	r9, r6
 8000b4c:	0876      	lsrs	r6, r6, #1
 8000b4e:	4638      	mov	r0, r7
 8000b50:	4632      	mov	r2, r6
 8000b52:	4649      	mov	r1, r9
 8000b54:	f7ff ff9a 	bl	8000a8c <pwm_pin_set_usec.constprop.0>
 8000b58:	4604      	mov	r4, r0
 8000b5a:	b998      	cbnz	r0, 8000b84 <main+0x68>
	printk("Done calibrating; maximum/minimum periods %u/%u usec\n",
 8000b5c:	46c8      	mov	r8, r9
		} else if (period < MIN_PERIOD_USEC) {
 8000b5e:	f643 5a08 	movw	sl, #15624	; 0x3d08
	printk("Done calibrating; maximum/minimum periods %u/%u usec\n",
 8000b62:	f643 5209 	movw	r2, #15625	; 0x3d09
 8000b66:	4649      	mov	r1, r9
 8000b68:	481a      	ldr	r0, [pc, #104]	; (8000bd4 <main+0xb8>)
 8000b6a:	f003 fae5 	bl	8004138 <printk>
		ret = pwm_pin_set_usec(pwm, PWM_CHANNEL,
 8000b6e:	ea4f 0558 	mov.w	r5, r8, lsr #1
 8000b72:	4641      	mov	r1, r8
 8000b74:	4638      	mov	r0, r7
 8000b76:	462a      	mov	r2, r5
 8000b78:	f7ff ff88 	bl	8000a8c <pwm_pin_set_usec.constprop.0>
		if (ret) {
 8000b7c:	4601      	mov	r1, r0
 8000b7e:	b158      	cbz	r0, 8000b98 <main+0x7c>
			printk("Error %d: failed to set pulse width\n", ret);
 8000b80:	4815      	ldr	r0, [pc, #84]	; (8000bd8 <main+0xbc>)
 8000b82:	e7d7      	b.n	8000b34 <main+0x18>
		if (max_period < (4U * MIN_PERIOD_USEC)) {
 8000b84:	3d01      	subs	r5, #1
 8000b86:	d1e0      	bne.n	8000b4a <main+0x2e>
			printk("Error: PWM device %s "
 8000b88:	f24f 4224 	movw	r2, #62500	; 0xf424
 8000b8c:	490d      	ldr	r1, [pc, #52]	; (8000bc4 <main+0xa8>)
 8000b8e:	4813      	ldr	r0, [pc, #76]	; (8000bdc <main+0xc0>)
}
 8000b90:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			printk("Error: PWM device %s "
 8000b94:	f003 bad0 	b.w	8004138 <printk>
		period = dir ? (period * 2U) : (period / 2U);
 8000b98:	b10c      	cbz	r4, 8000b9e <main+0x82>
 8000b9a:	ea4f 0548 	mov.w	r5, r8, lsl #1
		if (period > max_period) {
 8000b9e:	45a9      	cmp	r9, r5
 8000ba0:	d30b      	bcc.n	8000bba <main+0x9e>
		} else if (period < MIN_PERIOD_USEC) {
 8000ba2:	4555      	cmp	r5, sl
 8000ba4:	d802      	bhi.n	8000bac <main+0x90>
			dir = 1U;
 8000ba6:	2401      	movs	r4, #1
			period = MIN_PERIOD_USEC * 2U;
 8000ba8:	f647 2512 	movw	r5, #31250	; 0x7a12
		parm0.val = timeout;
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
 8000bac:	f649 4040 	movw	r0, #40000	; 0x9c40
 8000bb0:	2100      	movs	r1, #0
	while (1) {
 8000bb2:	46a8      	mov	r8, r5
 8000bb4:	f003 f87a 	bl	8003cac <z_impl_k_sleep>
 8000bb8:	e7d9      	b.n	8000b6e <main+0x52>
	while (pwm_pin_set_usec(pwm, PWM_CHANNEL,
 8000bba:	4635      	mov	r5, r6
			dir = 0U;
 8000bbc:	2400      	movs	r4, #0
 8000bbe:	e7f5      	b.n	8000bac <main+0x90>
 8000bc0:	0800540e 	.word	0x0800540e
 8000bc4:	08005420 	.word	0x08005420
 8000bc8:	08005427 	.word	0x08005427
 8000bcc:	000f4240 	.word	0x000f4240
 8000bd0:	08005445 	.word	0x08005445
 8000bd4:	080054aa 	.word	0x080054aa
 8000bd8:	080054e0 	.word	0x080054e0
 8000bdc:	0800546e 	.word	0x0800546e

08000be0 <print_digits>:
}
#endif /* CONFIG_PRINTK */

static void print_digits(out_func_t out, void *ctx, printk_val_t num, unsigned int base,
			 bool pad_before, char pad_char, int min_width)
{
 8000be0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000be4:	b087      	sub	sp, #28
 8000be6:	4606      	mov	r6, r0
 8000be8:	460f      	mov	r7, r1
 8000bea:	4610      	mov	r0, r2
 8000bec:	4619      	mov	r1, r3
 8000bee:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
 8000bf2:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
	char buf[DIGITS_BUFLEN];
	unsigned int i;

	/* Print it backwards into the end of the buffer, low digits first */
	for (i = DIGITS_BUFLEN - 1U; num != 0U; i--) {
 8000bf6:	2514      	movs	r5, #20
		buf[i] = "0123456789abcdef"[num % base];
 8000bf8:	4c1c      	ldr	r4, [pc, #112]	; (8000c6c <print_digits+0x8c>)
	for (i = DIGITS_BUFLEN - 1U; num != 0U; i--) {
 8000bfa:	ea50 0301 	orrs.w	r3, r0, r1
 8000bfe:	d117      	bne.n	8000c30 <print_digits+0x50>
		num /= base;
	}

	if (i == DIGITS_BUFLEN - 1U) {
 8000c00:	2d14      	cmp	r5, #20
		buf[i] = '0';
	} else {
		i++;
	}

	int pad = MAX(min_width - (int)(DIGITS_BUFLEN - i), 0);
 8000c02:	9c11      	ldr	r4, [sp, #68]	; 0x44
		i++;
 8000c04:	bf18      	it	ne
 8000c06:	3501      	addne	r5, #1
	int pad = MAX(min_width - (int)(DIGITS_BUFLEN - i), 0);
 8000c08:	f1a4 0415 	sub.w	r4, r4, #21
		buf[i] = '0';
 8000c0c:	bf08      	it	eq
 8000c0e:	2330      	moveq	r3, #48	; 0x30
	int pad = MAX(min_width - (int)(DIGITS_BUFLEN - i), 0);
 8000c10:	442c      	add	r4, r5
		buf[i] = '0';
 8000c12:	bf08      	it	eq
 8000c14:	f88d 3014 	strbeq.w	r3, [sp, #20]
	int pad = MAX(min_width - (int)(DIGITS_BUFLEN - i), 0);
 8000c18:	ea24 74e4 	bic.w	r4, r4, r4, asr #31

	for (/**/; pad > 0 && pad_before; pad--) {
 8000c1c:	b114      	cbz	r4, 8000c24 <print_digits+0x44>
 8000c1e:	f1b9 0f00 	cmp.w	r9, #0
 8000c22:	d112      	bne.n	8000c4a <print_digits+0x6a>
		out(pad_char, ctx);
	}
	for (/**/; i < DIGITS_BUFLEN; i++) {
 8000c24:	2d14      	cmp	r5, #20
 8000c26:	d915      	bls.n	8000c54 <print_digits+0x74>
		out(buf[i], ctx);
	}
	for (/**/; pad > 0; pad--) {
 8000c28:	b9d4      	cbnz	r4, 8000c60 <print_digits+0x80>
		out(pad_char, ctx);
	}
}
 8000c2a:	b007      	add	sp, #28
 8000c2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		buf[i] = "0123456789abcdef"[num % base];
 8000c30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8000c32:	2300      	movs	r3, #0
 8000c34:	f7ff fdae 	bl	8000794 <__aeabi_uldivmod>
 8000c38:	4684      	mov	ip, r0
 8000c3a:	460b      	mov	r3, r1
 8000c3c:	5ca2      	ldrb	r2, [r4, r2]
		num /= base;
 8000c3e:	4660      	mov	r0, ip
		buf[i] = "0123456789abcdef"[num % base];
 8000c40:	f80d 2005 	strb.w	r2, [sp, r5]
		num /= base;
 8000c44:	4619      	mov	r1, r3
	for (i = DIGITS_BUFLEN - 1U; num != 0U; i--) {
 8000c46:	3d01      	subs	r5, #1
 8000c48:	e7d7      	b.n	8000bfa <print_digits+0x1a>
		out(pad_char, ctx);
 8000c4a:	4639      	mov	r1, r7
 8000c4c:	4640      	mov	r0, r8
	for (/**/; pad > 0 && pad_before; pad--) {
 8000c4e:	3c01      	subs	r4, #1
		out(pad_char, ctx);
 8000c50:	47b0      	blx	r6
	for (/**/; pad > 0 && pad_before; pad--) {
 8000c52:	e7e3      	b.n	8000c1c <print_digits+0x3c>
		out(buf[i], ctx);
 8000c54:	f81d 0005 	ldrb.w	r0, [sp, r5]
 8000c58:	4639      	mov	r1, r7
	for (/**/; i < DIGITS_BUFLEN; i++) {
 8000c5a:	3501      	adds	r5, #1
		out(buf[i], ctx);
 8000c5c:	47b0      	blx	r6
	for (/**/; i < DIGITS_BUFLEN; i++) {
 8000c5e:	e7e1      	b.n	8000c24 <print_digits+0x44>
		out(pad_char, ctx);
 8000c60:	4639      	mov	r1, r7
 8000c62:	4640      	mov	r0, r8
	for (/**/; pad > 0; pad--) {
 8000c64:	3c01      	subs	r4, #1
		out(pad_char, ctx);
 8000c66:	47b0      	blx	r6
	for (/**/; pad > 0; pad--) {
 8000c68:	e7de      	b.n	8000c28 <print_digits+0x48>
 8000c6a:	bf00      	nop
 8000c6c:	08005505 	.word	0x08005505

08000c70 <__printk_hook_install>:
	_char_out = fn;
 8000c70:	4b01      	ldr	r3, [pc, #4]	; (8000c78 <__printk_hook_install+0x8>)
 8000c72:	6018      	str	r0, [r3, #0]
}
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	24000000 	.word	0x24000000

08000c7c <z_vprintk>:
 * @param ap Variable parameters
 *
 * @return N/A
 */
void z_vprintk(out_func_t out, void *ctx, const char *fmt, va_list ap)
{
 8000c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int might_format = 0; /* 1 if encountered a '%' */
	enum pad_type padding = PAD_NONE;
	int min_width = -1;
	char length_mod = 0;
 8000c80:	2600      	movs	r6, #0
{
 8000c82:	b087      	sub	sp, #28
 8000c84:	4605      	mov	r5, r0
 8000c86:	468b      	mov	fp, r1
 8000c88:	461c      	mov	r4, r3

	/* fmt has already been adjusted if needed */

	while (*fmt) {
 8000c8a:	f102 3aff 	add.w	sl, r2, #4294967295	; 0xffffffff
	int min_width = -1;
 8000c8e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
 8000c92:	4637      	mov	r7, r6
			default:
				out((int)'%', ctx);
				out((int)*fmt, ctx);
				break;
			}
			might_format = 0;
 8000c94:	f04f 0900 	mov.w	r9, #0
					break;
 8000c98:	e007      	b.n	8000caa <z_vprintk+0x2e>
		if (!might_format) {
 8000c9a:	f1b9 0f00 	cmp.w	r9, #0
 8000c9e:	d10b      	bne.n	8000cb8 <z_vprintk+0x3c>
			if (*fmt != '%') {
 8000ca0:	2825      	cmp	r0, #37	; 0x25
 8000ca2:	f000 810a 	beq.w	8000eba <z_vprintk+0x23e>
				out((int)*fmt, ctx);
 8000ca6:	4659      	mov	r1, fp
 8000ca8:	47a8      	blx	r5
	while (*fmt) {
 8000caa:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
 8000cae:	2800      	cmp	r0, #0
 8000cb0:	d1f3      	bne.n	8000c9a <z_vprintk+0x1e>
		}
still_might_format:
		++fmt;
	}
}
 8000cb2:	b007      	add	sp, #28
 8000cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
 8000cb8:	287a      	cmp	r0, #122	; 0x7a
 8000cba:	d80a      	bhi.n	8000cd2 <z_vprintk+0x56>
 8000cbc:	2862      	cmp	r0, #98	; 0x62
 8000cbe:	d810      	bhi.n	8000ce2 <z_vprintk+0x66>
 8000cc0:	2830      	cmp	r0, #48	; 0x30
 8000cc2:	d051      	beq.n	8000d68 <z_vprintk+0xec>
 8000cc4:	d844      	bhi.n	8000d50 <z_vprintk+0xd4>
 8000cc6:	2825      	cmp	r0, #37	; 0x25
 8000cc8:	f000 80f5 	beq.w	8000eb6 <z_vprintk+0x23a>
 8000ccc:	282d      	cmp	r0, #45	; 0x2d
 8000cce:	f000 80fb 	beq.w	8000ec8 <z_vprintk+0x24c>
					out((int)'%', ctx);
 8000cd2:	4659      	mov	r1, fp
 8000cd4:	2025      	movs	r0, #37	; 0x25
 8000cd6:	47a8      	blx	r5
					out((int)*fmt, ctx);
 8000cd8:	4659      	mov	r1, fp
 8000cda:	f89a 0000 	ldrb.w	r0, [sl]
 8000cde:	47a8      	blx	r5
 8000ce0:	e7d8      	b.n	8000c94 <z_vprintk+0x18>
 8000ce2:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
 8000ce6:	2b17      	cmp	r3, #23
 8000ce8:	d8f3      	bhi.n	8000cd2 <z_vprintk+0x56>
 8000cea:	a201      	add	r2, pc, #4	; (adr r2, 8000cf0 <z_vprintk+0x74>)
 8000cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cf0:	08000eaf 	.word	0x08000eaf
 8000cf4:	08000db1 	.word	0x08000db1
 8000cf8:	08000cd3 	.word	0x08000cd3
 8000cfc:	08000cd3 	.word	0x08000cd3
 8000d00:	08000cd3 	.word	0x08000cd3
 8000d04:	08000d93 	.word	0x08000d93
 8000d08:	08000db1 	.word	0x08000db1
 8000d0c:	08000cd3 	.word	0x08000cd3
 8000d10:	08000cd3 	.word	0x08000cd3
 8000d14:	08000d93 	.word	0x08000d93
 8000d18:	08000cd3 	.word	0x08000cd3
 8000d1c:	08000cd3 	.word	0x08000cd3
 8000d20:	08000cd3 	.word	0x08000cd3
 8000d24:	08000e2b 	.word	0x08000e2b
 8000d28:	08000cd3 	.word	0x08000cd3
 8000d2c:	08000cd3 	.word	0x08000cd3
 8000d30:	08000e77 	.word	0x08000e77
 8000d34:	08000cd3 	.word	0x08000cd3
 8000d38:	08000db1 	.word	0x08000db1
 8000d3c:	08000cd3 	.word	0x08000cd3
 8000d40:	08000cd3 	.word	0x08000cd3
 8000d44:	08000d59 	.word	0x08000d59
 8000d48:	08000cd3 	.word	0x08000cd3
 8000d4c:	08000d93 	.word	0x08000d93
			switch (*fmt) {
 8000d50:	2839      	cmp	r0, #57	; 0x39
 8000d52:	d915      	bls.n	8000d80 <z_vprintk+0x104>
 8000d54:	2858      	cmp	r0, #88	; 0x58
 8000d56:	d1bc      	bne.n	8000cd2 <z_vprintk+0x56>
				if (*fmt == 'p') {
 8000d58:	f89a 3000 	ldrb.w	r3, [sl]
 8000d5c:	2b70      	cmp	r3, #112	; 0x70
 8000d5e:	d16e      	bne.n	8000e3e <z_vprintk+0x1c2>
					x = va_arg(ap, unsigned int);
 8000d60:	f854 2b04 	ldr.w	r2, [r4], #4
 8000d64:	2300      	movs	r3, #0
 8000d66:	e075      	b.n	8000e54 <z_vprintk+0x1d8>
				if (min_width < 0 && padding == PAD_NONE) {
 8000d68:	f1b8 0f00 	cmp.w	r8, #0
 8000d6c:	da0b      	bge.n	8000d86 <z_vprintk+0x10a>
 8000d6e:	2f00      	cmp	r7, #0
 8000d70:	f000 80ac 	beq.w	8000ecc <z_vprintk+0x250>
					min_width = *fmt - '0';
 8000d74:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
 8000d78:	2f00      	cmp	r7, #0
 8000d7a:	bf08      	it	eq
 8000d7c:	2702      	moveq	r7, #2
 8000d7e:	e794      	b.n	8000caa <z_vprintk+0x2e>
				if (min_width < 0) {
 8000d80:	f1b8 0f00 	cmp.w	r8, #0
 8000d84:	dbf6      	blt.n	8000d74 <z_vprintk+0xf8>
					min_width = 10 * min_width + *fmt - '0';
 8000d86:	230a      	movs	r3, #10
 8000d88:	fb03 0808 	mla	r8, r3, r8, r0
 8000d8c:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 8000d90:	e7f2      	b.n	8000d78 <z_vprintk+0xfc>
				if (*fmt == 'h' && length_mod == 'h') {
 8000d92:	2868      	cmp	r0, #104	; 0x68
 8000d94:	d103      	bne.n	8000d9e <z_vprintk+0x122>
 8000d96:	2e68      	cmp	r6, #104	; 0x68
 8000d98:	d106      	bne.n	8000da8 <z_vprintk+0x12c>
					length_mod = 'H';
 8000d9a:	2648      	movs	r6, #72	; 0x48
 8000d9c:	e785      	b.n	8000caa <z_vprintk+0x2e>
				} else if (*fmt == 'l' && length_mod == 'l') {
 8000d9e:	286c      	cmp	r0, #108	; 0x6c
 8000da0:	d102      	bne.n	8000da8 <z_vprintk+0x12c>
 8000da2:	2e6c      	cmp	r6, #108	; 0x6c
 8000da4:	f000 8094 	beq.w	8000ed0 <z_vprintk+0x254>
				} else if (length_mod == 0) {
 8000da8:	2e00      	cmp	r6, #0
 8000daa:	d192      	bne.n	8000cd2 <z_vprintk+0x56>
 8000dac:	4606      	mov	r6, r0
 8000dae:	e77c      	b.n	8000caa <z_vprintk+0x2e>
				if (length_mod == 'z') {
 8000db0:	2e7a      	cmp	r6, #122	; 0x7a
 8000db2:	d106      	bne.n	8000dc2 <z_vprintk+0x146>
					d = va_arg(ap, long);
 8000db4:	46a1      	mov	r9, r4
 8000db6:	f859 2b04 	ldr.w	r2, [r9], #4
 8000dba:	17d3      	asrs	r3, r2, #31
				if (*fmt != 'u' && negative(d)) {
 8000dbc:	2875      	cmp	r0, #117	; 0x75
 8000dbe:	d123      	bne.n	8000e08 <z_vprintk+0x18c>
 8000dc0:	e00f      	b.n	8000de2 <z_vprintk+0x166>
				} else if (length_mod == 'l') {
 8000dc2:	2e6c      	cmp	r6, #108	; 0x6c
 8000dc4:	d0f6      	beq.n	8000db4 <z_vprintk+0x138>
				} else if (length_mod == 'L') {
 8000dc6:	2e4c      	cmp	r6, #76	; 0x4c
 8000dc8:	d105      	bne.n	8000dd6 <z_vprintk+0x15a>
					long long lld = va_arg(ap, long long);
 8000dca:	3407      	adds	r4, #7
 8000dcc:	f024 0907 	bic.w	r9, r4, #7
					d = (printk_val_t) lld;
 8000dd0:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8000dd4:	e7f2      	b.n	8000dbc <z_vprintk+0x140>
				} else if (*fmt == 'u') {
 8000dd6:	2875      	cmp	r0, #117	; 0x75
 8000dd8:	f104 0904 	add.w	r9, r4, #4
					d = va_arg(ap, unsigned int);
 8000ddc:	6822      	ldr	r2, [r4, #0]
				} else if (*fmt == 'u') {
 8000dde:	d112      	bne.n	8000e06 <z_vprintk+0x18a>
					d = va_arg(ap, unsigned int);
 8000de0:	2300      	movs	r3, #0
	print_digits(out, ctx, num, 10U, padding != PAD_SPACE_AFTER,
 8000de2:	1ef8      	subs	r0, r7, #3
 8000de4:	4659      	mov	r1, fp
 8000de6:	bf18      	it	ne
 8000de8:	2001      	movne	r0, #1
 8000dea:	2f01      	cmp	r7, #1
 8000dec:	9001      	str	r0, [sp, #4]
 8000dee:	bf0c      	ite	eq
 8000df0:	2430      	moveq	r4, #48	; 0x30
 8000df2:	2420      	movne	r4, #32
 8000df4:	200a      	movs	r0, #10
 8000df6:	e9cd 4802 	strd	r4, r8, [sp, #8]
 8000dfa:	9000      	str	r0, [sp, #0]
 8000dfc:	4628      	mov	r0, r5
}
 8000dfe:	464c      	mov	r4, r9
	print_digits(out, ctx, num, 10U, padding != PAD_SPACE_AFTER,
 8000e00:	f7ff feee 	bl	8000be0 <print_digits>
 8000e04:	e746      	b.n	8000c94 <z_vprintk+0x18>
					d = va_arg(ap, int);
 8000e06:	17d3      	asrs	r3, r2, #31
				if (*fmt != 'u' && negative(d)) {
 8000e08:	2a00      	cmp	r2, #0
 8000e0a:	f173 0100 	sbcs.w	r1, r3, #0
 8000e0e:	dae8      	bge.n	8000de2 <z_vprintk+0x166>
					out((int)'-', ctx);
 8000e10:	4659      	mov	r1, fp
 8000e12:	202d      	movs	r0, #45	; 0x2d
					min_width--;
 8000e14:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8000e18:	e9cd 2304 	strd	r2, r3, [sp, #16]
					out((int)'-', ctx);
 8000e1c:	47a8      	blx	r5
					d = -d;
 8000e1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8000e22:	4252      	negs	r2, r2
 8000e24:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
					min_width--;
 8000e28:	e7db      	b.n	8000de2 <z_vprintk+0x166>
				out('0', ctx);
 8000e2a:	4659      	mov	r1, fp
 8000e2c:	2030      	movs	r0, #48	; 0x30
 8000e2e:	47a8      	blx	r5
				out('x', ctx);
 8000e30:	4659      	mov	r1, fp
 8000e32:	2078      	movs	r0, #120	; 0x78
				min_width = sizeof(void *) * 2U;
 8000e34:	f04f 0808 	mov.w	r8, #8
				padding = PAD_ZERO_BEFORE;
 8000e38:	2701      	movs	r7, #1
				out('x', ctx);
 8000e3a:	47a8      	blx	r5
				min_width = sizeof(void *) * 2U;
 8000e3c:	e78c      	b.n	8000d58 <z_vprintk+0xdc>
				} else if (length_mod == 'l') {
 8000e3e:	2e6c      	cmp	r6, #108	; 0x6c
 8000e40:	d08e      	beq.n	8000d60 <z_vprintk+0xe4>
				} else if (length_mod == 'L') {
 8000e42:	2e4c      	cmp	r6, #76	; 0x4c
 8000e44:	d18c      	bne.n	8000d60 <z_vprintk+0xe4>
					x = va_arg(ap, unsigned long long);
 8000e46:	1de3      	adds	r3, r4, #7
 8000e48:	f023 0307 	bic.w	r3, r3, #7
 8000e4c:	461c      	mov	r4, r3
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f854 2b08 	ldr.w	r2, [r4], #8
	print_digits(out, ctx, num, 16U, padding != PAD_SPACE_AFTER,
 8000e54:	1ef8      	subs	r0, r7, #3
 8000e56:	bf18      	it	ne
 8000e58:	2001      	movne	r0, #1
 8000e5a:	2f01      	cmp	r7, #1
 8000e5c:	bf0c      	ite	eq
 8000e5e:	2130      	moveq	r1, #48	; 0x30
 8000e60:	2120      	movne	r1, #32
 8000e62:	9001      	str	r0, [sp, #4]
 8000e64:	4628      	mov	r0, r5
 8000e66:	e9cd 1802 	strd	r1, r8, [sp, #8]
 8000e6a:	2110      	movs	r1, #16
 8000e6c:	9100      	str	r1, [sp, #0]
 8000e6e:	4659      	mov	r1, fp
 8000e70:	f7ff feb6 	bl	8000be0 <print_digits>
 8000e74:	e70e      	b.n	8000c94 <z_vprintk+0x18>
				char *s = va_arg(ap, char *);
 8000e76:	f854 3b04 	ldr.w	r3, [r4], #4
				while (*s) {
 8000e7a:	4699      	mov	r9, r3
 8000e7c:	464a      	mov	r2, r9
 8000e7e:	f819 0b01 	ldrb.w	r0, [r9], #1
 8000e82:	b978      	cbnz	r0, 8000ea4 <z_vprintk+0x228>
				if (padding == PAD_SPACE_AFTER) {
 8000e84:	2f03      	cmp	r7, #3
 8000e86:	d125      	bne.n	8000ed4 <z_vprintk+0x258>
					int remaining = min_width - (s - start);
 8000e88:	eba2 0903 	sub.w	r9, r2, r3
 8000e8c:	eba8 0909 	sub.w	r9, r8, r9
					while (remaining-- > 0) {
 8000e90:	f1b9 0f00 	cmp.w	r9, #0
 8000e94:	f77f aefe 	ble.w	8000c94 <z_vprintk+0x18>
						out(' ', ctx);
 8000e98:	4659      	mov	r1, fp
 8000e9a:	2020      	movs	r0, #32
 8000e9c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8000ea0:	47a8      	blx	r5
 8000ea2:	e7f5      	b.n	8000e90 <z_vprintk+0x214>
					out((int)(*s++), ctx);
 8000ea4:	4659      	mov	r1, fp
 8000ea6:	9304      	str	r3, [sp, #16]
 8000ea8:	47a8      	blx	r5
 8000eaa:	9b04      	ldr	r3, [sp, #16]
 8000eac:	e7e6      	b.n	8000e7c <z_vprintk+0x200>
				out(c, ctx);
 8000eae:	4659      	mov	r1, fp
 8000eb0:	f854 0b04 	ldr.w	r0, [r4], #4
 8000eb4:	e713      	b.n	8000cde <z_vprintk+0x62>
				out((int)'%', ctx);
 8000eb6:	4659      	mov	r1, fp
 8000eb8:	e711      	b.n	8000cde <z_vprintk+0x62>
				length_mod = 0;
 8000eba:	464e      	mov	r6, r9
				padding = PAD_NONE;
 8000ebc:	464f      	mov	r7, r9
				min_width = -1;
 8000ebe:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
				might_format = 1;
 8000ec2:	f04f 0901 	mov.w	r9, #1
 8000ec6:	e6f0      	b.n	8000caa <z_vprintk+0x2e>
			switch (*fmt) {
 8000ec8:	2703      	movs	r7, #3
 8000eca:	e6ee      	b.n	8000caa <z_vprintk+0x2e>
					padding = PAD_ZERO_BEFORE;
 8000ecc:	2701      	movs	r7, #1
 8000ece:	e6ec      	b.n	8000caa <z_vprintk+0x2e>
					length_mod = 'L';
 8000ed0:	264c      	movs	r6, #76	; 0x4c
 8000ed2:	e6ea      	b.n	8000caa <z_vprintk+0x2e>
			might_format = 0;
 8000ed4:	4681      	mov	r9, r0
 8000ed6:	e6e8      	b.n	8000caa <z_vprintk+0x2e>

08000ed8 <stm32h7_init>:
 * So the init priority has to be 0 (zero).
 *
 * @return 0
 */
static int stm32h7_init(const struct device *arg)
{
 8000ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8000eda:	f04f 0310 	mov.w	r3, #16
 8000ede:	f3ef 8011 	mrs	r0, BASEPRI
 8000ee2:	f383 8811 	msr	BASEPRI, r3
 8000ee6:	f3bf 8f6f 	isb	sy
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000eea:	4b2d      	ldr	r3, [pc, #180]	; (8000fa0 <stm32h7_init+0xc8>)
 8000eec:	695a      	ldr	r2, [r3, #20]
 8000eee:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 8000ef2:	d111      	bne.n	8000f18 <stm32h7_init+0x40>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ef4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000ef8:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000efc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f00:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f04:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000f08:	695a      	ldr	r2, [r3, #20]
 8000f0a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000f0e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f10:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f14:	f3bf 8f6f 	isb	sy

	key = irq_lock();

	SCB_EnableICache();

	if (!(SCB->CCR & SCB_CCR_DC_Msk)) {
 8000f18:	4b21      	ldr	r3, [pc, #132]	; (8000fa0 <stm32h7_init+0xc8>)
 8000f1a:	695a      	ldr	r2, [r3, #20]
 8000f1c:	03d1      	lsls	r1, r2, #15
 8000f1e:	d427      	bmi.n	8000f70 <stm32h7_init+0x98>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000f20:	695a      	ldr	r2, [r3, #20]
 8000f22:	f412 3280 	ands.w	r2, r2, #65536	; 0x10000
 8000f26:	d123      	bne.n	8000f70 <stm32h7_init+0x98>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000f28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000f2c:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000f30:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f34:	f643 75e0 	movw	r5, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f38:	f3c2 04c9 	ubfx	r4, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000f3c:	f3c2 324e 	ubfx	r2, r2, #13, #15
 8000f40:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f42:	ea02 0705 	and.w	r7, r2, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f46:	4621      	mov	r1, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f48:	ea47 7681 	orr.w	r6, r7, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000f4c:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f4e:	f8c3 6260 	str.w	r6, [r3, #608]	; 0x260
      } while (ways-- != 0U);
 8000f52:	d2f9      	bcs.n	8000f48 <stm32h7_init+0x70>
    } while(sets-- != 0U);
 8000f54:	3a20      	subs	r2, #32
 8000f56:	f112 0f20 	cmn.w	r2, #32
 8000f5a:	d1f2      	bne.n	8000f42 <stm32h7_init+0x6a>
 8000f5c:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000f60:	695a      	ldr	r2, [r3, #20]
 8000f62:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000f66:	615a      	str	r2, [r3, #20]
 8000f68:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f6c:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8000f70:	f380 8811 	msr	BASEPRI, r0
 8000f74:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 64 MHz from HSI */
	SystemCoreClock = 64000000;
 8000f78:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <stm32h7_init+0xcc>)
 8000f7a:	4a0b      	ldr	r2, [pc, #44]	; (8000fa8 <stm32h7_init+0xd0>)
 8000f7c:	601a      	str	r2, [r3, #0]
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ConfigSupply(uint32_t SupplySource)
{
  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, (PWR_CR3_SCUEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS), SupplySource);
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <stm32h7_init+0xd4>)
 8000f80:	68da      	ldr	r2, [r3, #12]
 8000f82:	f022 0207 	bic.w	r2, r2, #7
 8000f86:	f042 0202 	orr.w	r2, r2, #2
 8000f8a:	60da      	str	r2, [r3, #12]
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
#if defined (PWR_CPUCR_PDDS_D2)
  MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
 8000f8c:	699a      	ldr	r2, [r3, #24]
 8000f8e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000f92:	619a      	str	r2, [r3, #24]
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
#if defined (PWR_CPUCR_PDDS_D2)
  return ((READ_BIT(PWR->D3CR, PWR_D3CR_VOSRDY) == (PWR_D3CR_VOSRDY)) ? 1UL : 0UL);
 8000f94:	699a      	ldr	r2, [r3, #24]
 8000f96:	0492      	lsls	r2, r2, #18
 8000f98:	d5fc      	bpl.n	8000f94 <stm32h7_init+0xbc>
	LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
	while (LL_PWR_IsActiveFlag_VOS() == 0) {
	}

	return 0;
}
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	e000ed00 	.word	0xe000ed00
 8000fa4:	24000028 	.word	0x24000028
 8000fa8:	03d09000 	.word	0x03d09000
 8000fac:	58024800 	.word	0x58024800

08000fb0 <log_generic>:
	if (_is_user_context()) {
		log_generic_from_user(src_level, fmt, ap);
	} else if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) &&
	    (!IS_ENABLED(CONFIG_LOG_FRONTEND))) {
		struct log_backend const *backend;
		uint32_t timestamp = timestamp_func();
 8000fb0:	4b13      	ldr	r3, [pc, #76]	; (8001000 <log_generic+0x50>)
{
 8000fb2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		uint32_t timestamp = timestamp_func();
 8000fb6:	681b      	ldr	r3, [r3, #0]
{
 8000fb8:	b085      	sub	sp, #20
 8000fba:	4607      	mov	r7, r0
 8000fbc:	4688      	mov	r8, r1
 8000fbe:	4616      	mov	r6, r2
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
 8000fc0:	4c10      	ldr	r4, [pc, #64]	; (8001004 <log_generic+0x54>)
		uint32_t timestamp = timestamp_func();
 8000fc2:	4798      	blx	r3
 8000fc4:	4b10      	ldr	r3, [pc, #64]	; (8001008 <log_generic+0x58>)
 8000fc6:	4681      	mov	r9, r0

		for (int i = 0; i < log_backend_count_get(); i++) {
 8000fc8:	f04f 0b00 	mov.w	fp, #0
 8000fcc:	1b1b      	subs	r3, r3, r4
 8000fce:	ea4f 1a23 	mov.w	sl, r3, asr #4
 8000fd2:	45da      	cmp	sl, fp
 8000fd4:	dc02      	bgt.n	8000fdc <log_generic+0x2c>
				mask &= ~BIT(idx);
			}
		}
		log_n(fmt, args, nargs, src_level);
	}
}
 8000fd6:	b005      	add	sp, #20
 8000fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
 8000fdc:	6863      	ldr	r3, [r4, #4]
			if (log_backend_is_active(backend)) {
 8000fde:	795b      	ldrb	r3, [r3, #5]
 8000fe0:	b14b      	cbz	r3, 8000ff6 <log_generic+0x46>
	if (backend->api->put_sync_string) {
 8000fe2:	6823      	ldr	r3, [r4, #0]
				va_copy(ap_tmp, ap);
 8000fe4:	9603      	str	r6, [sp, #12]
 8000fe6:	685d      	ldr	r5, [r3, #4]
 8000fe8:	b12d      	cbz	r5, 8000ff6 <log_generic+0x46>
		backend->api->put_sync_string(backend, src_level,
 8000fea:	4643      	mov	r3, r8
 8000fec:	464a      	mov	r2, r9
 8000fee:	4639      	mov	r1, r7
 8000ff0:	4620      	mov	r0, r4
 8000ff2:	9600      	str	r6, [sp, #0]
 8000ff4:	47a8      	blx	r5
		for (int i = 0; i < log_backend_count_get(); i++) {
 8000ff6:	f10b 0b01 	add.w	fp, fp, #1
 8000ffa:	3410      	adds	r4, #16
 8000ffc:	e7e9      	b.n	8000fd2 <log_generic+0x22>
 8000ffe:	bf00      	nop
 8001000:	24000004 	.word	0x24000004
 8001004:	08005150 	.word	0x08005150
 8001008:	08005160 	.word	0x08005160

0800100c <log_core_init>:
					CONFIG_LOG_STRDUP_BUF_COUNT);
	}

	/* Set default timestamp. */
	if (sys_clock_hw_cycles_per_sec() > 1000000) {
		timestamp_func = k_uptime_get_32;
 800100c:	4b03      	ldr	r3, [pc, #12]	; (800101c <log_core_init+0x10>)
	} else {
		timestamp_func = k_cycle_get_32_wrapper;
		freq = sys_clock_hw_cycles_per_sec();
	}

	log_output_timestamp_freq_set(freq);
 800100e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
		timestamp_func = k_uptime_get_32;
 8001012:	4a03      	ldr	r2, [pc, #12]	; (8001020 <log_core_init+0x14>)
 8001014:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
 8001016:	f000 ba15 	b.w	8001444 <log_output_timestamp_freq_set>
 800101a:	bf00      	nop
 800101c:	24000004 	.word	0x24000004
 8001020:	08004321 	.word	0x08004321

08001024 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
 8001024:	4a04      	ldr	r2, [pc, #16]	; (8001038 <log_source_name_get+0x14>)
 8001026:	4b05      	ldr	r3, [pc, #20]	; (800103c <log_source_name_get+0x18>)
 8001028:	1a9b      	subs	r3, r3, r2
	return log_sources_count();
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
 800102a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
 800102e:	bf34      	ite	cc
 8001030:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
 8001034:	2000      	movcs	r0, #0
}
 8001036:	4770      	bx	lr
 8001038:	08005128 	.word	0x08005128
 800103c:	08005150 	.word	0x08005150

08001040 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
 8001040:	4b09      	ldr	r3, [pc, #36]	; (8001068 <log_backend_enable+0x28>)

	log_backend_id_set(backend, id);
 8001042:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
 8001044:	1ac3      	subs	r3, r0, r3
 8001046:	111b      	asrs	r3, r3, #4
 8001048:	3301      	adds	r3, #1
{
 800104a:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
 800104c:	7113      	strb	r3, [r2, #4]
	backend->cb->active = true;
 800104e:	2201      	movs	r2, #1
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);
 8001050:	6843      	ldr	r3, [r0, #4]

	/* Wakeup logger thread after attaching first backend. It might be
	 * blocked with log messages pending.
	 */
	if (!backend_attached) {
 8001052:	4c06      	ldr	r4, [pc, #24]	; (800106c <log_backend_enable+0x2c>)
 8001054:	715a      	strb	r2, [r3, #5]
 8001056:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
 8001058:	6019      	str	r1, [r3, #0]
 800105a:	b912      	cbnz	r2, 8001062 <log_backend_enable+0x22>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
 800105c:	4804      	ldr	r0, [pc, #16]	; (8001070 <log_backend_enable+0x30>)
 800105e:	f002 fe4b 	bl	8003cf8 <z_impl_k_sem_give>
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
 8001062:	2301      	movs	r3, #1
 8001064:	7023      	strb	r3, [r4, #0]
}
 8001066:	bd10      	pop	{r4, pc}
 8001068:	08005150 	.word	0x08005150
 800106c:	240003fc 	.word	0x240003fc
 8001070:	24000138 	.word	0x24000138

08001074 <log_init>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8001074:	4b11      	ldr	r3, [pc, #68]	; (80010bc <log_init+0x48>)
{
 8001076:	b570      	push	{r4, r5, r6, lr}
 8001078:	f3bf 8f5b 	dmb	ish
 800107c:	e853 5f00 	ldrex	r5, [r3]
 8001080:	1c6a      	adds	r2, r5, #1
 8001082:	e843 2100 	strex	r1, r2, [r3]
 8001086:	2900      	cmp	r1, #0
 8001088:	d1f8      	bne.n	800107c <log_init+0x8>
 800108a:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
 800108e:	b92d      	cbnz	r5, 800109c <log_init+0x28>
	return __log_backends_end - __log_backends_start;
 8001090:	4c0b      	ldr	r4, [pc, #44]	; (80010c0 <log_init+0x4c>)
 8001092:	4e0c      	ldr	r6, [pc, #48]	; (80010c4 <log_init+0x50>)
 8001094:	1b36      	subs	r6, r6, r4
 8001096:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
 8001098:	42b5      	cmp	r5, r6
 800109a:	db00      	blt.n	800109e <log_init+0x2a>
}
 800109c:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
 800109e:	7b23      	ldrb	r3, [r4, #12]
 80010a0:	b143      	cbz	r3, 80010b4 <log_init+0x40>
			if (backend->api->init != NULL) {
 80010a2:	6823      	ldr	r3, [r4, #0]
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	b103      	cbz	r3, 80010aa <log_init+0x36>
				backend->api->init();
 80010a8:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
 80010aa:	2204      	movs	r2, #4
 80010ac:	2100      	movs	r1, #0
 80010ae:	4620      	mov	r0, r4
 80010b0:	f7ff ffc6 	bl	8001040 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
 80010b4:	3501      	adds	r5, #1
 80010b6:	3410      	adds	r4, #16
 80010b8:	e7ee      	b.n	8001098 <log_init+0x24>
 80010ba:	bf00      	nop
 80010bc:	24000250 	.word	0x24000250
 80010c0:	08005150 	.word	0x08005150
 80010c4:	08005160 	.word	0x08005160

080010c8 <z_impl_log_panic>:
{
 80010c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
 80010ca:	4f0c      	ldr	r7, [pc, #48]	; (80010fc <z_impl_log_panic+0x34>)
 80010cc:	783d      	ldrb	r5, [r7, #0]
 80010ce:	b94d      	cbnz	r5, 80010e4 <z_impl_log_panic+0x1c>
 80010d0:	4c0b      	ldr	r4, [pc, #44]	; (8001100 <z_impl_log_panic+0x38>)
	log_init();
 80010d2:	f7ff ffcf 	bl	8001074 <log_init>
 80010d6:	4e0b      	ldr	r6, [pc, #44]	; (8001104 <z_impl_log_panic+0x3c>)
 80010d8:	1b36      	subs	r6, r6, r4
 80010da:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
 80010dc:	42b5      	cmp	r5, r6
 80010de:	db02      	blt.n	80010e6 <z_impl_log_panic+0x1e>
	panic_mode = true;
 80010e0:	2301      	movs	r3, #1
 80010e2:	703b      	strb	r3, [r7, #0]
}
 80010e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
 80010e6:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
 80010e8:	795b      	ldrb	r3, [r3, #5]
 80010ea:	b11b      	cbz	r3, 80010f4 <z_impl_log_panic+0x2c>
	backend->api->panic(backend);
 80010ec:	6823      	ldr	r3, [r4, #0]
 80010ee:	4620      	mov	r0, r4
 80010f0:	691b      	ldr	r3, [r3, #16]
 80010f2:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
 80010f4:	3501      	adds	r5, #1
 80010f6:	3410      	adds	r4, #16
 80010f8:	e7f0      	b.n	80010dc <z_impl_log_panic+0x14>
 80010fa:	bf00      	nop
 80010fc:	240003fd 	.word	0x240003fd
 8001100:	08005150 	.word	0x08005150
 8001104:	08005160 	.word	0x08005160

08001108 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
 8001108:	b40e      	push	{r1, r2, r3}
 800110a:	b503      	push	{r0, r1, lr}
 800110c:	ab03      	add	r3, sp, #12
 800110e:	4601      	mov	r1, r0
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
 8001110:	4805      	ldr	r0, [pc, #20]	; (8001128 <print_formatted+0x20>)
{
 8001112:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
 8001116:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
 8001118:	f7ff fdb0 	bl	8000c7c <z_vprintk>
#endif
	va_end(args);

	return length;
}
 800111c:	2000      	movs	r0, #0
 800111e:	b002      	add	sp, #8
 8001120:	f85d eb04 	ldr.w	lr, [sp], #4
 8001124:	b003      	add	sp, #12
 8001126:	4770      	bx	lr
 8001128:	08004369 	.word	0x08004369

0800112c <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *log_output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, uint16_t source_id)
{
 800112c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
 8001130:	f011 0402 	ands.w	r4, r1, #2
{
 8001134:	b085      	sub	sp, #20
 8001136:	4690      	mov	r8, r2
 8001138:	4606      	mov	r6, r0
 800113a:	461a      	mov	r2, r3
 800113c:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
 8001140:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
 8001144:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
 8001148:	d007      	beq.n	800115a <prefix_print+0x2e>
	if (!format) {
 800114a:	f011 0f44 	tst.w	r1, #68	; 0x44
 800114e:	d137      	bne.n	80011c0 <prefix_print+0x94>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
 8001150:	4932      	ldr	r1, [pc, #200]	; (800121c <prefix_print+0xf0>)
 8001152:	f7ff ffd9 	bl	8001108 <print_formatted>
			length = print_formatted(log_output,
 8001156:	4601      	mov	r1, r0
		length += timestamp_print(log_output, flags, timestamp);
 8001158:	460c      	mov	r4, r1
	if (color) {
 800115a:	f1b9 0f00 	cmp.w	r9, #0
 800115e:	d00a      	beq.n	8001176 <prefix_print+0x4a>
		const char *log_color = start && (colors[level] != NULL) ?
 8001160:	4b2f      	ldr	r3, [pc, #188]	; (8001220 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", log_color);
 8001162:	4630      	mov	r0, r6
 8001164:	492f      	ldr	r1, [pc, #188]	; (8001224 <prefix_print+0xf8>)
		const char *log_color = start && (colors[level] != NULL) ?
 8001166:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", log_color);
 800116a:	4b2f      	ldr	r3, [pc, #188]	; (8001228 <prefix_print+0xfc>)
 800116c:	2a00      	cmp	r2, #0
 800116e:	bf08      	it	eq
 8001170:	461a      	moveq	r2, r3
 8001172:	f7ff ffc9 	bl	8001108 <print_formatted>
	if (level_on) {
 8001176:	b13d      	cbz	r5, 8001188 <prefix_print+0x5c>
		total += print_formatted(log_output, "<%s> ", severity[level]);
 8001178:	4b2c      	ldr	r3, [pc, #176]	; (800122c <prefix_print+0x100>)
 800117a:	4630      	mov	r0, r6
 800117c:	492c      	ldr	r1, [pc, #176]	; (8001230 <prefix_print+0x104>)
 800117e:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
 8001182:	f7ff ffc1 	bl	8001108 <print_formatted>
 8001186:	4605      	mov	r5, r0
	total += print_formatted(log_output,
 8001188:	f1b8 0f00 	cmp.w	r8, #0
 800118c:	d043      	beq.n	8001216 <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
 800118e:	2301      	movs	r3, #1
 8001190:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
 8001194:	4b27      	ldr	r3, [pc, #156]	; (8001234 <prefix_print+0x108>)
 8001196:	f017 0f10 	tst.w	r7, #16
 800119a:	4f27      	ldr	r7, [pc, #156]	; (8001238 <prefix_print+0x10c>)
 800119c:	bf18      	it	ne
 800119e:	461f      	movne	r7, r3
 80011a0:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 80011a4:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80011a8:	f7ff ff3c 	bl	8001024 <log_source_name_get>
 80011ac:	4639      	mov	r1, r7
 80011ae:	4602      	mov	r2, r0
 80011b0:	4630      	mov	r0, r6
 80011b2:	f7ff ffa9 	bl	8001108 <print_formatted>
 80011b6:	4428      	add	r0, r5

	length += ids_print(log_output, level_on, func_on,
			domain_id, source_id, level);

	return length;
}
 80011b8:	4420      	add	r0, r4
 80011ba:	b005      	add	sp, #20
 80011bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
 80011c0:	4b1e      	ldr	r3, [pc, #120]	; (800123c <prefix_print+0x110>)
 80011c2:	6819      	ldr	r1, [r3, #0]
 80011c4:	2900      	cmp	r1, #0
 80011c6:	d0c7      	beq.n	8001158 <prefix_print+0x2c>
		timestamp /= timestamp_div;
 80011c8:	4b1d      	ldr	r3, [pc, #116]	; (8001240 <prefix_print+0x114>)
 80011ca:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
		ms = (remainder * 1000U) / freq;
 80011ce:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		mins = seconds / 60U;
 80011d2:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		timestamp /= timestamp_div;
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	fbb2 f3f3 	udiv	r3, r2, r3
		total_seconds = timestamp / freq;
 80011dc:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
 80011e0:	fbb4 f2fe 	udiv	r2, r4, lr
 80011e4:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
 80011e8:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
 80011ec:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 80011f0:	fbb4 fbf1 	udiv	fp, r4, r1
 80011f4:	fb01 441b 	mls	r4, r1, fp, r4
 80011f8:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
 80011fc:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 8001200:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
 8001204:	e9cd b101 	strd	fp, r1, [sp, #4]
 8001208:	fb0a e113 	mls	r1, sl, r3, lr
 800120c:	9100      	str	r1, [sp, #0]
 800120e:	490d      	ldr	r1, [pc, #52]	; (8001244 <prefix_print+0x118>)
 8001210:	f7ff ff7a 	bl	8001108 <print_formatted>
 8001214:	e79f      	b.n	8001156 <prefix_print+0x2a>
	total += print_formatted(log_output,
 8001216:	4f08      	ldr	r7, [pc, #32]	; (8001238 <prefix_print+0x10c>)
 8001218:	e7c2      	b.n	80011a0 <prefix_print+0x74>
 800121a:	bf00      	nop
 800121c:	08005528 	.word	0x08005528
 8001220:	08005168 	.word	0x08005168
 8001224:	0800554d 	.word	0x0800554d
 8001228:	0800551a 	.word	0x0800551a
 800122c:	0800517c 	.word	0x0800517c
 8001230:	08005550 	.word	0x08005550
 8001234:	08005524 	.word	0x08005524
 8001238:	0800551f 	.word	0x0800551f
 800123c:	24000254 	.word	0x24000254
 8001240:	24000258 	.word	0x24000258
 8001244:	08005531 	.word	0x08005531

08001248 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  uint32_t flags, uint8_t level)
{
 8001248:	b538      	push	{r3, r4, r5, lr}
 800124a:	460c      	mov	r4, r1
 800124c:	4605      	mov	r5, r0
	if (color) {
 800124e:	07e1      	lsls	r1, r4, #31
 8001250:	d503      	bpl.n	800125a <postfix_print+0x12>
		print_formatted(log_output, "%s", log_color);
 8001252:	4a08      	ldr	r2, [pc, #32]	; (8001274 <postfix_print+0x2c>)
 8001254:	4908      	ldr	r1, [pc, #32]	; (8001278 <postfix_print+0x30>)
 8001256:	f7ff ff57 	bl	8001108 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 800125a:	06e2      	lsls	r2, r4, #27
 800125c:	d408      	bmi.n	8001270 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 800125e:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
 8001260:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
 8001262:	bf4c      	ite	mi
 8001264:	4905      	ldrmi	r1, [pc, #20]	; (800127c <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
 8001266:	4906      	ldrpl	r1, [pc, #24]	; (8001280 <postfix_print+0x38>)
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
 8001268:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
 800126c:	f7ff bf4c 	b.w	8001108 <print_formatted>
}
 8001270:	bd38      	pop	{r3, r4, r5, pc}
 8001272:	bf00      	nop
 8001274:	0800551a 	.word	0x0800551a
 8001278:	0800554d 	.word	0x0800554d
 800127c:	08005557 	.word	0x08005557
 8001280:	08005556 	.word	0x08005556

08001284 <hexdump_line_print>:
{
 8001284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001288:	461d      	mov	r5, r3
 800128a:	9b08      	ldr	r3, [sp, #32]
 800128c:	4617      	mov	r7, r2
 800128e:	4604      	mov	r4, r0
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 8001290:	06da      	lsls	r2, r3, #27
{
 8001292:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 8001294:	d405      	bmi.n	80012a2 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 8001296:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
 8001298:	bf4c      	ite	mi
 800129a:	492a      	ldrmi	r1, [pc, #168]	; (8001344 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
 800129c:	492a      	ldrpl	r1, [pc, #168]	; (8001348 <hexdump_line_print+0xc4>)
 800129e:	f7ff ff33 	bl	8001108 <print_formatted>
{
 80012a2:	f04f 0800 	mov.w	r8, #0
		print_formatted(log_output, " ");
 80012a6:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8001350 <hexdump_line_print+0xcc>
	for (int i = 0; i < prefix_offset; i++) {
 80012aa:	45a8      	cmp	r8, r5
 80012ac:	db2a      	blt.n	8001304 <hexdump_line_print+0x80>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 80012ae:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
 80012b0:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8001354 <hexdump_line_print+0xd0>
			print_formatted(log_output, "%02x ", data[i]);
 80012b4:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8001358 <hexdump_line_print+0xd4>
			print_formatted(log_output, " ");
 80012b8:	f8df a094 	ldr.w	sl, [pc, #148]	; 8001350 <hexdump_line_print+0xcc>
		if (i < length) {
 80012bc:	42bd      	cmp	r5, r7
 80012be:	d22f      	bcs.n	8001320 <hexdump_line_print+0x9c>
			print_formatted(log_output, "%02x ", data[i]);
 80012c0:	5d72      	ldrb	r2, [r6, r5]
 80012c2:	4649      	mov	r1, r9
 80012c4:	4620      	mov	r0, r4
 80012c6:	f7ff ff1f 	bl	8001108 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 80012ca:	3501      	adds	r5, #1
 80012cc:	2d10      	cmp	r5, #16
 80012ce:	d120      	bne.n	8001312 <hexdump_line_print+0x8e>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 80012d0:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
 80012d2:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8001350 <hexdump_line_print+0xcc>
			print_formatted(log_output, "%c",
 80012d6:	f8df 9084 	ldr.w	r9, [pc, #132]	; 800135c <hexdump_line_print+0xd8>
	print_formatted(log_output, "|");
 80012da:	4620      	mov	r0, r4
 80012dc:	491b      	ldr	r1, [pc, #108]	; (800134c <hexdump_line_print+0xc8>)
 80012de:	f7ff ff13 	bl	8001108 <print_formatted>
		if (i < length) {
 80012e2:	42af      	cmp	r7, r5
 80012e4:	d928      	bls.n	8001338 <hexdump_line_print+0xb4>
			      isprint((int)c) ? c : '.');
 80012e6:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
 80012e8:	4649      	mov	r1, r9
 80012ea:	4620      	mov	r0, r4
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
 80012ec:	f1a2 0320 	sub.w	r3, r2, #32
 80012f0:	2b5f      	cmp	r3, #95	; 0x5f
 80012f2:	bf28      	it	cs
 80012f4:	222e      	movcs	r2, #46	; 0x2e
 80012f6:	f7ff ff07 	bl	8001108 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 80012fa:	3501      	adds	r5, #1
 80012fc:	2d10      	cmp	r5, #16
 80012fe:	d114      	bne.n	800132a <hexdump_line_print+0xa6>
}
 8001300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
 8001304:	4649      	mov	r1, r9
 8001306:	4620      	mov	r0, r4
	for (int i = 0; i < prefix_offset; i++) {
 8001308:	f108 0801 	add.w	r8, r8, #1
		print_formatted(log_output, " ");
 800130c:	f7ff fefc 	bl	8001108 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
 8001310:	e7cb      	b.n	80012aa <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
 8001312:	076a      	lsls	r2, r5, #29
 8001314:	d1d2      	bne.n	80012bc <hexdump_line_print+0x38>
			print_formatted(log_output, " ");
 8001316:	4651      	mov	r1, sl
 8001318:	4620      	mov	r0, r4
 800131a:	f7ff fef5 	bl	8001108 <print_formatted>
 800131e:	e7cd      	b.n	80012bc <hexdump_line_print+0x38>
			print_formatted(log_output, "   ");
 8001320:	4641      	mov	r1, r8
 8001322:	4620      	mov	r0, r4
 8001324:	f7ff fef0 	bl	8001108 <print_formatted>
 8001328:	e7cf      	b.n	80012ca <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
 800132a:	076b      	lsls	r3, r5, #29
 800132c:	d1d9      	bne.n	80012e2 <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
 800132e:	4641      	mov	r1, r8
 8001330:	4620      	mov	r0, r4
 8001332:	f7ff fee9 	bl	8001108 <print_formatted>
 8001336:	e7d4      	b.n	80012e2 <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
 8001338:	4641      	mov	r1, r8
 800133a:	4620      	mov	r0, r4
 800133c:	f7ff fee4 	bl	8001108 <print_formatted>
 8001340:	e7db      	b.n	80012fa <hexdump_line_print+0x76>
 8001342:	bf00      	nop
 8001344:	08005557 	.word	0x08005557
 8001348:	08005556 	.word	0x08005556
 800134c:	08005563 	.word	0x08005563
 8001350:	08005561 	.word	0x08005561
 8001354:	0800555f 	.word	0x0800555f
 8001358:	08005559 	.word	0x08005559
 800135c:	08005565 	.word	0x08005565

08001360 <log_output_string>:
}

void log_output_string(const struct log_output *log_output,
		       struct log_msg_ids src_level, uint32_t timestamp,
		       const char *fmt, va_list ap, uint32_t flags)
{
 8001360:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
		log_output_string_syst_process(log_output,
				src_level, fmt, ap, flags);
		return;
	}

	if (!raw_string) {
 8001364:	f011 0607 	ands.w	r6, r1, #7
{
 8001368:	4605      	mov	r5, r0
 800136a:	461c      	mov	r4, r3
 800136c:	e9dd 870a 	ldrd	r8, r7, [sp, #40]	; 0x28
	if (!raw_string) {
 8001370:	d00b      	beq.n	800138a <log_output_string+0x2a>
		prefix_print(log_output, flags, true, timestamp,
 8001372:	f3c1 1389 	ubfx	r3, r1, #6, #10
 8001376:	f3c1 01c2 	ubfx	r1, r1, #3, #3
 800137a:	9302      	str	r3, [sp, #8]
 800137c:	4613      	mov	r3, r2
 800137e:	2201      	movs	r2, #1
 8001380:	e9cd 6100 	strd	r6, r1, [sp]
 8001384:	4639      	mov	r1, r7
 8001386:	f7ff fed1 	bl	800112c <prefix_print>

#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, ap);
#else
	z_vprintk(out_func, (void *)log_output, fmt, ap);
 800138a:	4643      	mov	r3, r8
 800138c:	4622      	mov	r2, r4
 800138e:	4629      	mov	r1, r5
 8001390:	480d      	ldr	r0, [pc, #52]	; (80013c8 <log_output_string+0x68>)
 8001392:	f7ff fc73 	bl	8000c7c <z_vprintk>
#endif

	(void)length;

	if (raw_string) {
 8001396:	b98e      	cbnz	r6, 80013bc <log_output_string+0x5c>
 8001398:	3c01      	subs	r4, #1
	while (*fmt != '\0') {
 800139a:	4633      	mov	r3, r6
 800139c:	f814 6f01 	ldrb.w	r6, [r4, #1]!
 80013a0:	2e00      	cmp	r6, #0
 80013a2:	d1fa      	bne.n	800139a <log_output_string+0x3a>
		/* add \r if string ends with newline. */
		if (ends_with_newline(fmt)) {
 80013a4:	2b0a      	cmp	r3, #10
 80013a6:	d103      	bne.n	80013b0 <log_output_string+0x50>
			print_formatted(log_output, "\r");
 80013a8:	4908      	ldr	r1, [pc, #32]	; (80013cc <log_output_string+0x6c>)
 80013aa:	4628      	mov	r0, r5
 80013ac:	f7ff feac 	bl	8001108 <print_formatted>
		}
	} else {
		postfix_print(log_output, flags, level);
	}

	log_output_flush(log_output);
 80013b0:	4628      	mov	r0, r5
}
 80013b2:	b004      	add	sp, #16
 80013b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	log_output_flush(log_output);
 80013b8:	f002 bfef 	b.w	800439a <log_output_flush>
		postfix_print(log_output, flags, level);
 80013bc:	4632      	mov	r2, r6
 80013be:	4639      	mov	r1, r7
 80013c0:	4628      	mov	r0, r5
 80013c2:	f7ff ff41 	bl	8001248 <postfix_print>
 80013c6:	e7f3      	b.n	80013b0 <log_output_string+0x50>
 80013c8:	08004369 	.word	0x08004369
 80013cc:	08005568 	.word	0x08005568

080013d0 <log_output_hexdump>:

void log_output_hexdump(const struct log_output *log_output,
			     struct log_msg_ids src_level, uint32_t timestamp,
			     const char *metadata, const uint8_t *data,
			     uint32_t length, uint32_t flags)
{
 80013d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80013d4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80013d6:	4698      	mov	r8, r3
	uint32_t prefix_offset;
	uint8_t level = (uint8_t)src_level.level;
 80013d8:	f001 0907 	and.w	r9, r1, #7
		log_output_hexdump_syst_process(log_output,
				src_level, data, length, flags);
		return;
	}

	prefix_offset = prefix_print(log_output, flags, true, timestamp,
 80013dc:	f3c1 1389 	ubfx	r3, r1, #6, #10
 80013e0:	f3c1 01c2 	ubfx	r1, r1, #3, #3
{
 80013e4:	4604      	mov	r4, r0
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
 80013e6:	9302      	str	r3, [sp, #8]
 80013e8:	4613      	mov	r3, r2
 80013ea:	2201      	movs	r2, #1
 80013ec:	e9cd 9100 	strd	r9, r1, [sp]
 80013f0:	4631      	mov	r1, r6
{
 80013f2:	e9dd 750c 	ldrd	r7, r5, [sp, #48]	; 0x30
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
 80013f6:	f7ff fe99 	bl	800112c <prefix_print>
				     level, domain_id, source_id);

	/* Print metadata */
	print_formatted(log_output, "%s", metadata);
 80013fa:	4642      	mov	r2, r8
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
 80013fc:	4682      	mov	sl, r0
	print_formatted(log_output, "%s", metadata);
 80013fe:	4910      	ldr	r1, [pc, #64]	; (8001440 <log_output_hexdump+0x70>)
 8001400:	4620      	mov	r0, r4
 8001402:	f7ff fe81 	bl	8001108 <print_formatted>

	while (length) {
 8001406:	b955      	cbnz	r5, 800141e <log_output_hexdump+0x4e>

		data += part_len;
		length -= part_len;
	};

	postfix_print(log_output, flags, level);
 8001408:	4620      	mov	r0, r4
 800140a:	464a      	mov	r2, r9
 800140c:	4631      	mov	r1, r6
 800140e:	f7ff ff1b 	bl	8001248 <postfix_print>
	log_output_flush(log_output);
 8001412:	4620      	mov	r0, r4
}
 8001414:	b004      	add	sp, #16
 8001416:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(log_output);
 800141a:	f002 bfbe 	b.w	800439a <log_output_flush>
		uint32_t part_len = length > HEXDUMP_BYTES_IN_LINE ?
 800141e:	2d10      	cmp	r5, #16
 8001420:	46a8      	mov	r8, r5
		hexdump_line_print(log_output, data, part_len,
 8001422:	4639      	mov	r1, r7
 8001424:	4653      	mov	r3, sl
		uint32_t part_len = length > HEXDUMP_BYTES_IN_LINE ?
 8001426:	bf28      	it	cs
 8001428:	f04f 0810 	movcs.w	r8, #16
		hexdump_line_print(log_output, data, part_len,
 800142c:	4620      	mov	r0, r4
 800142e:	9600      	str	r6, [sp, #0]
 8001430:	4642      	mov	r2, r8
		data += part_len;
 8001432:	4447      	add	r7, r8
		length -= part_len;
 8001434:	eba5 0508 	sub.w	r5, r5, r8
		hexdump_line_print(log_output, data, part_len,
 8001438:	f7ff ff24 	bl	8001284 <hexdump_line_print>
		length -= part_len;
 800143c:	e7e3      	b.n	8001406 <log_output_hexdump+0x36>
 800143e:	bf00      	nop
 8001440:	0800554d 	.word	0x0800554d

08001444 <log_output_timestamp_freq_set>:
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     log_output->control_block->ctx);
}

void log_output_timestamp_freq_set(uint32_t frequency)
{
 8001444:	b510      	push	{r4, lr}
	timestamp_div = 1U;
 8001446:	4a08      	ldr	r2, [pc, #32]	; (8001468 <log_output_timestamp_freq_set+0x24>)
 8001448:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
 800144a:	2100      	movs	r1, #0
 800144c:	4c07      	ldr	r4, [pc, #28]	; (800146c <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
 800144e:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
 8001450:	42a0      	cmp	r0, r4
 8001452:	d804      	bhi.n	800145e <log_output_timestamp_freq_set+0x1a>
 8001454:	b101      	cbz	r1, 8001458 <log_output_timestamp_freq_set+0x14>
 8001456:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
 8001458:	4b05      	ldr	r3, [pc, #20]	; (8001470 <log_output_timestamp_freq_set+0x2c>)
 800145a:	6018      	str	r0, [r3, #0]
}
 800145c:	bd10      	pop	{r4, pc}
		frequency /= 2U;
 800145e:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
 8001460:	2101      	movs	r1, #1
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	e7f4      	b.n	8001450 <log_output_timestamp_freq_set+0xc>
 8001466:	bf00      	nop
 8001468:	24000258 	.word	0x24000258
 800146c:	000f4240 	.word	0x000f4240
 8001470:	24000254 	.word	0x24000254

08001474 <char_out>:
#include <sys/__assert.h>

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
 8001474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001476:	460d      	mov	r5, r1
 8001478:	4604      	mov	r4, r0
 800147a:	1846      	adds	r6, r0, r1
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
		uart_poll_out(uart_dev, data[i]);
 800147c:	4f05      	ldr	r7, [pc, #20]	; (8001494 <char_out+0x20>)
	for (size_t i = 0; i < length; i++) {
 800147e:	42b4      	cmp	r4, r6
 8001480:	d101      	bne.n	8001486 <char_out+0x12>
	}

	return length;
}
 8001482:	4628      	mov	r0, r5
 8001484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(uart_dev, data[i]);
 8001486:	6838      	ldr	r0, [r7, #0]
 8001488:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
 800148c:	6883      	ldr	r3, [r0, #8]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
 8001492:	e7f4      	b.n	800147e <char_out+0xa>
 8001494:	24000270 	.word	0x24000270

08001498 <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
 8001498:	4801      	ldr	r0, [pc, #4]	; (80014a0 <panic+0x8>)
 800149a:	f002 bf7e 	b.w	800439a <log_output_flush>
 800149e:	bf00      	nop
 80014a0:	080051a8 	.word	0x080051a8

080014a4 <log_backend_uart_init>:

	log_backend_std_put(&log_output_uart, flag, msg);
}

static void log_backend_uart_init(void)
{
 80014a4:	b508      	push	{r3, lr}
 80014a6:	4803      	ldr	r0, [pc, #12]	; (80014b4 <log_backend_uart_init+0x10>)
 80014a8:	f001 ff7c 	bl	80033a4 <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
 80014ac:	4b02      	ldr	r3, [pc, #8]	; (80014b8 <log_backend_uart_init+0x14>)
 80014ae:	6018      	str	r0, [r3, #0]
	__ASSERT_NO_MSG((void *)uart_dev);
}
 80014b0:	bd08      	pop	{r3, pc}
 80014b2:	bf00      	nop
 80014b4:	0800558a 	.word	0x0800558a
 80014b8:	24000270 	.word	0x24000270

080014bc <sync_hexdump>:
}

static void sync_hexdump(const struct log_backend *const backend,
			 struct log_msg_ids src_level, uint32_t timestamp,
			 const char *metadata, const uint8_t *data, uint32_t length)
{
 80014bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		 * by another one, lock context for whole log processing.
		 */
		key = irq_lock();
	}

	log_output_hexdump(log_output, src_level, timestamp,
 80014be:	200f      	movs	r0, #15
 80014c0:	9002      	str	r0, [sp, #8]
 80014c2:	9807      	ldr	r0, [sp, #28]
 80014c4:	9001      	str	r0, [sp, #4]
 80014c6:	9806      	ldr	r0, [sp, #24]
 80014c8:	9000      	str	r0, [sp, #0]
 80014ca:	4803      	ldr	r0, [pc, #12]	; (80014d8 <sync_hexdump+0x1c>)
 80014cc:	f7ff ff80 	bl	80013d0 <log_output_hexdump>
	uint32_t flag = IS_ENABLED(CONFIG_LOG_BACKEND_UART_SYST_ENABLE) ?
		LOG_OUTPUT_FLAG_FORMAT_SYST : 0;

	log_backend_std_sync_hexdump(&log_output_uart, flag, src_level,
				     timestamp, metadata, data, length);
}
 80014d0:	b005      	add	sp, #20
 80014d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80014d6:	bf00      	nop
 80014d8:	080051a8 	.word	0x080051a8

080014dc <sync_string>:
{
 80014dc:	b507      	push	{r0, r1, r2, lr}
	log_output_string(log_output, src_level, timestamp, fmt, ap, flags);
 80014de:	200f      	movs	r0, #15
 80014e0:	9001      	str	r0, [sp, #4]
 80014e2:	9804      	ldr	r0, [sp, #16]
 80014e4:	9000      	str	r0, [sp, #0]
 80014e6:	4803      	ldr	r0, [pc, #12]	; (80014f4 <sync_string+0x18>)
 80014e8:	f7ff ff3a 	bl	8001360 <log_output_string>
}
 80014ec:	b003      	add	sp, #12
 80014ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80014f2:	bf00      	nop
 80014f4:	080051a8 	.word	0x080051a8

080014f8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 80014f8:	b510      	push	{r4, lr}
 80014fa:	4807      	ldr	r0, [pc, #28]	; (8001518 <uart_console_init+0x20>)
 80014fc:	f001 ff52 	bl	80033a4 <z_impl_device_get_binding>
	__stdout_hook_install(console_out);
 8001500:	4c06      	ldr	r4, [pc, #24]	; (800151c <uart_console_init+0x24>)

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
 8001502:	4b07      	ldr	r3, [pc, #28]	; (8001520 <uart_console_init+0x28>)
 8001504:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
 8001506:	4620      	mov	r0, r4
 8001508:	f001 f84a 	bl	80025a0 <__stdout_hook_install>
	__printk_hook_install(console_out);
 800150c:	4620      	mov	r0, r4
 800150e:	f7ff fbaf 	bl	8000c70 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
 8001512:	2000      	movs	r0, #0
 8001514:	bd10      	pop	{r4, pc}
 8001516:	bf00      	nop
 8001518:	0800558a 	.word	0x0800558a
 800151c:	08001525 	.word	0x08001525
 8001520:	24000274 	.word	0x24000274

08001524 <console_out>:
	if ('\n' == c) {
 8001524:	280a      	cmp	r0, #10
{
 8001526:	b538      	push	{r3, r4, r5, lr}
 8001528:	4604      	mov	r4, r0
 800152a:	4d07      	ldr	r5, [pc, #28]	; (8001548 <console_out+0x24>)
	if ('\n' == c) {
 800152c:	d104      	bne.n	8001538 <console_out+0x14>
 800152e:	6828      	ldr	r0, [r5, #0]
 8001530:	6883      	ldr	r3, [r0, #8]
 8001532:	210d      	movs	r1, #13
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
 8001538:	6828      	ldr	r0, [r5, #0]
 800153a:	6883      	ldr	r3, [r0, #8]
 800153c:	b2e1      	uxtb	r1, r4
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	4798      	blx	r3
}
 8001542:	4620      	mov	r0, r4
 8001544:	bd38      	pop	{r3, r4, r5, pc}
 8001546:	bf00      	nop
 8001548:	24000274 	.word	0x24000274

0800154c <stm32_exti_enable>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR1, ExtiLine);
 800154c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000

	/* Enable requested line interrupt */
#if defined(CONFIG_SOC_SERIES_STM32H7X) && defined(CONFIG_CPU_CORTEX_M4)
	LL_C2_EXTI_EnableIT_0_31(1 << line);
#else
	LL_EXTI_EnableIT_0_31(1 << line);
 8001550:	2301      	movs	r3, #1
 8001552:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
 8001556:	4083      	lsls	r3, r0
 8001558:	430b      	orrs	r3, r1
 800155a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif

	/* Enable exti irq interrupt */
	irq_enable(irqnum);
 800155e:	4b02      	ldr	r3, [pc, #8]	; (8001568 <stm32_exti_enable+0x1c>)
 8001560:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
 8001564:	f000 bbbe 	b.w	8001ce4 <arch_irq_enable>
 8001568:	080053d8 	.word	0x080053d8

0800156c <stm32_exti_set_callback>:
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
	const struct device *dev = DEVICE_GET(exti_stm32);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 800156c:	4b07      	ldr	r3, [pc, #28]	; (800158c <stm32_exti_set_callback+0x20>)
{
 800156e:	b510      	push	{r4, lr}
 8001570:	4604      	mov	r4, r0
	if (data->cb[line].cb) {
 8001572:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 8001576:	b928      	cbnz	r0, 8001584 <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 8001578:	f843 1034 	str.w	r1, [r3, r4, lsl #3]
	data->cb[line].data = arg;
 800157c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8001580:	605a      	str	r2, [r3, #4]

	return 0;
}
 8001582:	bd10      	pop	{r4, pc}
		return -EBUSY;
 8001584:	f06f 000f 	mvn.w	r0, #15
 8001588:	e7fb      	b.n	8001582 <stm32_exti_set_callback+0x16>
 800158a:	bf00      	nop
 800158c:	24000278 	.word	0x24000278

08001590 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *dev = DEVICE_GET(exti_stm32);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 8001590:	4b03      	ldr	r3, [pc, #12]	; (80015a0 <stm32_exti_unset_callback+0x10>)
 8001592:	2200      	movs	r2, #0
 8001594:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 8001598:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800159c:	605a      	str	r2, [r3, #4]
}
 800159e:	4770      	bx	lr
 80015a0:	24000278 	.word	0x24000278

080015a4 <stm32_clock_control_on>:
	ARG_UNUSED(dev);

	/* Both cores can access bansk by following LL API */
	/* Using "_Cn_" LL API would restrict access to one or the other */
	z_stm32_hsem_lock(CFG_HW_RCC_SEMID, HSEM_LOCK_DEFAULT_RETRY);
	switch (pclken->bus) {
 80015a4:	680b      	ldr	r3, [r1, #0]
{
 80015a6:	b08a      	sub	sp, #40	; 0x28
 80015a8:	2b0b      	cmp	r3, #11
 80015aa:	d87e      	bhi.n	80016aa <stm32_clock_control_on+0x106>
 80015ac:	e8df f003 	tbb	[pc, r3]
 80015b0:	563c1506 	.word	0x563c1506
 80015b4:	2f227d49 	.word	0x2f227d49
 80015b8:	70637d7d 	.word	0x70637d7d
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80015bc:	4a3c      	ldr	r2, [pc, #240]	; (80016b0 <stm32_clock_control_on+0x10c>)
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 80015be:	684b      	ldr	r3, [r1, #4]
 80015c0:	f8d2 10d8 	ldr.w	r1, [r2, #216]	; 0xd8
 80015c4:	4319      	orrs	r1, r3
 80015c6:	f8c2 10d8 	str.w	r1, [r2, #216]	; 0xd8
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80015ca:	f8d2 20d8 	ldr.w	r2, [r2, #216]	; 0xd8
 80015ce:	4013      	ands	r3, r2
 80015d0:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80015d2:	9b01      	ldr	r3, [sp, #4]
	int rc = 0;
 80015d4:	2000      	movs	r0, #0
	}

	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);

	return rc;
}
 80015d6:	b00a      	add	sp, #40	; 0x28
 80015d8:	4770      	bx	lr
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80015da:	4a35      	ldr	r2, [pc, #212]	; (80016b0 <stm32_clock_control_on+0x10c>)
		LL_AHB2_GRP1_EnableClock(pclken->enr);
 80015dc:	684b      	ldr	r3, [r1, #4]
 80015de:	f8d2 10dc 	ldr.w	r1, [r2, #220]	; 0xdc
 80015e2:	4319      	orrs	r1, r3
 80015e4:	f8c2 10dc 	str.w	r1, [r2, #220]	; 0xdc
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80015e8:	f8d2 20dc 	ldr.w	r2, [r2, #220]	; 0xdc
 80015ec:	4013      	ands	r3, r2
 80015ee:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 80015f0:	9b02      	ldr	r3, [sp, #8]
 80015f2:	e7ef      	b.n	80015d4 <stm32_clock_control_on+0x30>
  SET_BIT(RCC->AHB3ENR, Periphs);
 80015f4:	4a2e      	ldr	r2, [pc, #184]	; (80016b0 <stm32_clock_control_on+0x10c>)
		LL_AHB3_GRP1_EnableClock(pclken->enr);
 80015f6:	684b      	ldr	r3, [r1, #4]
 80015f8:	f8d2 10d4 	ldr.w	r1, [r2, #212]	; 0xd4
 80015fc:	4319      	orrs	r1, r3
 80015fe:	f8c2 10d4 	str.w	r1, [r2, #212]	; 0xd4
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001602:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
 8001606:	4013      	ands	r3, r2
 8001608:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 800160a:	9b03      	ldr	r3, [sp, #12]
 800160c:	e7e2      	b.n	80015d4 <stm32_clock_control_on+0x30>
  * @retval None
*/
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB4ENR, Periphs);
 800160e:	4a28      	ldr	r2, [pc, #160]	; (80016b0 <stm32_clock_control_on+0x10c>)
		LL_AHB4_GRP1_EnableClock(pclken->enr);
 8001610:	684b      	ldr	r3, [r1, #4]
 8001612:	f8d2 10e0 	ldr.w	r1, [r2, #224]	; 0xe0
 8001616:	4319      	orrs	r1, r3
 8001618:	f8c2 10e0 	str.w	r1, [r2, #224]	; 0xe0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 800161c:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
 8001620:	4013      	ands	r3, r2
 8001622:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 8001624:	9b04      	ldr	r3, [sp, #16]
 8001626:	e7d5      	b.n	80015d4 <stm32_clock_control_on+0x30>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1LENR, Periphs);
 8001628:	4a21      	ldr	r2, [pc, #132]	; (80016b0 <stm32_clock_control_on+0x10c>)
		LL_APB1_GRP1_EnableClock(pclken->enr);
 800162a:	684b      	ldr	r3, [r1, #4]
 800162c:	f8d2 10e8 	ldr.w	r1, [r2, #232]	; 0xe8
 8001630:	4319      	orrs	r1, r3
 8001632:	f8c2 10e8 	str.w	r1, [r2, #232]	; 0xe8
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 8001636:	f8d2 20e8 	ldr.w	r2, [r2, #232]	; 0xe8
 800163a:	4013      	ands	r3, r2
 800163c:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 800163e:	9b05      	ldr	r3, [sp, #20]
 8001640:	e7c8      	b.n	80015d4 <stm32_clock_control_on+0x30>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1HENR, Periphs);
 8001642:	4a1b      	ldr	r2, [pc, #108]	; (80016b0 <stm32_clock_control_on+0x10c>)
		LL_APB1_GRP2_EnableClock(pclken->enr);
 8001644:	684b      	ldr	r3, [r1, #4]
 8001646:	f8d2 10ec 	ldr.w	r1, [r2, #236]	; 0xec
 800164a:	4319      	orrs	r1, r3
 800164c:	f8c2 10ec 	str.w	r1, [r2, #236]	; 0xec
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1HENR, Periphs);
 8001650:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 8001654:	4013      	ands	r3, r2
 8001656:	9306      	str	r3, [sp, #24]
  (void)tmpreg;
 8001658:	9b06      	ldr	r3, [sp, #24]
 800165a:	e7bb      	b.n	80015d4 <stm32_clock_control_on+0x30>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800165c:	4a14      	ldr	r2, [pc, #80]	; (80016b0 <stm32_clock_control_on+0x10c>)
		LL_APB2_GRP1_EnableClock(pclken->enr);
 800165e:	684b      	ldr	r3, [r1, #4]
 8001660:	f8d2 10f0 	ldr.w	r1, [r2, #240]	; 0xf0
 8001664:	4319      	orrs	r1, r3
 8001666:	f8c2 10f0 	str.w	r1, [r2, #240]	; 0xf0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800166a:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
 800166e:	4013      	ands	r3, r2
 8001670:	9307      	str	r3, [sp, #28]
  (void)tmpreg;
 8001672:	9b07      	ldr	r3, [sp, #28]
 8001674:	e7ae      	b.n	80015d4 <stm32_clock_control_on+0x30>
  SET_BIT(RCC->APB3ENR, Periphs);
 8001676:	4a0e      	ldr	r2, [pc, #56]	; (80016b0 <stm32_clock_control_on+0x10c>)
		LL_APB3_GRP1_EnableClock(pclken->enr);
 8001678:	684b      	ldr	r3, [r1, #4]
 800167a:	f8d2 10e4 	ldr.w	r1, [r2, #228]	; 0xe4
 800167e:	4319      	orrs	r1, r3
 8001680:	f8c2 10e4 	str.w	r1, [r2, #228]	; 0xe4
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001684:	f8d2 20e4 	ldr.w	r2, [r2, #228]	; 0xe4
 8001688:	4013      	ands	r3, r2
 800168a:	9308      	str	r3, [sp, #32]
  (void)tmpreg;
 800168c:	9b08      	ldr	r3, [sp, #32]
 800168e:	e7a1      	b.n	80015d4 <stm32_clock_control_on+0x30>
  * @retval None
*/
__STATIC_INLINE void LL_APB4_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB4ENR, Periphs);
 8001690:	4a07      	ldr	r2, [pc, #28]	; (80016b0 <stm32_clock_control_on+0x10c>)
		LL_APB4_GRP1_EnableClock(pclken->enr);
 8001692:	684b      	ldr	r3, [r1, #4]
 8001694:	f8d2 10f4 	ldr.w	r1, [r2, #244]	; 0xf4
 8001698:	4319      	orrs	r1, r3
 800169a:	f8c2 10f4 	str.w	r1, [r2, #244]	; 0xf4
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB4ENR, Periphs);
 800169e:	f8d2 20f4 	ldr.w	r2, [r2, #244]	; 0xf4
 80016a2:	4013      	ands	r3, r2
 80016a4:	9309      	str	r3, [sp, #36]	; 0x24
  (void)tmpreg;
 80016a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80016a8:	e794      	b.n	80015d4 <stm32_clock_control_on+0x30>
	switch (pclken->bus) {
 80016aa:	f06f 0022 	mvn.w	r0, #34	; 0x22
	return rc;
 80016ae:	e792      	b.n	80015d6 <stm32_clock_control_on+0x32>
 80016b0:	58024400 	.word	0x58024400

080016b4 <stm32_clock_control_off>:
	ARG_UNUSED(dev);

	/* Both cores can access bansk by following LL API */
	/* Using "_Cn_" LL API would restrict access to one or the other */
	z_stm32_hsem_lock(CFG_HW_RCC_SEMID, HSEM_LOCK_DEFAULT_RETRY);
	switch (pclken->bus) {
 80016b4:	680b      	ldr	r3, [r1, #0]
 80016b6:	2b0b      	cmp	r3, #11
 80016b8:	d859      	bhi.n	800176e <stm32_clock_control_off+0xba>
 80016ba:	e8df f003 	tbb	[pc, r3]
 80016be:	1006      	.short	0x1006
 80016c0:	58343d2b 	.word	0x58343d2b
 80016c4:	58582219 	.word	0x58582219
 80016c8:	4f46      	.short	0x4f46
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 80016ca:	4a2a      	ldr	r2, [pc, #168]	; (8001774 <stm32_clock_control_off+0xc0>)
 80016cc:	6849      	ldr	r1, [r1, #4]
 80016ce:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
 80016d2:	ea23 0301 	bic.w	r3, r3, r1
 80016d6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
	int rc = 0;
 80016da:	2000      	movs	r0, #0
}
 80016dc:	4770      	bx	lr
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 80016de:	4a25      	ldr	r2, [pc, #148]	; (8001774 <stm32_clock_control_off+0xc0>)
 80016e0:	6849      	ldr	r1, [r1, #4]
 80016e2:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
 80016e6:	ea23 0301 	bic.w	r3, r3, r1
 80016ea:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80016ee:	e7f4      	b.n	80016da <stm32_clock_control_off+0x26>
  CLEAR_BIT(RCC->AHB3ENR, Periphs);
 80016f0:	4a20      	ldr	r2, [pc, #128]	; (8001774 <stm32_clock_control_off+0xc0>)
 80016f2:	6849      	ldr	r1, [r1, #4]
 80016f4:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
 80016f8:	ea23 0301 	bic.w	r3, r3, r1
 80016fc:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001700:	e7eb      	b.n	80016da <stm32_clock_control_off+0x26>
  CLEAR_BIT(RCC->AHB4ENR, Periphs);
 8001702:	4a1c      	ldr	r2, [pc, #112]	; (8001774 <stm32_clock_control_off+0xc0>)
 8001704:	6849      	ldr	r1, [r1, #4]
 8001706:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
 800170a:	ea23 0301 	bic.w	r3, r3, r1
 800170e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001712:	e7e2      	b.n	80016da <stm32_clock_control_off+0x26>
  CLEAR_BIT(RCC->APB1LENR, Periphs);
 8001714:	4a17      	ldr	r2, [pc, #92]	; (8001774 <stm32_clock_control_off+0xc0>)
 8001716:	6849      	ldr	r1, [r1, #4]
 8001718:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 800171c:	ea23 0301 	bic.w	r3, r3, r1
 8001720:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001724:	e7d9      	b.n	80016da <stm32_clock_control_off+0x26>
  CLEAR_BIT(RCC->APB1HENR, Periphs);
 8001726:	4a13      	ldr	r2, [pc, #76]	; (8001774 <stm32_clock_control_off+0xc0>)
 8001728:	6849      	ldr	r1, [r1, #4]
 800172a:	f8d2 30ec 	ldr.w	r3, [r2, #236]	; 0xec
 800172e:	ea23 0301 	bic.w	r3, r3, r1
 8001732:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001736:	e7d0      	b.n	80016da <stm32_clock_control_off+0x26>
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8001738:	4a0e      	ldr	r2, [pc, #56]	; (8001774 <stm32_clock_control_off+0xc0>)
 800173a:	6849      	ldr	r1, [r1, #4]
 800173c:	f8d2 30f0 	ldr.w	r3, [r2, #240]	; 0xf0
 8001740:	ea23 0301 	bic.w	r3, r3, r1
 8001744:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001748:	e7c7      	b.n	80016da <stm32_clock_control_off+0x26>
  CLEAR_BIT(RCC->APB3ENR, Periphs);
 800174a:	4a0a      	ldr	r2, [pc, #40]	; (8001774 <stm32_clock_control_off+0xc0>)
 800174c:	6849      	ldr	r1, [r1, #4]
 800174e:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
 8001752:	ea23 0301 	bic.w	r3, r3, r1
 8001756:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800175a:	e7be      	b.n	80016da <stm32_clock_control_off+0x26>
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB4_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB4ENR, Periphs);
 800175c:	4a05      	ldr	r2, [pc, #20]	; (8001774 <stm32_clock_control_off+0xc0>)
 800175e:	6849      	ldr	r1, [r1, #4]
 8001760:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
 8001764:	ea23 0301 	bic.w	r3, r3, r1
 8001768:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800176c:	e7b5      	b.n	80016da <stm32_clock_control_off+0x26>
	switch (pclken->bus) {
 800176e:	f06f 0022 	mvn.w	r0, #34	; 0x22
		break;
	}
	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);

	return rc;
}
 8001772:	4770      	bx	lr
 8001774:	58024400 	.word	0x58024400

08001778 <stm32_clock_control_get_subsys_rate>:
	uint32_t apb4_clock = get_bus_clock(ahb_clock,
				CONFIG_CLOCK_STM32_D3PPRE);

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 8001778:	6809      	ldr	r1, [r1, #0]
	uint32_t ahb_clock = get_bus_clock(SystemCoreClock,
 800177a:	4b08      	ldr	r3, [pc, #32]	; (800179c <stm32_clock_control_get_subsys_rate+0x24>)
 800177c:	290b      	cmp	r1, #11
 800177e:	6818      	ldr	r0, [r3, #0]
	switch (pclken->bus) {
 8001780:	d808      	bhi.n	8001794 <stm32_clock_control_get_subsys_rate+0x1c>
 8001782:	2301      	movs	r3, #1
 8001784:	408b      	lsls	r3, r1
 8001786:	f640 41df 	movw	r1, #3295	; 0xcdf
 800178a:	420b      	tst	r3, r1
 800178c:	d002      	beq.n	8001794 <stm32_clock_control_get_subsys_rate+0x1c>
		break;
	case STM32_CLOCK_BUS_APB3:
		*rate = apb3_clock;
		break;
	case STM32_CLOCK_BUS_APB4:
		*rate = apb4_clock;
 800178e:	6010      	str	r0, [r2, #0]
		break;
	default:
		return -ENOTSUP;
	}

	return 0;
 8001790:	2000      	movs	r0, #0
		break;
 8001792:	4770      	bx	lr
	switch (pclken->bus) {
 8001794:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	24000028 	.word	0x24000028

080017a0 <stm32_clock_control_init>:
  SET_BIT(RCC->AHB4ENR, Periphs);
 80017a0:	4b7f      	ldr	r3, [pc, #508]	; (80019a0 <stm32_clock_control_init+0x200>)
 80017a2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80017a6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
	.off = stm32_clock_control_off,
	.get_rate = stm32_clock_control_get_subsys_rate,
};

static int stm32_clock_control_init(const struct device *dev)
{
 80017aa:	b513      	push	{r0, r1, r4, lr}
 80017ac:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 80017b0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
  MODIFY_REG(PWR->CR3, (PWR_CR3_SCUEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS), SupplySource);
 80017b4:	497b      	ldr	r1, [pc, #492]	; (80019a4 <stm32_clock_control_init+0x204>)
 80017b6:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80017ba:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80017bc:	9a01      	ldr	r2, [sp, #4]
 80017be:	68ca      	ldr	r2, [r1, #12]
 80017c0:	f022 0207 	bic.w	r2, r2, #7
 80017c4:	f042 0202 	orr.w	r2, r2, #2
 80017c8:	60ca      	str	r2, [r1, #12]
  MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
 80017ca:	698a      	ldr	r2, [r1, #24]
 80017cc:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80017d0:	618a      	str	r2, [r1, #24]
  *         @arg @ref LL_RCC_HSI_DIV4
  *         @arg @ref LL_RCC_HSI_DIV8
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_GetDivider(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	f002 0218 	and.w	r2, r2, #24
 80017d8:	3a08      	subs	r2, #8
 80017da:	2a10      	cmp	r2, #16
 80017dc:	bf96      	itet	ls
 80017de:	4972      	ldrls	r1, [pc, #456]	; (80019a8 <stm32_clock_control_init+0x208>)
 80017e0:	2101      	movhi	r1, #1
 80017e2:	5c89      	ldrbls	r1, [r1, r2]
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL1
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80017e4:	691a      	ldr	r2, [r3, #16]
 80017e6:	f002 0238 	and.w	r2, r2, #56	; 0x38
	switch (LL_RCC_GetSysClkSource()) {
 80017ea:	2a10      	cmp	r2, #16
 80017ec:	f000 80d5 	beq.w	800199a <stm32_clock_control_init+0x1fa>
 80017f0:	f200 80b1 	bhi.w	8001956 <stm32_clock_control_init+0x1b6>
 80017f4:	2a00      	cmp	r2, #0
 80017f6:	f000 80b2 	beq.w	800195e <stm32_clock_control_init+0x1be>
 80017fa:	2a08      	cmp	r2, #8
 80017fc:	4b6b      	ldr	r3, [pc, #428]	; (80019ac <stm32_clock_control_init+0x20c>)
 80017fe:	bf18      	it	ne
 8001800:	2300      	movne	r3, #0
  *         @arg @ref LL_RCC_AHB_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
#if defined(RCC_D1CFGR_HPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_HPRE));
 8001802:	4a67      	ldr	r2, [pc, #412]	; (80019a0 <stm32_clock_control_init+0x200>)
				      CONFIG_CLOCK_STM32_HPRE);

	/* Set flash latency */
	/* AHB/AXI/HCLK clock is SYSCLK / HPRE */
	/* If freq increases, set flash latency before any clock setting */
	if (new_hclk_freq > old_hclk_freq) {
 8001804:	486a      	ldr	r0, [pc, #424]	; (80019b0 <stm32_clock_control_init+0x210>)
 8001806:	6992      	ldr	r2, [r2, #24]
 8001808:	f002 020f 	and.w	r2, r2, #15
 800180c:	3a08      	subs	r2, #8
 800180e:	2a07      	cmp	r2, #7
 8001810:	bf96      	itet	ls
 8001812:	4968      	ldrls	r1, [pc, #416]	; (80019b4 <stm32_clock_control_init+0x214>)
 8001814:	2401      	movhi	r4, #1
 8001816:	f831 4012 	ldrhls.w	r4, [r1, r2, lsl #1]
	return clock / prescaler;
 800181a:	fbb3 f4f4 	udiv	r4, r3, r4
	if (new_hclk_freq > old_hclk_freq) {
 800181e:	4284      	cmp	r4, r0
 8001820:	d201      	bcs.n	8001826 <stm32_clock_control_init+0x86>
		LL_SetFlashLatency(new_hclk_freq);
 8001822:	f001 fd0b 	bl	800323c <LL_SetFlashLatency>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001826:	4b5e      	ldr	r3, [pc, #376]	; (80019a0 <stm32_clock_control_init+0x200>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800182e:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001836:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY))?1UL:0UL);
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	0392      	lsls	r2, r2, #14
 800183c:	d5fc      	bpl.n	8001838 <stm32_clock_control_init+0x98>
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_SetSource(uint32_t PLLSource)
{
  MODIFY_REG(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC, PLLSource);
 800183e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001840:	f022 0203 	bic.w	r2, r2, #3
 8001844:	f042 0202 	orr.w	r2, r2, #2
 8001848:	629a      	str	r2, [r3, #40]	; 0x28
  * @rmtoll PLLCKSELR       DIVM1          LL_RCC_PLL1_SetM
  * @param  M parameter can be a value between 0 and 63
  */
__STATIC_INLINE void LL_RCC_PLL1_SetM(uint32_t M)
{
  MODIFY_REG(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1, M << RCC_PLLCKSELR_DIVM1_Pos);
 800184a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800184c:	f422 727c 	bic.w	r2, r2, #1008	; 0x3f0
 8001850:	f042 0210 	orr.w	r2, r2, #16
 8001854:	629a      	str	r2, [r3, #40]	; 0x28
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL1RGE, InputRange << RCC_PLLCFGR_PLL1RGE_Pos);
 8001856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001858:	f022 020c 	bic.w	r2, r2, #12
 800185c:	f042 0208 	orr.w	r2, r2, #8
 8001860:	62da      	str	r2, [r3, #44]	; 0x2c
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL1VCOSEL, VCORange << RCC_PLLCFGR_PLL1VCOSEL_Pos);
 8001862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001864:	f022 0202 	bic.w	r2, r2, #2
 8001868:	62da      	str	r2, [r3, #44]	; 0x2c
  CLEAR_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN);
 800186a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800186c:	f022 0201 	bic.w	r2, r2, #1
 8001870:	62da      	str	r2, [r3, #44]	; 0x2c
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP1EN);
 8001872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001874:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001878:	62da      	str	r2, [r3, #44]	; 0x2c
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ1EN);
 800187a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800187c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001880:	62da      	str	r2, [r3, #44]	; 0x2c
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR1EN);
 8001882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001884:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001888:	62da      	str	r2, [r3, #44]	; 0x2c
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_N1, (N-1UL) << RCC_PLL1DIVR_N1_Pos);
 800188a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800188c:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001890:	f022 0201 	bic.w	r2, r2, #1
 8001894:	f042 0217 	orr.w	r2, r2, #23
 8001898:	631a      	str	r2, [r3, #48]	; 0x30
  * @rmtoll PLL1DIVR        P1          LL_RCC_PLL1_SetP
  * @param  P parameter can be a value between 2 and 128 (ODD division factor not supportted)
  */
__STATIC_INLINE void LL_RCC_PLL1_SetP(uint32_t P)
{
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_P1, (P-1UL) << RCC_PLL1DIVR_P1_Pos);
 800189a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800189c:	f422 427e 	bic.w	r2, r2, #65024	; 0xfe00
 80018a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018a4:	631a      	str	r2, [r3, #48]	; 0x30
  * @rmtoll PLL1DIVR        Q1          LL_RCC_PLL1_SetQ
  * @param  Q parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL1_SetQ(uint32_t Q)
{
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_Q1, (Q-1UL) << RCC_PLL1DIVR_Q1_Pos);
 80018a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018a8:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80018ac:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80018b0:	631a      	str	r2, [r3, #48]	; 0x30
  * @rmtoll PLL1DIVR        R1          LL_RCC_PLL1_SetR
  * @param  R parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL1_SetR(uint32_t R)
{
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_R1, (R-1UL) << RCC_PLL1DIVR_R1_Pos);
 80018b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018b4:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 80018b8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80018bc:	631a      	str	r2, [r3, #48]	; 0x30
  MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, Prescaler);
 80018be:	699a      	ldr	r2, [r3, #24]
 80018c0:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80018c4:	619a      	str	r2, [r3, #24]
  MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, Prescaler);
 80018c6:	699a      	ldr	r2, [r3, #24]
 80018c8:	f022 020f 	bic.w	r2, r2, #15
 80018cc:	619a      	str	r2, [r3, #24]
  MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, Prescaler);
 80018ce:	69da      	ldr	r2, [r3, #28]
 80018d0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80018d4:	61da      	str	r2, [r3, #28]
  MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, Prescaler);
 80018d6:	69da      	ldr	r2, [r3, #28]
 80018d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80018dc:	61da      	str	r2, [r3, #28]
  MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, Prescaler);
 80018de:	699a      	ldr	r2, [r3, #24]
 80018e0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80018e4:	619a      	str	r2, [r3, #24]
  MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, Prescaler);
 80018e6:	6a1a      	ldr	r2, [r3, #32]
 80018e8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80018ec:	621a      	str	r2, [r3, #32]
  SET_BIT(RCC->CR, RCC_CR_PLL1ON);
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80018f4:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == (RCC_CR_PLL1RDY))?1UL:0UL);
 80018f6:	4a2a      	ldr	r2, [pc, #168]	; (80019a0 <stm32_clock_control_init+0x200>)
 80018f8:	4611      	mov	r1, r2
 80018fa:	6813      	ldr	r3, [r2, #0]
 80018fc:	019b      	lsls	r3, r3, #6
 80018fe:	d5fc      	bpl.n	80018fa <stm32_clock_control_init+0x15a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001900:	6913      	ldr	r3, [r2, #16]
 8001902:	f023 0307 	bic.w	r3, r3, #7
 8001906:	f043 0303 	orr.w	r3, r3, #3
 800190a:	6113      	str	r3, [r2, #16]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800190c:	690b      	ldr	r3, [r1, #16]
 800190e:	f003 0338 	and.w	r3, r3, #56	; 0x38
	while (LL_RCC_PLL1_IsReady() != 1) {
	}

	/* Set PLL1 as System Clock Source */
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL1);
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL1) {
 8001912:	2b18      	cmp	r3, #24
 8001914:	d1fa      	bne.n	800190c <stm32_clock_control_init+0x16c>
#endif /* CLOCK_STM32_SYSCLK_SRC */

	/* Set FLASH latency */
	/* AHB/AXI/HCLK clock is SYSCLK / HPRE */
	/* If freq not increased, set flash latency after all clock setting */
	if (new_hclk_freq <= old_hclk_freq) {
 8001916:	4826      	ldr	r0, [pc, #152]	; (80019b0 <stm32_clock_control_init+0x210>)
 8001918:	4284      	cmp	r4, r0
 800191a:	d301      	bcc.n	8001920 <stm32_clock_control_init+0x180>
		LL_SetFlashLatency(new_hclk_freq);
 800191c:	f001 fc8e 	bl	800323c <LL_SetFlashLatency>
  MODIFY_REG(PWR->CR3, (PWR_CR3_SCUEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS), SupplySource);
 8001920:	4a20      	ldr	r2, [pc, #128]	; (80019a4 <stm32_clock_control_init+0x204>)
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001922:	21f0      	movs	r1, #240	; 0xf0
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001924:	2000      	movs	r0, #0
 8001926:	68d3      	ldr	r3, [r2, #12]
 8001928:	f023 0307 	bic.w	r3, r3, #7
 800192c:	f043 0302 	orr.w	r3, r3, #2
 8001930:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
 8001932:	6993      	ldr	r3, [r2, #24]
 8001934:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001938:	6193      	str	r3, [r2, #24]
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800193a:	4b1f      	ldr	r3, [pc, #124]	; (80019b8 <stm32_clock_control_init+0x218>)
 800193c:	4a1f      	ldr	r2, [pc, #124]	; (80019bc <stm32_clock_control_init+0x21c>)
 800193e:	605a      	str	r2, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001940:	4a1f      	ldr	r2, [pc, #124]	; (80019c0 <stm32_clock_control_init+0x220>)
 8001942:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001946:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001948:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800194a:	601a      	str	r2, [r3, #0]
#endif /* CONFIG_CPU_CORTEX_M4 */

	/* Set systick to 1ms */
	SysTick_Config(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC / 1000);
	/* Update CMSIS variable */
	SystemCoreClock = CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC;
 800194c:	4b1d      	ldr	r3, [pc, #116]	; (80019c4 <stm32_clock_control_init+0x224>)
 800194e:	4a18      	ldr	r2, [pc, #96]	; (80019b0 <stm32_clock_control_init+0x210>)
 8001950:	601a      	str	r2, [r3, #0]

	return 0;
}
 8001952:	b002      	add	sp, #8
 8001954:	bd10      	pop	{r4, pc}
	switch (LL_RCC_GetSysClkSource()) {
 8001956:	2a18      	cmp	r2, #24
 8001958:	d005      	beq.n	8001966 <stm32_clock_control_init+0x1c6>
	uint32_t sysclk = 0;
 800195a:	2300      	movs	r3, #0
 800195c:	e751      	b.n	8001802 <stm32_clock_control_init+0x62>
		sysclk = HSI_VALUE/hsidiv;
 800195e:	4b1a      	ldr	r3, [pc, #104]	; (80019c8 <stm32_clock_control_init+0x228>)
 8001960:	fbb3 f3f1 	udiv	r3, r3, r1
		break;
 8001964:	e74d      	b.n	8001802 <stm32_clock_control_init+0x62>
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC));
 8001966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001968:	f003 0303 	and.w	r3, r3, #3
 800196c:	2b03      	cmp	r3, #3
 800196e:	bf16      	itet	ne
 8001970:	4a16      	ldrne	r2, [pc, #88]	; (80019cc <stm32_clock_control_init+0x22c>)
 8001972:	2300      	moveq	r3, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_N1) >>  RCC_PLL1DIVR_N1_Pos) + 1UL);
 8001974:	f852 3023 	ldrne.w	r3, [r2, r3, lsl #2]
 8001978:	4a09      	ldr	r2, [pc, #36]	; (80019a0 <stm32_clock_control_init+0x200>)
 800197a:	6b10      	ldr	r0, [r2, #48]	; 0x30
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1) >>  RCC_PLLCKSELR_DIVM1_Pos);
 800197c:	6a91      	ldr	r1, [r2, #40]	; 0x28
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_N1) >>  RCC_PLL1DIVR_N1_Pos) + 1UL);
 800197e:	f3c0 0008 	ubfx	r0, r0, #0, #9
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_P1) >>  RCC_PLL1DIVR_P1_Pos) + 1UL);
 8001982:	6b12      	ldr	r2, [r2, #48]	; 0x30
		sysclk = PLLP_FREQ(get_pllsrc_frequency(),
 8001984:	fb00 3303 	mla	r3, r0, r3, r3
 8001988:	f3c2 2046 	ubfx	r0, r2, #9, #7
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1) >>  RCC_PLLCKSELR_DIVM1_Pos);
 800198c:	f3c1 1205 	ubfx	r2, r1, #4, #6
 8001990:	fb00 2202 	mla	r2, r0, r2, r2
 8001994:	fbb3 f3f2 	udiv	r3, r3, r2
		break;
 8001998:	e733      	b.n	8001802 <stm32_clock_control_init+0x62>
		sysclk = HSE_VALUE;
 800199a:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <stm32_clock_control_init+0x230>)
 800199c:	e731      	b.n	8001802 <stm32_clock_control_init+0x62>
 800199e:	bf00      	nop
 80019a0:	58024400 	.word	0x58024400
 80019a4:	58024800 	.word	0x58024800
 80019a8:	080055b6 	.word	0x080055b6
 80019ac:	003d0900 	.word	0x003d0900
 80019b0:	05b8d800 	.word	0x05b8d800
 80019b4:	080053f8 	.word	0x080053f8
 80019b8:	e000e010 	.word	0xe000e010
 80019bc:	000176ff 	.word	0x000176ff
 80019c0:	e000ed00 	.word	0xe000ed00
 80019c4:	24000028 	.word	0x24000028
 80019c8:	03d09000 	.word	0x03d09000
 80019cc:	080051b8 	.word	0x080051b8
 80019d0:	007a1200 	.word	0x007a1200

080019d4 <enable_port>:
 * @param clk  optional clock device
 *
 * @return 0 on success, error otherwise
 */
static int enable_port(uint32_t port, const struct device *clk)
{
 80019d4:	b513      	push	{r0, r1, r4, lr}
 80019d6:	4604      	mov	r4, r0
	/* enable port clock */
	if (!clk) {
 80019d8:	4608      	mov	r0, r1
 80019da:	b911      	cbnz	r1, 80019e2 <enable_port+0xe>
 80019dc:	4809      	ldr	r0, [pc, #36]	; (8001a04 <enable_port+0x30>)
 80019de:	f001 fce1 	bl	80033a4 <z_impl_device_get_binding>
		clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);
	}

	struct stm32_pclken pclken;

	pclken.bus = STM32_CLOCK_BUS_GPIO;
 80019e2:	2307      	movs	r3, #7
 80019e4:	9300      	str	r3, [sp, #0]
	pclken.enr = ports_enable[port];
 80019e6:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <enable_port+0x34>)
 80019e8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80019ec:	9301      	str	r3, [sp, #4]

	if (pclken.enr == STM32_PORT_NOT_AVAILABLE) {
 80019ee:	3301      	adds	r3, #1
 80019f0:	d005      	beq.n	80019fe <enable_port+0x2a>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 80019f2:	6883      	ldr	r3, [r0, #8]
 80019f4:	4669      	mov	r1, sp
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4798      	blx	r3
		return -EIO;
	}

	return clock_control_on(clk, (clock_control_subsys_t *) &pclken);
}
 80019fa:	b002      	add	sp, #8
 80019fc:	bd10      	pop	{r4, pc}
		return -EIO;
 80019fe:	f06f 0004 	mvn.w	r0, #4
 8001a02:	e7fa      	b.n	80019fa <enable_port+0x26>
 8001a04:	080055ad 	.word	0x080055ad
 8001a08:	080051c4 	.word	0x080051c4

08001a0c <stm32_dt_pinctrl_configure>:
 *
 * @return 0 on success, -EINVAL otherwise
 */
int stm32_dt_pinctrl_configure(const struct soc_gpio_pinctrl *pinctrl,
			       size_t list_size, uint32_t base)
{
 8001a0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a10:	4607      	mov	r7, r0
	const struct device *clk;
	uint32_t pin, mux;
	uint32_t func = 0;

	if (!list_size) {
 8001a12:	460e      	mov	r6, r1
 8001a14:	b341      	cbz	r1, 8001a68 <stm32_dt_pinctrl_configure+0x5c>
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	/* make sure to enable port clock first */
	clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);

	for (int i = 0; i < list_size; i++) {
 8001a16:	2500      	movs	r5, #0
 8001a18:	4818      	ldr	r0, [pc, #96]	; (8001a7c <stm32_dt_pinctrl_configure+0x70>)
 8001a1a:	f001 fcc3 	bl	80033a4 <z_impl_device_get_binding>
			/* Not supported */
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
		}
#else
		if (STM32_DT_PINMUX_FUNC(mux) < ANALOG) {
			func = pinctrl[i].pincfg | STM32_MODER_ALT_MODE;
 8001a1e:	f107 0a04 	add.w	sl, r7, #4
 8001a22:	4680      	mov	r8, r0
	uint32_t func = 0;
 8001a24:	46ab      	mov	fp, r5
		mux = pinctrl[i].pinmux;
 8001a26:	f857 4035 	ldr.w	r4, [r7, r5, lsl #3]
		if (STM32_DT_PINMUX_FUNC(mux) < ANALOG) {
 8001a2a:	f014 0ff0 	tst.w	r4, #240	; 0xf0
 8001a2e:	b2e3      	uxtb	r3, r4
 8001a30:	d11e      	bne.n	8001a70 <stm32_dt_pinctrl_configure+0x64>
			func = pinctrl[i].pincfg | STM32_MODER_ALT_MODE;
 8001a32:	f85a 2035 	ldr.w	r2, [sl, r5, lsl #3]
 8001a36:	f042 0b20 	orr.w	fp, r2, #32
			/* Not supported */
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
		}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 8001a3a:	f3c4 2907 	ubfx	r9, r4, #8, #8
			       STM32_DT_PINMUX_LINE(mux));

		enable_port(STM32_PORT(pin), clk);
 8001a3e:	f3c4 3403 	ubfx	r4, r4, #12, #4
 8001a42:	4641      	mov	r1, r8
 8001a44:	9301      	str	r3, [sp, #4]
 8001a46:	4620      	mov	r0, r4
	uint32_t offset = STM32_PORT(pin) * GPIO_REG_SIZE;
 8001a48:	02a4      	lsls	r4, r4, #10
		enable_port(STM32_PORT(pin), clk);
 8001a4a:	f7ff ffc3 	bl	80019d4 <enable_port>
	for (int i = 0; i < list_size; i++) {
 8001a4e:	3501      	adds	r5, #1
	return gpio_stm32_configure((uint32_t *)port_base,
 8001a50:	f104 40b0 	add.w	r0, r4, #1476395008	; 0x58000000
 8001a54:	9b01      	ldr	r3, [sp, #4]
 8001a56:	465a      	mov	r2, fp
 8001a58:	f009 010f 	and.w	r1, r9, #15
 8001a5c:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
 8001a60:	f002 fe28 	bl	80046b4 <gpio_stm32_configure>
	for (int i = 0; i < list_size; i++) {
 8001a64:	42ae      	cmp	r6, r5
 8001a66:	d1de      	bne.n	8001a26 <stm32_dt_pinctrl_configure+0x1a>

		stm32_pin_configure(pin, func, STM32_DT_PINMUX_FUNC(mux));
	}

	return 0;
}
 8001a68:	2000      	movs	r0, #0
 8001a6a:	b003      	add	sp, #12
 8001a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			func = STM32_MODER_ANALOG_MODE;
 8001a70:	2b10      	cmp	r3, #16
 8001a72:	bf08      	it	eq
 8001a74:	f04f 0b30 	moveq.w	fp, #48	; 0x30
 8001a78:	e7df      	b.n	8001a3a <stm32_dt_pinctrl_configure+0x2e>
 8001a7a:	bf00      	nop
 8001a7c:	080055ad 	.word	0x080055ad

08001a80 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 8001a80:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <elapsed+0x30>)
 8001a82:	689a      	ldr	r2, [r3, #8]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 8001a84:	6819      	ldr	r1, [r3, #0]
	uint32_t val2 = SysTick->VAL;	/* C */
 8001a86:	6898      	ldr	r0, [r3, #8]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8001a88:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 8001a8c:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <elapsed+0x34>)
 8001a8e:	490a      	ldr	r1, [pc, #40]	; (8001ab8 <elapsed+0x38>)
{
 8001a90:	b510      	push	{r4, lr}
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8001a92:	d101      	bne.n	8001a98 <elapsed+0x18>
	    || (val1 < val2)) {
 8001a94:	4282      	cmp	r2, r0
 8001a96:	d205      	bcs.n	8001aa4 <elapsed+0x24>
		overflow_cyc += last_load;
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	680c      	ldr	r4, [r1, #0]
 8001a9c:	4422      	add	r2, r4
 8001a9e:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 8001aa0:	4a03      	ldr	r2, [pc, #12]	; (8001ab0 <elapsed+0x30>)
 8001aa2:	6812      	ldr	r2, [r2, #0]
	}

	return (last_load - val2) + overflow_cyc;
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	680a      	ldr	r2, [r1, #0]
 8001aa8:	4413      	add	r3, r2
}
 8001aaa:	1a18      	subs	r0, r3, r0
 8001aac:	bd10      	pop	{r4, pc}
 8001aae:	bf00      	nop
 8001ab0:	e000e010 	.word	0xe000e010
 8001ab4:	24000304 	.word	0x24000304
 8001ab8:	24000300 	.word	0x24000300

08001abc <z_clock_isr>:

/* Callout out of platform assembly, not hooked via IRQ_CONNECT... */
void z_clock_isr(void *arg)
{
 8001abc:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	uint32_t dticks;

	/* Update overflow_cyc and clear COUNTFLAG by invoking elapsed() */
	elapsed();
 8001abe:	f7ff ffdf 	bl	8001a80 <elapsed>

	/* Increment the amount of HW cycles elapsed (complete counter
	 * cycles) and announce the progress to the kernel.
	 */
	cycle_count += overflow_cyc;
 8001ac2:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <z_clock_isr+0x38>)
 8001ac4:	4a0c      	ldr	r2, [pc, #48]	; (8001af8 <z_clock_isr+0x3c>)
 8001ac6:	6818      	ldr	r0, [r3, #0]
 8001ac8:	6811      	ldr	r1, [r2, #0]
 8001aca:	4408      	add	r0, r1
 8001acc:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
		 * because the value has been updated before LOAD re-program.
		 *
		 * We can assess if this is the case by inspecting COUNTFLAG.
		 */

		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8001ad2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001ad6:	4a09      	ldr	r2, [pc, #36]	; (8001afc <z_clock_isr+0x40>)
 8001ad8:	6811      	ldr	r1, [r2, #0]
 8001ada:	1a40      	subs	r0, r0, r1
 8001adc:	fbb0 f0f3 	udiv	r0, r0, r3
		announced_cycles += dticks * CYC_PER_TICK;
 8001ae0:	fb03 1300 	mla	r3, r3, r0, r1
 8001ae4:	6013      	str	r3, [r2, #0]
		z_clock_announce(dticks);
 8001ae6:	f002 fa8d 	bl	8004004 <z_clock_announce>
	} else {
		z_clock_announce(1);
	}
	z_arm_int_exit();
}
 8001aea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 8001aee:	f000 bc2b 	b.w	8002348 <z_arm_exc_exit>
 8001af2:	bf00      	nop
 8001af4:	24000304 	.word	0x24000304
 8001af8:	240002fc 	.word	0x240002fc
 8001afc:	240002f8 	.word	0x240002f8

08001b00 <z_clock_driver_init>:
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b00:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <z_clock_driver_init+0x28>)
 8001b02:	2210      	movs	r2, #16
{
	ARG_UNUSED(device);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
	overflow_cyc = 0U;
 8001b04:	2000      	movs	r0, #0
 8001b06:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	last_load = CYC_PER_TICK - 1;
 8001b0a:	f242 527f 	movw	r2, #9599	; 0x257f
 8001b0e:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <z_clock_driver_init+0x2c>)
 8001b10:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 8001b12:	4b07      	ldr	r3, [pc, #28]	; (8001b30 <z_clock_driver_init+0x30>)
 8001b14:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 8001b16:	4b07      	ldr	r3, [pc, #28]	; (8001b34 <z_clock_driver_init+0x34>)
 8001b18:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
 8001b1a:	6098      	str	r0, [r3, #8]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	f042 0207 	orr.w	r2, r2, #7
 8001b22:	601a      	str	r2, [r3, #0]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	e000ed00 	.word	0xe000ed00
 8001b2c:	24000300 	.word	0x24000300
 8001b30:	24000304 	.word	0x24000304
 8001b34:	e000e010 	.word	0xe000e010

08001b38 <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
 8001b38:	b570      	push	{r4, r5, r6, lr}
 8001b3a:	4604      	mov	r4, r0
 8001b3c:	4d2a      	ldr	r5, [pc, #168]	; (8001be8 <z_clock_set_timeout+0xb0>)
	 * need to wake up multiple times per second.  If the kernel
	 * allows us to miss tick announcements in idle, then shut off
	 * the counter. (Note: we can assume if idle==true that
	 * interrupts are already disabled)
	 */
	if (IS_ENABLED(CONFIG_TICKLESS_IDLE) && idle
 8001b3e:	b151      	cbz	r1, 8001b56 <z_clock_set_timeout+0x1e>
	    && ticks == K_TICKS_FOREVER) {
 8001b40:	1c43      	adds	r3, r0, #1
 8001b42:	d10e      	bne.n	8001b62 <z_clock_set_timeout+0x2a>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8001b44:	4a29      	ldr	r2, [pc, #164]	; (8001bec <z_clock_set_timeout+0xb4>)
 8001b46:	6813      	ldr	r3, [r2, #0]
 8001b48:	f023 0301 	bic.w	r3, r3, #1
 8001b4c:	6013      	str	r3, [r2, #0]
		last_load = TIMER_STOPPED;
 8001b4e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001b52:	602b      	str	r3, [r5, #0]
	SysTick->LOAD = last_load - 1;
	SysTick->VAL = 0; /* resets timer to last_load */

	k_spin_unlock(&lock, key);
#endif
}
 8001b54:	bd70      	pop	{r4, r5, r6, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8001b56:	f240 63d2 	movw	r3, #1746	; 0x6d2
 8001b5a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8001b5e:	bf08      	it	eq
 8001b60:	461c      	moveq	r4, r3
	__asm__ volatile(
 8001b62:	f04f 0310 	mov.w	r3, #16
 8001b66:	f3ef 8611 	mrs	r6, BASEPRI
 8001b6a:	f383 8811 	msr	BASEPRI, r3
 8001b6e:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 8001b72:	f7ff ff85 	bl	8001a80 <elapsed>
	cycle_count += pending;
 8001b76:	4b1e      	ldr	r3, [pc, #120]	; (8001bf0 <z_clock_set_timeout+0xb8>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	4410      	add	r0, r2
	overflow_cyc = 0U;
 8001b7c:	2200      	movs	r2, #0
	cycle_count += pending;
 8001b7e:	6018      	str	r0, [r3, #0]
	overflow_cyc = 0U;
 8001b80:	4b1c      	ldr	r3, [pc, #112]	; (8001bf4 <z_clock_set_timeout+0xbc>)
 8001b82:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 8001b84:	4b1c      	ldr	r3, [pc, #112]	; (8001bf8 <z_clock_set_timeout+0xc0>)
 8001b86:	681b      	ldr	r3, [r3, #0]
	if ((int32_t)unannounced < 0) {
 8001b88:	1ac2      	subs	r2, r0, r3
 8001b8a:	d50d      	bpl.n	8001ba8 <z_clock_set_timeout+0x70>
		last_load = MIN_DELAY;
 8001b8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
			last_load = MAX_CYCLES;
 8001b90:	602b      	str	r3, [r5, #0]
	SysTick->LOAD = last_load - 1;
 8001b92:	682b      	ldr	r3, [r5, #0]
 8001b94:	4a15      	ldr	r2, [pc, #84]	; (8001bec <z_clock_set_timeout+0xb4>)
 8001b96:	3b01      	subs	r3, #1
 8001b98:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	6093      	str	r3, [r2, #8]
	__asm__ volatile(
 8001b9e:	f386 8811 	msr	BASEPRI, r6
 8001ba2:	f3bf 8f6f 	isb	sy
 8001ba6:	e7d5      	b.n	8001b54 <z_clock_set_timeout+0x1c>
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);
 8001ba8:	3c01      	subs	r4, #1
		delay = ticks * CYC_PER_TICK;
 8001baa:	f240 61d2 	movw	r1, #1746	; 0x6d2
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8001bae:	f502 5215 	add.w	r2, r2, #9536	; 0x2540
		delay -= unannounced;
 8001bb2:	1a18      	subs	r0, r3, r0
		delay = ticks * CYC_PER_TICK;
 8001bb4:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8001bb8:	323f      	adds	r2, #63	; 0x3f
		delay = ticks * CYC_PER_TICK;
 8001bba:	428c      	cmp	r4, r1
 8001bbc:	bfa8      	it	ge
 8001bbe:	460c      	movge	r4, r1
 8001bc0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8001bc4:	fb01 2404 	mla	r4, r1, r4, r2
 8001bc8:	fbb4 f4f1 	udiv	r4, r4, r1
		delay -= unannounced;
 8001bcc:	fb01 0404 	mla	r4, r1, r4, r0
		delay = MAX(delay, MIN_DELAY);
 8001bd0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8001bd4:	d904      	bls.n	8001be0 <z_clock_set_timeout+0xa8>
		if (delay > MAX_CYCLES) {
 8001bd6:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <z_clock_set_timeout+0xc4>)
 8001bd8:	429c      	cmp	r4, r3
 8001bda:	d8d9      	bhi.n	8001b90 <z_clock_set_timeout+0x58>
			last_load = delay;
 8001bdc:	602c      	str	r4, [r5, #0]
 8001bde:	e7d8      	b.n	8001b92 <z_clock_set_timeout+0x5a>
		delay = MAX(delay, MIN_DELAY);
 8001be0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001be4:	e7fa      	b.n	8001bdc <z_clock_set_timeout+0xa4>
 8001be6:	bf00      	nop
 8001be8:	24000300 	.word	0x24000300
 8001bec:	e000e010 	.word	0xe000e010
 8001bf0:	240002fc 	.word	0x240002fc
 8001bf4:	24000304 	.word	0x24000304
 8001bf8:	240002f8 	.word	0x240002f8
 8001bfc:	00ffc300 	.word	0x00ffc300

08001c00 <z_clock_elapsed>:

uint32_t z_clock_elapsed(void)
{
 8001c00:	b510      	push	{r4, lr}
	__asm__ volatile(
 8001c02:	f04f 0310 	mov.w	r3, #16
 8001c06:	f3ef 8411 	mrs	r4, BASEPRI
 8001c0a:	f383 8811 	msr	BASEPRI, r3
 8001c0e:	f3bf 8f6f 	isb	sy
	if (!TICKLESS) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 8001c12:	f7ff ff35 	bl	8001a80 <elapsed>
 8001c16:	4b07      	ldr	r3, [pc, #28]	; (8001c34 <z_clock_elapsed+0x34>)
 8001c18:	4a07      	ldr	r2, [pc, #28]	; (8001c38 <z_clock_elapsed+0x38>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6812      	ldr	r2, [r2, #0]
 8001c1e:	1a9b      	subs	r3, r3, r2
 8001c20:	4403      	add	r3, r0
	__asm__ volatile(
 8001c22:	f384 8811 	msr	BASEPRI, r4
 8001c26:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return cyc / CYC_PER_TICK;
}
 8001c2a:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8001c2e:	fbb3 f0f0 	udiv	r0, r3, r0
 8001c32:	bd10      	pop	{r4, pc}
 8001c34:	240002fc 	.word	0x240002fc
 8001c38:	240002f8 	.word	0x240002f8

08001c3c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 8001c3c:	4a09      	ldr	r2, [pc, #36]	; (8001c64 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 8001c3e:	490a      	ldr	r1, [pc, #40]	; (8001c68 <arch_swap+0x2c>)
	_current->arch.basepri = key;
 8001c40:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 8001c42:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
 8001c44:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
 8001c46:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8001c48:	4908      	ldr	r1, [pc, #32]	; (8001c6c <arch_swap+0x30>)
 8001c4a:	684b      	ldr	r3, [r1, #4]
 8001c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c50:	604b      	str	r3, [r1, #4]
 8001c52:	2300      	movs	r3, #0
 8001c54:	f383 8811 	msr	BASEPRI, r3
 8001c58:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8001c5c:	6893      	ldr	r3, [r2, #8]
}
 8001c5e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	240003bc 	.word	0x240003bc
 8001c68:	080053c0 	.word	0x080053c0
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8001c70:	4912      	ldr	r1, [pc, #72]	; (8001cbc <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8001c72:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8001c74:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
 8001c78:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 8001c7a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8001c7e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8001c82:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8001c84:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 8001c88:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 8001c8c:	4f0c      	ldr	r7, [pc, #48]	; (8001cc0 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8001c8e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8001c92:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
 8001c94:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 8001c96:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 8001c98:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
 8001c9a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8001c9c:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8001c9e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 8001ca2:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 8001ca4:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 8001ca6:	f000 fba7 	bl	80023f8 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 8001caa:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 8001cae:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
 8001cb2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 8001cb6:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
 8001cba:	4770      	bx	lr
    ldr r1, =_kernel
 8001cbc:	240003bc 	.word	0x240003bc
    ldr v4, =_SCS_ICSR
 8001cc0:	e000ed04 	.word	0xe000ed04

08001cc4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
 8001cc4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8001cc8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 8001cca:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8001cce:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 8001cd2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 8001cd4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8001cd8:	2902      	cmp	r1, #2
    beq _oops
 8001cda:	d0ff      	beq.n	8001cdc <_oops>

08001cdc <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 8001cdc:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 8001cde:	f002 fc1a 	bl	8004516 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 8001ce2:	bd01      	pop	{r0, pc}

08001ce4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 8001ce4:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	db08      	blt.n	8001cfc <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cea:	2201      	movs	r2, #1
 8001cec:	f000 001f 	and.w	r0, r0, #31
 8001cf0:	095b      	lsrs	r3, r3, #5
 8001cf2:	fa02 f000 	lsl.w	r0, r2, r0
 8001cf6:	4a02      	ldr	r2, [pc, #8]	; (8001d00 <arch_irq_enable+0x1c>)
 8001cf8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	e000e100 	.word	0xe000e100

08001d04 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8001d04:	b203      	sxth	r3, r0
	prio += _IRQ_PRIO_OFFSET;
 8001d06:	3101      	adds	r1, #1
  if ((int32_t)(IRQn) >= 0)
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	ea4f 1101 	mov.w	r1, r1, lsl #4
 8001d0e:	b2c9      	uxtb	r1, r1
 8001d10:	db06      	blt.n	8001d20 <z_arm_irq_priority_set+0x1c>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d12:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001d16:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8001d1a:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
 8001d1e:	4770      	bx	lr
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d20:	f000 000f 	and.w	r0, r0, #15
 8001d24:	4b01      	ldr	r3, [pc, #4]	; (8001d2c <z_arm_irq_priority_set+0x28>)
 8001d26:	5419      	strb	r1, [r3, r0]
}
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	e000ed14 	.word	0xe000ed14

08001d30 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
 8001d30:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 8001d34:	3a20      	subs	r2, #32
	iframe->a2 = (uint32_t)p1;
 8001d36:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
 8001d38:	4907      	ldr	r1, [pc, #28]	; (8001d58 <arch_new_thread+0x28>)
	iframe->a2 = (uint32_t)p1;
 8001d3a:	6053      	str	r3, [r2, #4]
	iframe->a3 = (uint32_t)p2;
 8001d3c:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
 8001d3e:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
 8001d42:	6093      	str	r3, [r2, #8]
	iframe->a4 = (uint32_t)p3;
 8001d44:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
 8001d46:	6191      	str	r1, [r2, #24]
	iframe->a4 = (uint32_t)p3;
 8001d48:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8001d4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d4e:	61d3      	str	r3, [r2, #28]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 8001d50:	2300      	movs	r3, #0
	thread->callee_saved.psp = (uint32_t)iframe;
 8001d52:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
 8001d54:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8001d56:	4770      	bx	lr
 8001d58:	08004153 	.word	0x08004153

08001d5c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 8001d5c:	4a0b      	ldr	r2, [pc, #44]	; (8001d8c <z_check_thread_stack_fail+0x30>)
{
 8001d5e:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
 8001d60:	6890      	ldr	r0, [r2, #8]

	if (!thread) {
 8001d62:	b190      	cbz	r0, 8001d8a <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 8001d64:	f113 0f16 	cmn.w	r3, #22
 8001d68:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8001d6a:	d005      	beq.n	8001d78 <z_check_thread_stack_fail+0x1c>
 8001d6c:	f1a0 0220 	sub.w	r2, r0, #32
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d806      	bhi.n	8001d82 <z_check_thread_stack_fail+0x26>
 8001d74:	4283      	cmp	r3, r0
 8001d76:	d204      	bcs.n	8001d82 <z_check_thread_stack_fail+0x26>
 8001d78:	4281      	cmp	r1, r0
 8001d7a:	bf2c      	ite	cs
 8001d7c:	2100      	movcs	r1, #0
 8001d7e:	2101      	movcc	r1, #1
 8001d80:	e000      	b.n	8001d84 <z_check_thread_stack_fail+0x28>
 8001d82:	2100      	movs	r1, #0
 8001d84:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
 8001d86:	bf08      	it	eq
 8001d88:	2000      	moveq	r0, #0
}
 8001d8a:	4770      	bx	lr
 8001d8c:	240003bc 	.word	0x240003bc

08001d90 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 8001d90:	b508      	push	{r3, lr}
 8001d92:	4604      	mov	r4, r0
 8001d94:	460e      	mov	r6, r1
 8001d96:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
 8001d98:	f000 fb12 	bl	80023c0 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 8001d9c:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <arch_switch_to_main_thread+0x30>)
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 8001d9e:	4620      	mov	r0, r4
	_current = main_thread;
 8001da0:	609c      	str	r4, [r3, #8]
	z_arm_configure_dynamic_mpu_regions(main_thread);
 8001da2:	f000 fb29 	bl	80023f8 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 8001da6:	4628      	mov	r0, r5
 8001da8:	f386 8809 	msr	PSP, r6
 8001dac:	2100      	movs	r1, #0
 8001dae:	b663      	cpsie	if
 8001db0:	f381 8811 	msr	BASEPRI, r1
 8001db4:	f3bf 8f6f 	isb	sy
 8001db8:	2200      	movs	r2, #0
 8001dba:	2300      	movs	r3, #0
 8001dbc:	f002 f9c9 	bl	8004152 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 8001dc0:	240003bc 	.word	0x240003bc

08001dc4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 8001dc4:	4901      	ldr	r1, [pc, #4]	; (8001dcc <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 8001dc6:	2210      	movs	r2, #16
	str	r2, [r1]
 8001dc8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 8001dca:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 8001dcc:	e000ed10 	.word	0xe000ed10

08001dd0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 8001dd0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 8001dd2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 8001dd4:	f380 8811 	msr	BASEPRI, r0
	isb
 8001dd8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 8001ddc:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 8001de0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 8001de2:	b662      	cpsie	i
	isb
 8001de4:	f3bf 8f6f 	isb	sy

	bx	lr
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop

08001dec <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8001dec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001dee:	4606      	mov	r6, r0

	if (esf != NULL) {
 8001df0:	460c      	mov	r4, r1
 8001df2:	b301      	cbz	r1, 8001e36 <z_arm_fatal_error+0x4a>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
 8001df4:	4b13      	ldr	r3, [pc, #76]	; (8001e44 <z_arm_fatal_error+0x58>)
 8001df6:	4d14      	ldr	r5, [pc, #80]	; (8001e48 <z_arm_fatal_error+0x5c>)
 8001df8:	1aed      	subs	r5, r5, r3
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
 8001dfa:	688b      	ldr	r3, [r1, #8]
 8001dfc:	08ed      	lsrs	r5, r5, #3
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	01ad      	lsls	r5, r5, #6
 8001e02:	f045 0501 	orr.w	r5, r5, #1
 8001e06:	e9d1 2300 	ldrd	r2, r3, [r1]
 8001e0a:	4628      	mov	r0, r5
 8001e0c:	490f      	ldr	r1, [pc, #60]	; (8001e4c <z_arm_fatal_error+0x60>)
 8001e0e:	f002 fa97 	bl	8004340 <log_string_sync>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
 8001e12:	6963      	ldr	r3, [r4, #20]
 8001e14:	490e      	ldr	r1, [pc, #56]	; (8001e50 <z_arm_fatal_error+0x64>)
 8001e16:	4628      	mov	r0, r5
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 8001e1e:	f002 fa8f 	bl	8004340 <log_string_sync>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
 8001e22:	69e2      	ldr	r2, [r4, #28]
 8001e24:	490b      	ldr	r1, [pc, #44]	; (8001e54 <z_arm_fatal_error+0x68>)
 8001e26:	4628      	mov	r0, r5
 8001e28:	f002 fa8a 	bl	8004340 <log_string_sync>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
 8001e2c:	69a2      	ldr	r2, [r4, #24]
 8001e2e:	490a      	ldr	r1, [pc, #40]	; (8001e58 <z_arm_fatal_error+0x6c>)
 8001e30:	4628      	mov	r0, r5
 8001e32:	f002 fa85 	bl	8004340 <log_string_sync>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 8001e36:	4621      	mov	r1, r4
 8001e38:	4630      	mov	r0, r6
}
 8001e3a:	b002      	add	sp, #8
 8001e3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
 8001e40:	f001 baf0 	b.w	8003424 <z_fatal_error>
 8001e44:	08005128 	.word	0x08005128
 8001e48:	08005138 	.word	0x08005138
 8001e4c:	080055d1 	.word	0x080055d1
 8001e50:	08005600 	.word	0x08005600
 8001e54:	0800562f 	.word	0x0800562f
 8001e58:	0800563e 	.word	0x0800563e

08001e5c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8001e5c:	bf30      	wfi
    b z_SysNmiOnReset
 8001e5e:	f7ff bffd 	b.w	8001e5c <z_SysNmiOnReset>
 8001e62:	bf00      	nop

08001e64 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8001e64:	4a0e      	ldr	r2, [pc, #56]	; (8001ea0 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
 8001e66:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8001e68:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8001e6c:	4b0d      	ldr	r3, [pc, #52]	; (8001ea4 <z_arm_prep_c+0x40>)
 8001e6e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e70:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001e74:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 8001e78:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001e7c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8001e84:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 8001e88:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8001e8c:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 8001e90:	f001 fb28 	bl	80034e4 <z_bss_zero>
	z_data_copy();
 8001e94:	f001 fb3e 	bl	8003514 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 8001e98:	f000 fa64 	bl	8002364 <z_arm_interrupt_init>
	z_cstart();
 8001e9c:	f001 fb84 	bl	80035a8 <z_cstart>
 8001ea0:	08000000 	.word	0x08000000
 8001ea4:	e000ed00 	.word	0xe000ed00

08001ea8 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 8001ea8:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 8001eaa:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 8001eae:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 8001eb2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 8001eb6:	4904      	ldr	r1, [pc, #16]	; (8001ec8 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 8001eb8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 8001eba:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 8001ebc:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 8001ebe:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 8001ec2:	4902      	ldr	r1, [pc, #8]	; (8001ecc <_isr_wrapper+0x24>)
	bx r1
 8001ec4:	4708      	bx	r1
 8001ec6:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 8001ec8:	08004c78 	.word	0x08004c78
	ldr r1, =z_arm_int_exit
 8001ecc:	08002349 	.word	0x08002349

08001ed0 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8001ed0:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8001ed2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 8001ed6:	4808      	ldr	r0, [pc, #32]	; (8001ef8 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 8001ed8:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
 8001edc:	1840      	adds	r0, r0, r1
    msr PSP, r0
 8001ede:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 8001ee2:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 8001ee6:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 8001ee8:	4308      	orrs	r0, r1
    msr CONTROL, r0
 8001eea:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 8001eee:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 8001ef2:	f7ff ffb7 	bl	8001e64 <z_arm_prep_c>
 8001ef6:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 8001ef8:	240009a0 	.word	0x240009a0

08001efc <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 8001efc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 8001f00:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 8001f04:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 8001f06:	4672      	mov	r2, lr
	bl z_arm_fault
 8001f08:	f000 f948 	bl	800219c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 8001f0c:	bd01      	pop	{r0, pc}
 8001f0e:	bf00      	nop

08001f10 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
 8001f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f14:	4b33      	ldr	r3, [pc, #204]	; (8001fe4 <mem_manage_fault+0xd4>)
 8001f16:	4607      	mov	r7, r0
 8001f18:	4c33      	ldr	r4, [pc, #204]	; (8001fe8 <mem_manage_fault+0xd8>)
 8001f1a:	4688      	mov	r8, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8001f1c:	4d33      	ldr	r5, [pc, #204]	; (8001fec <mem_manage_fault+0xdc>)
{
 8001f1e:	4616      	mov	r6, r2
 8001f20:	1ae4      	subs	r4, r4, r3
	PR_FAULT_INFO("***** MPU FAULT *****");
 8001f22:	4933      	ldr	r1, [pc, #204]	; (8001ff0 <mem_manage_fault+0xe0>)
 8001f24:	08e4      	lsrs	r4, r4, #3
 8001f26:	01a4      	lsls	r4, r4, #6
 8001f28:	f044 0901 	orr.w	r9, r4, #1
 8001f2c:	4648      	mov	r0, r9
 8001f2e:	f002 fa07 	bl	8004340 <log_string_sync>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8001f32:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8001f34:	06d0      	lsls	r0, r2, #27
 8001f36:	d503      	bpl.n	8001f40 <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Stacking error (context area might be"
 8001f38:	492e      	ldr	r1, [pc, #184]	; (8001ff4 <mem_manage_fault+0xe4>)
 8001f3a:	4648      	mov	r0, r9
 8001f3c:	f002 fa00 	bl	8004340 <log_string_sync>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 8001f40:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001f42:	0719      	lsls	r1, r3, #28
 8001f44:	d504      	bpl.n	8001f50 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Unstacking error");
 8001f46:	492c      	ldr	r1, [pc, #176]	; (8001ff8 <mem_manage_fault+0xe8>)
 8001f48:	f044 0001 	orr.w	r0, r4, #1
 8001f4c:	f002 f9f8 	bl	8004340 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8001f50:	4d26      	ldr	r5, [pc, #152]	; (8001fec <mem_manage_fault+0xdc>)
 8001f52:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001f54:	079a      	lsls	r2, r3, #30
 8001f56:	d535      	bpl.n	8001fc4 <mem_manage_fault+0xb4>
		PR_FAULT_INFO("  Data Access Violation");
 8001f58:	f044 0a01 	orr.w	sl, r4, #1
 8001f5c:	4927      	ldr	r1, [pc, #156]	; (8001ffc <mem_manage_fault+0xec>)
 8001f5e:	4650      	mov	r0, sl
 8001f60:	f002 f9ee 	bl	8004340 <log_string_sync>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
 8001f64:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 8001f68:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001f6a:	061b      	lsls	r3, r3, #24
 8001f6c:	d50b      	bpl.n	8001f86 <mem_manage_fault+0x76>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
 8001f6e:	464a      	mov	r2, r9
 8001f70:	4923      	ldr	r1, [pc, #140]	; (8002000 <mem_manage_fault+0xf0>)
 8001f72:	4650      	mov	r0, sl
 8001f74:	f002 f9e4 	bl	8004340 <log_string_sync>
			if (from_hard_fault) {
 8001f78:	f1b8 0f00 	cmp.w	r8, #0
 8001f7c:	d003      	beq.n	8001f86 <mem_manage_fault+0x76>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 8001f7e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001f80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f84:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 8001f86:	4d19      	ldr	r5, [pc, #100]	; (8001fec <mem_manage_fault+0xdc>)
 8001f88:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8001f8a:	07d0      	lsls	r0, r2, #31
 8001f8c:	d504      	bpl.n	8001f98 <mem_manage_fault+0x88>
		PR_FAULT_INFO("  Instruction Access Violation");
 8001f8e:	491d      	ldr	r1, [pc, #116]	; (8002004 <mem_manage_fault+0xf4>)
 8001f90:	f044 0001 	orr.w	r0, r4, #1
 8001f94:	f002 f9d4 	bl	8004340 <log_string_sync>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 8001f98:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001f9a:	0699      	lsls	r1, r3, #26
 8001f9c:	d504      	bpl.n	8001fa8 <mem_manage_fault+0x98>
		PR_FAULT_INFO(
 8001f9e:	491a      	ldr	r1, [pc, #104]	; (8002008 <mem_manage_fault+0xf8>)
 8001fa0:	f044 0001 	orr.w	r0, r4, #1
 8001fa4:	f002 f9cc 	bl	8004340 <log_string_sync>
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
 8001fa8:	4b10      	ldr	r3, [pc, #64]	; (8001fec <mem_manage_fault+0xdc>)
 8001faa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fac:	06d2      	lsls	r2, r2, #27
 8001fae:	d40c      	bmi.n	8001fca <mem_manage_fault+0xba>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8001fb0:	2000      	movs	r0, #0
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8001fb2:	4a0e      	ldr	r2, [pc, #56]	; (8001fec <mem_manage_fault+0xdc>)
 8001fb4:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8001fb6:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8001fba:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	7033      	strb	r3, [r6, #0]

	return reason;
}
 8001fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32_t mmfar = -EINVAL;
 8001fc4:	f06f 0915 	mvn.w	r9, #21
 8001fc8:	e7dd      	b.n	8001f86 <mem_manage_fault+0x76>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	051b      	lsls	r3, r3, #20
 8001fce:	d5ef      	bpl.n	8001fb0 <mem_manage_fault+0xa0>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 8001fd0:	4639      	mov	r1, r7
 8001fd2:	4648      	mov	r0, r9
 8001fd4:	f7ff fec2 	bl	8001d5c <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 8001fd8:	2800      	cmp	r0, #0
 8001fda:	d0e9      	beq.n	8001fb0 <mem_manage_fault+0xa0>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8001fdc:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 8001fe0:	2002      	movs	r0, #2
 8001fe2:	e7e6      	b.n	8001fb2 <mem_manage_fault+0xa2>
 8001fe4:	08005128 	.word	0x08005128
 8001fe8:	08005138 	.word	0x08005138
 8001fec:	e000ed00 	.word	0xe000ed00
 8001ff0:	0800566c 	.word	0x0800566c
 8001ff4:	08005682 	.word	0x08005682
 8001ff8:	080056b5 	.word	0x080056b5
 8001ffc:	080056c8 	.word	0x080056c8
 8002000:	080056e0 	.word	0x080056e0
 8002004:	080056f6 	.word	0x080056f6
 8002008:	08005715 	.word	0x08005715

0800200c <bus_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 800200c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002010:	4b29      	ldr	r3, [pc, #164]	; (80020b8 <bus_fault.isra.0+0xac>)
 8002012:	4607      	mov	r7, r0
 8002014:	4c29      	ldr	r4, [pc, #164]	; (80020bc <bus_fault.isra.0+0xb0>)
 8002016:	460e      	mov	r6, r1
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8002018:	4d29      	ldr	r5, [pc, #164]	; (80020c0 <bus_fault.isra.0+0xb4>)
 800201a:	1ae4      	subs	r4, r4, r3
	PR_FAULT_INFO("***** BUS FAULT *****");
 800201c:	4929      	ldr	r1, [pc, #164]	; (80020c4 <bus_fault.isra.0+0xb8>)
 800201e:	08e4      	lsrs	r4, r4, #3
 8002020:	01a4      	lsls	r4, r4, #6
 8002022:	f044 0801 	orr.w	r8, r4, #1
 8002026:	4640      	mov	r0, r8
 8002028:	f002 f98a 	bl	8004340 <log_string_sync>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 800202c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800202e:	04d1      	lsls	r1, r2, #19
 8002030:	d503      	bpl.n	800203a <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
 8002032:	4925      	ldr	r1, [pc, #148]	; (80020c8 <bus_fault.isra.0+0xbc>)
 8002034:	4640      	mov	r0, r8
 8002036:	f002 f983 	bl	8004340 <log_string_sync>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 800203a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800203c:	051a      	lsls	r2, r3, #20
 800203e:	d504      	bpl.n	800204a <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
 8002040:	4922      	ldr	r1, [pc, #136]	; (80020cc <bus_fault.isra.0+0xc0>)
 8002042:	f044 0001 	orr.w	r0, r4, #1
 8002046:	f002 f97b 	bl	8004340 <log_string_sync>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 800204a:	4d1d      	ldr	r5, [pc, #116]	; (80020c0 <bus_fault.isra.0+0xb4>)
 800204c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800204e:	059b      	lsls	r3, r3, #22
 8002050:	d512      	bpl.n	8002078 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
 8002052:	f044 0801 	orr.w	r8, r4, #1
 8002056:	491e      	ldr	r1, [pc, #120]	; (80020d0 <bus_fault.isra.0+0xc4>)
 8002058:	4640      	mov	r0, r8
 800205a:	f002 f971 	bl	8004340 <log_string_sync>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
 800205e:	6baa      	ldr	r2, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 8002060:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002062:	0418      	lsls	r0, r3, #16
 8002064:	d508      	bpl.n	8002078 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
 8002066:	491b      	ldr	r1, [pc, #108]	; (80020d4 <bus_fault.isra.0+0xc8>)
 8002068:	4640      	mov	r0, r8
 800206a:	f002 f969 	bl	8004340 <log_string_sync>
			if (from_hard_fault) {
 800206e:	b11f      	cbz	r7, 8002078 <bus_fault.isra.0+0x6c>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 8002070:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002072:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002076:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 8002078:	4d11      	ldr	r5, [pc, #68]	; (80020c0 <bus_fault.isra.0+0xb4>)
 800207a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800207c:	0559      	lsls	r1, r3, #21
 800207e:	d504      	bpl.n	800208a <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
 8002080:	4915      	ldr	r1, [pc, #84]	; (80020d8 <bus_fault.isra.0+0xcc>)
 8002082:	f044 0001 	orr.w	r0, r4, #1
 8002086:	f002 f95b 	bl	8004340 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 800208a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800208c:	05da      	lsls	r2, r3, #23
 800208e:	d50d      	bpl.n	80020ac <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
 8002090:	4912      	ldr	r1, [pc, #72]	; (80020dc <bus_fault.isra.0+0xd0>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
 8002092:	f044 0001 	orr.w	r0, r4, #1
 8002096:	f002 f953 	bl	8004340 <log_string_sync>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 800209a:	4a09      	ldr	r2, [pc, #36]	; (80020c0 <bus_fault.isra.0+0xb4>)

	*recoverable = memory_fault_recoverable(esf);
 800209c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 800209e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80020a0:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 80020a4:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
 80020a6:	7030      	strb	r0, [r6, #0]

	return reason;
}
 80020a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 80020ac:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80020ae:	049b      	lsls	r3, r3, #18
 80020b0:	d5f3      	bpl.n	800209a <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
 80020b2:	490b      	ldr	r1, [pc, #44]	; (80020e0 <bus_fault.isra.0+0xd4>)
 80020b4:	e7ed      	b.n	8002092 <bus_fault.isra.0+0x86>
 80020b6:	bf00      	nop
 80020b8:	08005128 	.word	0x08005128
 80020bc:	08005138 	.word	0x08005138
 80020c0:	e000ed00 	.word	0xe000ed00
 80020c4:	08005744 	.word	0x08005744
 80020c8:	0800575a 	.word	0x0800575a
 80020cc:	080056b5 	.word	0x080056b5
 80020d0:	0800576b 	.word	0x0800576b
 80020d4:	08005784 	.word	0x08005784
 80020d8:	08005799 	.word	0x08005799
 80020dc:	080057b4 	.word	0x080057b4
 80020e0:	08005715 	.word	0x08005715

080020e4 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
 80020e4:	b570      	push	{r4, r5, r6, lr}
 80020e6:	4b23      	ldr	r3, [pc, #140]	; (8002174 <usage_fault.isra.0+0x90>)
 80020e8:	4c23      	ldr	r4, [pc, #140]	; (8002178 <usage_fault.isra.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 80020ea:	4d24      	ldr	r5, [pc, #144]	; (800217c <usage_fault.isra.0+0x98>)
 80020ec:	1ae4      	subs	r4, r4, r3
	PR_FAULT_INFO("***** USAGE FAULT *****");
 80020ee:	4924      	ldr	r1, [pc, #144]	; (8002180 <usage_fault.isra.0+0x9c>)
 80020f0:	08e4      	lsrs	r4, r4, #3
 80020f2:	01a4      	lsls	r4, r4, #6
 80020f4:	f044 0601 	orr.w	r6, r4, #1
 80020f8:	4630      	mov	r0, r6
 80020fa:	f002 f921 	bl	8004340 <log_string_sync>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 80020fe:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8002100:	0193      	lsls	r3, r2, #6
 8002102:	d503      	bpl.n	800210c <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
 8002104:	491f      	ldr	r1, [pc, #124]	; (8002184 <usage_fault.isra.0+0xa0>)
 8002106:	4630      	mov	r0, r6
 8002108:	f002 f91a 	bl	8004340 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 800210c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800210e:	01dd      	lsls	r5, r3, #7
 8002110:	d504      	bpl.n	800211c <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
 8002112:	491d      	ldr	r1, [pc, #116]	; (8002188 <usage_fault.isra.0+0xa4>)
 8002114:	f044 0001 	orr.w	r0, r4, #1
 8002118:	f002 f912 	bl	8004340 <log_string_sync>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 800211c:	4d17      	ldr	r5, [pc, #92]	; (800217c <usage_fault.isra.0+0x98>)
 800211e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8002120:	0310      	lsls	r0, r2, #12
 8002122:	d504      	bpl.n	800212e <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
 8002124:	4919      	ldr	r1, [pc, #100]	; (800218c <usage_fault.isra.0+0xa8>)
 8002126:	f044 0001 	orr.w	r0, r4, #1
 800212a:	f002 f909 	bl	8004340 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 800212e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002130:	0359      	lsls	r1, r3, #13
 8002132:	d504      	bpl.n	800213e <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
 8002134:	4916      	ldr	r1, [pc, #88]	; (8002190 <usage_fault.isra.0+0xac>)
 8002136:	f044 0001 	orr.w	r0, r4, #1
 800213a:	f002 f901 	bl	8004340 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 800213e:	4d0f      	ldr	r5, [pc, #60]	; (800217c <usage_fault.isra.0+0x98>)
 8002140:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8002142:	0392      	lsls	r2, r2, #14
 8002144:	d504      	bpl.n	8002150 <usage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
 8002146:	4913      	ldr	r1, [pc, #76]	; (8002194 <usage_fault.isra.0+0xb0>)
 8002148:	f044 0001 	orr.w	r0, r4, #1
 800214c:	f002 f8f8 	bl	8004340 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8002150:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002152:	03db      	lsls	r3, r3, #15
 8002154:	d504      	bpl.n	8002160 <usage_fault.isra.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
 8002156:	4910      	ldr	r1, [pc, #64]	; (8002198 <usage_fault.isra.0+0xb4>)
 8002158:	f044 0001 	orr.w	r0, r4, #1
 800215c:	f002 f8f0 	bl	8004340 <log_string_sync>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8002160:	4a06      	ldr	r2, [pc, #24]	; (800217c <usage_fault.isra.0+0x98>)

	return reason;
}
 8002162:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8002164:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002166:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 800216a:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 800216e:	6293      	str	r3, [r2, #40]	; 0x28
}
 8002170:	bd70      	pop	{r4, r5, r6, pc}
 8002172:	bf00      	nop
 8002174:	08005128 	.word	0x08005128
 8002178:	08005138 	.word	0x08005138
 800217c:	e000ed00 	.word	0xe000ed00
 8002180:	080057cc 	.word	0x080057cc
 8002184:	080057e4 	.word	0x080057e4
 8002188:	080057f7 	.word	0x080057f7
 800218c:	08005811 	.word	0x08005811
 8002190:	0800582f 	.word	0x0800582f
 8002194:	08005854 	.word	0x08005854
 8002198:	0800586e 	.word	0x0800586e

0800219c <z_arm_fault>:
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 800219c:	4b58      	ldr	r3, [pc, #352]	; (8002300 <z_arm_fault+0x164>)
{
 800219e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 80021a2:	685e      	ldr	r6, [r3, #4]
{
 80021a4:	b08a      	sub	sp, #40	; 0x28
 80021a6:	460f      	mov	r7, r1
 80021a8:	2500      	movs	r5, #0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 80021aa:	f3c6 0408 	ubfx	r4, r6, #0, #9
 80021ae:	f385 8811 	msr	BASEPRI, r5
 80021b2:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 80021b6:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
 80021ba:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 80021be:	d10d      	bne.n	80021dc <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 80021c0:	f002 030c 	and.w	r3, r2, #12
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	d10b      	bne.n	80021e0 <z_arm_fault+0x44>
 80021c8:	484e      	ldr	r0, [pc, #312]	; (8002304 <z_arm_fault+0x168>)
 80021ca:	4b4f      	ldr	r3, [pc, #316]	; (8002308 <z_arm_fault+0x16c>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
 80021cc:	494f      	ldr	r1, [pc, #316]	; (800230c <z_arm_fault+0x170>)
 80021ce:	1ac0      	subs	r0, r0, r3
 80021d0:	08c0      	lsrs	r0, r0, #3
 80021d2:	0180      	lsls	r0, r0, #6
 80021d4:	f040 0001 	orr.w	r0, r0, #1
 80021d8:	f002 f8b2 	bl	8004340 <log_string_sync>
		return NULL;
 80021dc:	462f      	mov	r7, r5
 80021de:	e003      	b.n	80021e8 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 80021e0:	0712      	lsls	r2, r2, #28
 80021e2:	d401      	bmi.n	80021e8 <z_arm_fault+0x4c>
			ptr_esf = (z_arch_esf_t *)msp;
 80021e4:	4607      	mov	r7, r0
			*nested_exc = true;
 80021e6:	2501      	movs	r5, #1
	*recoverable = false;
 80021e8:	2300      	movs	r3, #0
 80021ea:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
 80021ee:	1ee3      	subs	r3, r4, #3
 80021f0:	2b09      	cmp	r3, #9
 80021f2:	d86b      	bhi.n	80022cc <z_arm_fault+0x130>
 80021f4:	e8df f003 	tbb	[pc, r3]
 80021f8:	3d5d5905 	.word	0x3d5d5905
 80021fc:	6a6a6a6a 	.word	0x6a6a6a6a
 8002200:	616a      	.short	0x616a
 8002202:	4b41      	ldr	r3, [pc, #260]	; (8002308 <z_arm_fault+0x16c>)
	*recoverable = false;
 8002204:	f04f 0800 	mov.w	r8, #0
 8002208:	4e3e      	ldr	r6, [pc, #248]	; (8002304 <z_arm_fault+0x168>)
	PR_FAULT_INFO("***** HARD FAULT *****");
 800220a:	4941      	ldr	r1, [pc, #260]	; (8002310 <z_arm_fault+0x174>)
 800220c:	1af6      	subs	r6, r6, r3
 800220e:	08f6      	lsrs	r6, r6, #3
 8002210:	01b6      	lsls	r6, r6, #6
 8002212:	f046 0601 	orr.w	r6, r6, #1
 8002216:	4630      	mov	r0, r6
 8002218:	f002 f892 	bl	8004340 <log_string_sync>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 800221c:	4b38      	ldr	r3, [pc, #224]	; (8002300 <z_arm_fault+0x164>)
	*recoverable = false;
 800221e:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8002222:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8002224:	f014 0402 	ands.w	r4, r4, #2
 8002228:	d005      	beq.n	8002236 <z_arm_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
 800222a:	493a      	ldr	r1, [pc, #232]	; (8002314 <z_arm_fault+0x178>)
 800222c:	4630      	mov	r0, r6
	PR_FAULT_INFO(
 800222e:	f002 f887 	bl	8004340 <log_string_sync>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8002232:	2400      	movs	r4, #0
}
 8002234:	e020      	b.n	8002278 <z_arm_fault+0xdc>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 8002236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	d51d      	bpl.n	8002278 <z_arm_fault+0xdc>
		PR_EXC("  Fault escalation (see below)");
 800223c:	4936      	ldr	r1, [pc, #216]	; (8002318 <z_arm_fault+0x17c>)
 800223e:	4630      	mov	r0, r6
 8002240:	f002 f87e 	bl	8004340 <log_string_sync>
		if (SCB_MMFSR != 0) {
 8002244:	4b35      	ldr	r3, [pc, #212]	; (800231c <z_arm_fault+0x180>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	b133      	cbz	r3, 8002258 <z_arm_fault+0xbc>
			reason = mem_manage_fault(esf, 1, recoverable);
 800224a:	f10d 0207 	add.w	r2, sp, #7
 800224e:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
 8002250:	4638      	mov	r0, r7
 8002252:	f7ff fe5d 	bl	8001f10 <mem_manage_fault>
 8002256:	e00e      	b.n	8002276 <z_arm_fault+0xda>
		} else if (SCB_BFSR != 0) {
 8002258:	4b31      	ldr	r3, [pc, #196]	; (8002320 <z_arm_fault+0x184>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	b12b      	cbz	r3, 800226a <z_arm_fault+0xce>
			reason = bus_fault(esf, 1, recoverable);
 800225e:	f10d 0107 	add.w	r1, sp, #7
 8002262:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
 8002264:	f7ff fed2 	bl	800200c <bus_fault.isra.0>
 8002268:	e005      	b.n	8002276 <z_arm_fault+0xda>
		} else if (SCB_UFSR != 0) {
 800226a:	4b2e      	ldr	r3, [pc, #184]	; (8002324 <z_arm_fault+0x188>)
 800226c:	881b      	ldrh	r3, [r3, #0]
 800226e:	b29b      	uxth	r3, r3
 8002270:	b113      	cbz	r3, 8002278 <z_arm_fault+0xdc>
			reason = usage_fault(esf);
 8002272:	f7ff ff37 	bl	80020e4 <usage_fault.isra.0>
 8002276:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 8002278:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800227c:	b993      	cbnz	r3, 80022a4 <z_arm_fault+0x108>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 800227e:	2220      	movs	r2, #32
 8002280:	4639      	mov	r1, r7
 8002282:	a802      	add	r0, sp, #8
 8002284:	f002 f95e 	bl	8004544 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 8002288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800228a:	b39d      	cbz	r5, 80022f4 <z_arm_fault+0x158>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 800228c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002290:	b922      	cbnz	r2, 800229c <z_arm_fault+0x100>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 8002292:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 8002296:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 800229a:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
 800229c:	a902      	add	r1, sp, #8
 800229e:	4620      	mov	r0, r4
 80022a0:	f7ff fda4 	bl	8001dec <z_arm_fatal_error>
}
 80022a4:	b00a      	add	sp, #40	; 0x28
 80022a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
 80022aa:	f10d 0207 	add.w	r2, sp, #7
 80022ae:	2100      	movs	r1, #0
 80022b0:	e7ce      	b.n	8002250 <z_arm_fault+0xb4>
		reason = bus_fault(esf, 0, recoverable);
 80022b2:	f10d 0107 	add.w	r1, sp, #7
 80022b6:	2000      	movs	r0, #0
 80022b8:	e7d4      	b.n	8002264 <z_arm_fault+0xc8>
 80022ba:	4812      	ldr	r0, [pc, #72]	; (8002304 <z_arm_fault+0x168>)
 80022bc:	4b12      	ldr	r3, [pc, #72]	; (8002308 <z_arm_fault+0x16c>)
	PR_FAULT_INFO(
 80022be:	491a      	ldr	r1, [pc, #104]	; (8002328 <z_arm_fault+0x18c>)
 80022c0:	1ac0      	subs	r0, r0, r3
 80022c2:	08c0      	lsrs	r0, r0, #3
 80022c4:	0180      	lsls	r0, r0, #6
 80022c6:	f040 0001 	orr.w	r0, r0, #1
 80022ca:	e7b0      	b.n	800222e <z_arm_fault+0x92>
 80022cc:	4b0e      	ldr	r3, [pc, #56]	; (8002308 <z_arm_fault+0x16c>)
	PR_FAULT_INFO("***** %s %d) *****",
 80022ce:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
 80022d2:	480c      	ldr	r0, [pc, #48]	; (8002304 <z_arm_fault+0x168>)
 80022d4:	4915      	ldr	r1, [pc, #84]	; (800232c <z_arm_fault+0x190>)
 80022d6:	eba0 0003 	sub.w	r0, r0, r3
 80022da:	4a15      	ldr	r2, [pc, #84]	; (8002330 <z_arm_fault+0x194>)
 80022dc:	f1a4 0310 	sub.w	r3, r4, #16
 80022e0:	bf08      	it	eq
 80022e2:	460a      	moveq	r2, r1
 80022e4:	08c0      	lsrs	r0, r0, #3
 80022e6:	4913      	ldr	r1, [pc, #76]	; (8002334 <z_arm_fault+0x198>)
 80022e8:	0180      	lsls	r0, r0, #6
 80022ea:	f040 0001 	orr.w	r0, r0, #1
 80022ee:	f002 f827 	bl	8004340 <log_string_sync>
 80022f2:	e79e      	b.n	8002232 <z_arm_fault+0x96>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 80022f4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80022f8:	f023 0301 	bic.w	r3, r3, #1
 80022fc:	e7cd      	b.n	800229a <z_arm_fault+0xfe>
 80022fe:	bf00      	nop
 8002300:	e000ed00 	.word	0xe000ed00
 8002304:	08005138 	.word	0x08005138
 8002308:	08005128 	.word	0x08005128
 800230c:	080058c7 	.word	0x080058c7
 8002310:	080058f2 	.word	0x080058f2
 8002314:	08005909 	.word	0x08005909
 8002318:	0800592a 	.word	0x0800592a
 800231c:	e000ed28 	.word	0xe000ed28
 8002320:	e000ed29 	.word	0xe000ed29
 8002324:	e000ed2a 	.word	0xe000ed2a
 8002328:	08005949 	.word	0x08005949
 800232c:	08005899 	.word	0x08005899
 8002330:	080058ae 	.word	0x080058ae
 8002334:	0800597f 	.word	0x0800597f

08002338 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 8002338:	4a02      	ldr	r2, [pc, #8]	; (8002344 <z_arm_fault_init+0xc>)
 800233a:	6953      	ldr	r3, [r2, #20]
 800233c:	f043 0310 	orr.w	r3, r3, #16
 8002340:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
 8002342:	4770      	bx	lr
 8002344:	e000ed00 	.word	0xe000ed00

08002348 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 8002348:	4b04      	ldr	r3, [pc, #16]	; (800235c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 800234a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 800234c:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
 800234e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 8002350:	d003      	beq.n	800235a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 8002352:	4903      	ldr	r1, [pc, #12]	; (8002360 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 8002354:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 8002358:	600a      	str	r2, [r1, #0]

0800235a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 800235a:	4770      	bx	lr
	ldr r3, =_kernel
 800235c:	240003bc 	.word	0x240003bc
	ldr r1, =_SCS_ICSR
 8002360:	e000ed04 	.word	0xe000ed04

08002364 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 8002364:	2300      	movs	r3, #0
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002366:	4804      	ldr	r0, [pc, #16]	; (8002378 <z_arm_interrupt_init+0x14>)
 8002368:	2110      	movs	r1, #16
 800236a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 800236c:	3301      	adds	r3, #1
 800236e:	2b96      	cmp	r3, #150	; 0x96
 8002370:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 8002374:	d1f9      	bne.n	800236a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 8002376:	4770      	bx	lr
 8002378:	e000e100 	.word	0xe000e100

0800237c <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
 800237c:	b508      	push	{r3, lr}
	if (_current == thread) {
 800237e:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <z_impl_k_thread_abort+0x3c>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	4283      	cmp	r3, r0
 8002384:	d107      	bne.n	8002396 <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002386:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 800238a:	b193      	cbz	r3, 80023b2 <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800238c:	4a0b      	ldr	r2, [pc, #44]	; (80023bc <z_impl_k_thread_abort+0x40>)
 800238e:	6853      	ldr	r3, [r2, #4]
 8002390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002394:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
 8002396:	f001 fb65 	bl	8003a64 <z_thread_single_abort>
	__asm__ volatile(
 800239a:	f04f 0310 	mov.w	r3, #16
 800239e:	f3ef 8011 	mrs	r0, BASEPRI
 80023a2:	f383 8811 	msr	BASEPRI, r3
 80023a6:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
 80023aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
 80023ae:	f002 baff 	b.w	80049b0 <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
 80023b2:	f001 fd3f 	bl	8003e34 <z_self_abort>
 80023b6:	bf00      	nop
 80023b8:	240003bc 	.word	0x240003bc
 80023bc:	e000ed00 	.word	0xe000ed00

080023c0 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
 80023c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (uint32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
 80023c2:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <z_arm_configure_static_mpu_regions+0x24>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 80023c4:	2101      	movs	r1, #1
 80023c6:	4a08      	ldr	r2, [pc, #32]	; (80023e8 <z_arm_configure_static_mpu_regions+0x28>)
 80023c8:	4668      	mov	r0, sp
		const struct k_mem_partition ramfunc_region =
 80023ca:	9301      	str	r3, [sp, #4]
 80023cc:	4b07      	ldr	r3, [pc, #28]	; (80023ec <z_arm_configure_static_mpu_regions+0x2c>)
 80023ce:	9302      	str	r3, [sp, #8]
 80023d0:	4b07      	ldr	r3, [pc, #28]	; (80023f0 <z_arm_configure_static_mpu_regions+0x30>)
 80023d2:	9303      	str	r3, [sp, #12]
	const struct k_mem_partition *static_regions[] = {
 80023d4:	ab01      	add	r3, sp, #4
 80023d6:	9300      	str	r3, [sp, #0]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 80023d8:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <z_arm_configure_static_mpu_regions+0x34>)
 80023da:	f000 f8c1 	bl	8002560 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
 80023de:	b005      	add	sp, #20
 80023e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80023e4:	24000000 	.word	0x24000000
 80023e8:	24000000 	.word	0x24000000
 80023ec:	00000000 	.word	0x00000000
 80023f0:	060b0000 	.word	0x060b0000
 80023f4:	24080000 	.word	0x24080000

080023f8 <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
 80023f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	__ASSERT((uint32_t)thread->stack_obj == guard_start,
		"Guard start (0x%x) not beginning at stack object (0x%x)\n",
		guard_start, (uint32_t)thread->stack_obj);
	}
#else
	guard_start = thread->stack_info.start - guard_size;
 80023fa:	6e83      	ldr	r3, [r0, #104]	; 0x68
#endif /* CONFIG_USERSPACE */

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");
	guard = (const struct k_mem_partition)
 80023fc:	2220      	movs	r2, #32

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
 80023fe:	2101      	movs	r1, #1
 8002400:	4668      	mov	r0, sp
	guard_start = thread->stack_info.start - guard_size;
 8002402:	3b20      	subs	r3, #32
	guard = (const struct k_mem_partition)
 8002404:	9301      	str	r3, [sp, #4]
 8002406:	4b05      	ldr	r3, [pc, #20]	; (800241c <z_arm_configure_dynamic_mpu_regions+0x24>)
 8002408:	e9cd 2302 	strd	r2, r3, [sp, #8]
	dynamic_regions[region_num] = &guard;
 800240c:	ab01      	add	r3, sp, #4
 800240e:	9300      	str	r3, [sp, #0]
	arm_core_mpu_configure_dynamic_mpu_regions(
 8002410:	f000 f8b0 	bl	8002574 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
 8002414:	b005      	add	sp, #20
 8002416:	f85d fb04 	ldr.w	pc, [sp], #4
 800241a:	bf00      	nop
 800241c:	150b0000 	.word	0x150b0000

08002420 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
	*regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 8002420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
 8002422:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 80024dc <mpu_configure_regions+0xbc>
 8002426:	4606      	mov	r6, r0
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
 8002428:	2700      	movs	r7, #0
	int reg_index = start_reg_index;
 800242a:	4610      	mov	r0, r2
	for (i = 0; i < regions_num; i++) {
 800242c:	428f      	cmp	r7, r1
 800242e:	da16      	bge.n	800245e <mpu_configure_regions+0x3e>
		if (regions[i]->size == 0U) {
 8002430:	f856 e027 	ldr.w	lr, [r6, r7, lsl #2]
 8002434:	f8de 4004 	ldr.w	r4, [lr, #4]
 8002438:	2c00      	cmp	r4, #0
 800243a:	d044      	beq.n	80024c6 <mpu_configure_regions+0xa6>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
 800243c:	b1b3      	cbz	r3, 800246c <mpu_configure_regions+0x4c>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
 800243e:	1e65      	subs	r5, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
 8002440:	422c      	tst	r4, r5
 8002442:	d00d      	beq.n	8002460 <mpu_configure_regions+0x40>
 8002444:	4821      	ldr	r0, [pc, #132]	; (80024cc <mpu_configure_regions+0xac>)
				(!mpu_partition_is_valid(regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
 8002446:	463a      	mov	r2, r7
 8002448:	4b21      	ldr	r3, [pc, #132]	; (80024d0 <mpu_configure_regions+0xb0>)
 800244a:	4922      	ldr	r1, [pc, #136]	; (80024d4 <mpu_configure_regions+0xb4>)
 800244c:	1ac0      	subs	r0, r0, r3
 800244e:	08c0      	lsrs	r0, r0, #3
 8002450:	0180      	lsls	r0, r0, #6
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 8002452:	f040 0001 	orr.w	r0, r0, #1
 8002456:	f001 ff73 	bl	8004340 <log_string_sync>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, regions[i]);
 800245a:	f06f 0015 	mvn.w	r0, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
 800245e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
 8002460:	2c1f      	cmp	r4, #31
 8002462:	d9ef      	bls.n	8002444 <mpu_configure_regions+0x24>
		((part->start & (part->size - 1U)) == 0U);
 8002464:	f8de 2000 	ldr.w	r2, [lr]
		&&
 8002468:	4215      	tst	r5, r2
 800246a:	d1eb      	bne.n	8002444 <mpu_configure_regions+0x24>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
 800246c:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, regions[i]);
 800246e:	b2c2      	uxtb	r2, r0
	region_conf.base = new_region->start;
 8002470:	f8de 5000 	ldr.w	r5, [lr]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
 8002474:	f8de 0008 	ldr.w	r0, [lr, #8]
 8002478:	d913      	bls.n	80024a2 <mpu_configure_regions+0x82>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
 800247a:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 800247e:	d812      	bhi.n	80024a6 <mpu_configure_regions+0x86>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 8002480:	3c01      	subs	r4, #1
 8002482:	fab4 f484 	clz	r4, r4
 8002486:	f1c4 041f 	rsb	r4, r4, #31
 800248a:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
 800248c:	2a0f      	cmp	r2, #15
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 800248e:	ea44 0400 	orr.w	r4, r4, r0
 8002492:	d90a      	bls.n	80024aa <mpu_configure_regions+0x8a>
 8002494:	480d      	ldr	r0, [pc, #52]	; (80024cc <mpu_configure_regions+0xac>)
 8002496:	4b0e      	ldr	r3, [pc, #56]	; (80024d0 <mpu_configure_regions+0xb0>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 8002498:	490f      	ldr	r1, [pc, #60]	; (80024d8 <mpu_configure_regions+0xb8>)
 800249a:	1ac0      	subs	r0, r0, r3
 800249c:	08c0      	lsrs	r0, r0, #3
 800249e:	0180      	lsls	r0, r0, #6
 80024a0:	e7d7      	b.n	8002452 <mpu_configure_regions+0x32>
		return REGION_32B;
 80024a2:	2408      	movs	r4, #8
 80024a4:	e7f2      	b.n	800248c <mpu_configure_regions+0x6c>
		return REGION_4G;
 80024a6:	243e      	movs	r4, #62	; 0x3e
 80024a8:	e7f0      	b.n	800248c <mpu_configure_regions+0x6c>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80024aa:	f025 051f 	bic.w	r5, r5, #31
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 80024ae:	f044 0401 	orr.w	r4, r4, #1
		reg_index++;
 80024b2:	1c50      	adds	r0, r2, #1
	MPU->RNR = index;
 80024b4:	f8cc 2008 	str.w	r2, [ip, #8]
				| MPU_RBAR_VALID_Msk | index;
 80024b8:	4315      	orrs	r5, r2
 80024ba:	f045 0510 	orr.w	r5, r5, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80024be:	f8cc 500c 	str.w	r5, [ip, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 80024c2:	f8cc 4010 	str.w	r4, [ip, #16]
	for (i = 0; i < regions_num; i++) {
 80024c6:	3701      	adds	r7, #1
 80024c8:	e7b0      	b.n	800242c <mpu_configure_regions+0xc>
 80024ca:	bf00      	nop
 80024cc:	08005130 	.word	0x08005130
 80024d0:	08005128 	.word	0x08005128
 80024d4:	08005996 	.word	0x08005996
 80024d8:	080059b9 	.word	0x080059b9
 80024dc:	e000ed90 	.word	0xe000ed90

080024e0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 80024e0:	4b03      	ldr	r3, [pc, #12]	; (80024f0 <arm_core_mpu_enable+0x10>)
 80024e2:	2205      	movs	r2, #5
 80024e4:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 80024e6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80024ea:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 80024ee:	4770      	bx	lr
 80024f0:	e000ed90 	.word	0xe000ed90

080024f4 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80024f4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 80024f8:	4b01      	ldr	r3, [pc, #4]	; (8002500 <arm_core_mpu_disable+0xc>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	605a      	str	r2, [r3, #4]
}
 80024fe:	4770      	bx	lr
 8002500:	e000ed90 	.word	0xe000ed90

08002504 <arm_mpu_init>:
 */
static int arm_mpu_init(const struct device *arg)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 8002504:	4913      	ldr	r1, [pc, #76]	; (8002554 <arm_mpu_init+0x50>)
 8002506:	6808      	ldr	r0, [r1, #0]
 8002508:	2810      	cmp	r0, #16
{
 800250a:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
 800250c:	d81e      	bhi.n	800254c <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 800250e:	f7ff fff1 	bl	80024f4 <arm_core_mpu_disable>
	MPU->RNR = index;
 8002512:	4c11      	ldr	r4, [pc, #68]	; (8002558 <arm_mpu_init+0x54>)
 8002514:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8002516:	2200      	movs	r2, #0
 8002518:	4290      	cmp	r0, r2
 800251a:	f101 010c 	add.w	r1, r1, #12
 800251e:	d105      	bne.n	800252c <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 8002520:	4b0e      	ldr	r3, [pc, #56]	; (800255c <arm_mpu_init+0x58>)
 8002522:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
 8002524:	f7ff ffdc 	bl	80024e0 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
 8002528:	2000      	movs	r0, #0
}
 800252a:	bd10      	pop	{r4, pc}
 800252c:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 800252e:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 8002532:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 8002536:	4313      	orrs	r3, r2
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8002538:	3201      	adds	r2, #1
 800253a:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 800253e:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8002540:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002544:	f043 0301 	orr.w	r3, r3, #1
 8002548:	6123      	str	r3, [r4, #16]
 800254a:	e7e5      	b.n	8002518 <arm_mpu_init+0x14>
		return -1;
 800254c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002550:	e7eb      	b.n	800252a <arm_mpu_init+0x26>
 8002552:	bf00      	nop
 8002554:	080051f0 	.word	0x080051f0
 8002558:	e000ed90 	.word	0xe000ed90
 800255c:	240003ff 	.word	0x240003ff

08002560 <arm_core_mpu_configure_static_mpu_regions>:
{
 8002560:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 8002562:	4c03      	ldr	r4, [pc, #12]	; (8002570 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 8002564:	2301      	movs	r3, #1
 8002566:	7822      	ldrb	r2, [r4, #0]
 8002568:	f7ff ff5a 	bl	8002420 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 800256c:	7020      	strb	r0, [r4, #0]
}
 800256e:	bd10      	pop	{r4, pc}
 8002570:	240003ff 	.word	0x240003ff

08002574 <arm_core_mpu_configure_dynamic_mpu_regions>:

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 8002574:	4a08      	ldr	r2, [pc, #32]	; (8002598 <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
{
 8002576:	b508      	push	{r3, lr}
 8002578:	2300      	movs	r3, #0
 800257a:	7812      	ldrb	r2, [r2, #0]
 800257c:	f7ff ff50 	bl	8002420 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 8002580:	f110 0f16 	cmn.w	r0, #22
 8002584:	d003      	beq.n	800258e <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 8002586:	4b05      	ldr	r3, [pc, #20]	; (800259c <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
 8002588:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 800258a:	280f      	cmp	r0, #15
 800258c:	dd00      	ble.n	8002590 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
}
 800258e:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
 8002590:	6098      	str	r0, [r3, #8]
 8002592:	3001      	adds	r0, #1
  MPU->RASR = 0U;
 8002594:	611a      	str	r2, [r3, #16]
 8002596:	e7f8      	b.n	800258a <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
 8002598:	240003ff 	.word	0x240003ff
 800259c:	e000ed90 	.word	0xe000ed90

080025a0 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 80025a0:	4b01      	ldr	r3, [pc, #4]	; (80025a8 <__stdout_hook_install+0x8>)
 80025a2:	6018      	str	r0, [r3, #0]
}
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	2400001c 	.word	0x2400001c

080025ac <gpio_stm32_pin_interrupt_configure>:

static int gpio_stm32_pin_interrupt_configure(const struct device *dev,
					      gpio_pin_t pin,
					      enum gpio_int_mode mode,
					      enum gpio_int_trig trig)
{
 80025ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80025b0:	460c      	mov	r4, r1
 80025b2:	4611      	mov	r1, r2
 80025b4:	461e      	mov	r6, r3
	const struct gpio_stm32_config *cfg = dev->config;
 80025b6:	6847      	ldr	r7, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
	int edge = 0;
	int err = 0;

	if (mode == GPIO_INT_MODE_DISABLED) {
 80025b8:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
	struct gpio_stm32_data *data = dev->data;
 80025bc:	68c2      	ldr	r2, [r0, #12]
	if (mode == GPIO_INT_MODE_DISABLED) {
 80025be:	d127      	bne.n	8002610 <gpio_stm32_pin_interrupt_configure+0x64>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 80025c0:	f004 0203 	and.w	r2, r4, #3
  *         @arg @ref LL_SYSCFG_EXTI_PORTK
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U)) >> (POSITION_VAL(Line >> 16U) & 31U));
 80025c4:	4941      	ldr	r1, [pc, #260]	; (80026cc <gpio_stm32_pin_interrupt_configure+0x120>)
 80025c6:	3204      	adds	r2, #4
 80025c8:	0093      	lsls	r3, r2, #2
 80025ca:	220f      	movs	r2, #15
 80025cc:	409a      	lsls	r2, r3
 80025ce:	ea42 0294 	orr.w	r2, r2, r4, lsr #2
 80025d2:	f002 0303 	and.w	r3, r2, #3
 80025d6:	3302      	adds	r3, #2
 80025d8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80025dc:	0c13      	lsrs	r3, r2, #16
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025de:	fa93 f3a3 	rbit	r3, r3
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 80025e2:	fab3 f383 	clz	r3, r3
 80025e6:	ea01 4212 	and.w	r2, r1, r2, lsr #16
 80025ea:	f003 031f 	and.w	r3, r3, #31
 80025ee:	fa22 f303 	lsr.w	r3, r2, r3
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 80025f2:	68ba      	ldr	r2, [r7, #8]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d109      	bne.n	800260c <gpio_stm32_pin_interrupt_configure+0x60>
			stm32_exti_disable(pin);
 80025f8:	4620      	mov	r0, r4
 80025fa:	f001 ff45 	bl	8004488 <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 80025fe:	4620      	mov	r0, r4
 8002600:	f7fe ffc6 	bl	8001590 <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 8002604:	2100      	movs	r1, #0
 8002606:	4620      	mov	r0, r4
 8002608:	f001 ff4c 	bl	80044a4 <stm32_exti_trigger>
	int err = 0;
 800260c:	2500      	movs	r5, #0
 800260e:	e04e      	b.n	80026ae <gpio_stm32_pin_interrupt_configure+0x102>
		/* else: No irq source configured for pin. Nothing to disable */
		goto exit;
	}

	/* Level trigger interrupts not supported */
	if (mode == GPIO_INT_MODE_LEVEL) {
 8002610:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8002614:	d053      	beq.n	80026be <gpio_stm32_pin_interrupt_configure+0x112>
		err = -ENOTSUP;
		goto exit;
	}

	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 8002616:	492e      	ldr	r1, [pc, #184]	; (80026d0 <gpio_stm32_pin_interrupt_configure+0x124>)
 8002618:	4620      	mov	r0, r4
 800261a:	f7fe ffa7 	bl	800156c <stm32_exti_set_callback>
 800261e:	4605      	mov	r5, r0
 8002620:	2800      	cmp	r0, #0
 8002622:	d14f      	bne.n	80026c4 <gpio_stm32_pin_interrupt_configure+0x118>
		err = -EBUSY;
		goto exit;
	}

	gpio_stm32_enable_int(cfg->port, pin);
 8002624:	68bf      	ldr	r7, [r7, #8]
 8002626:	482b      	ldr	r0, [pc, #172]	; (80026d4 <gpio_stm32_pin_interrupt_configure+0x128>)
 8002628:	f000 febc 	bl	80033a4 <z_impl_device_get_binding>
	struct stm32_pclken pclken = {
 800262c:	492a      	ldr	r1, [pc, #168]	; (80026d8 <gpio_stm32_pin_interrupt_configure+0x12c>)
 800262e:	4603      	mov	r3, r0
 8002630:	466a      	mov	r2, sp
 8002632:	c903      	ldmia	r1, {r0, r1}
 8002634:	e882 0003 	stmia.w	r2, {r0, r1}
 8002638:	6899      	ldr	r1, [r3, #8]
 800263a:	4618      	mov	r0, r3
 800263c:	f8d1 8000 	ldr.w	r8, [r1]
 8002640:	4611      	mov	r1, r2
 8002642:	47c0      	blx	r8
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8002644:	f004 0303 	and.w	r3, r4, #3

	switch (trig) {
 8002648:	f5b6 2f80 	cmp.w	r6, #262144	; 0x40000
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 800264c:	f103 0304 	add.w	r3, r3, #4
 8002650:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8002654:	f04f 030f 	mov.w	r3, #15
 8002658:	fa03 f302 	lsl.w	r3, r3, r2
 800265c:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << ((POSITION_VAL(Line >> 16U)) & 31U));
 8002660:	f003 0203 	and.w	r2, r3, #3
 8002664:	ea4f 4113 	mov.w	r1, r3, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002668:	fa91 f1a1 	rbit	r1, r1
 800266c:	ea4f 0282 	mov.w	r2, r2, lsl #2
  return __builtin_clz(value);
 8002670:	fab1 f181 	clz	r1, r1
 8002674:	f102 42b0 	add.w	r2, r2, #1476395008	; 0x58000000
 8002678:	f001 011f 	and.w	r1, r1, #31
 800267c:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 8002680:	fa07 f101 	lsl.w	r1, r7, r1
 8002684:	ea20 4313 	bic.w	r3, r0, r3, lsr #16
 8002688:	ea41 0103 	orr.w	r1, r1, r3
 800268c:	f8c2 1408 	str.w	r1, [r2, #1032]	; 0x408
	switch (trig) {
 8002690:	d011      	beq.n	80026b6 <gpio_stm32_pin_interrupt_configure+0x10a>
 8002692:	f5b6 2fc0 	cmp.w	r6, #393216	; 0x60000
 8002696:	d010      	beq.n	80026ba <gpio_stm32_pin_interrupt_configure+0x10e>
 8002698:	f5b6 3f00 	cmp.w	r6, #131072	; 0x20000
 800269c:	bf14      	ite	ne
 800269e:	2100      	movne	r1, #0
 80026a0:	2102      	moveq	r1, #2
	case GPIO_INT_TRIG_BOTH:
		edge = STM32_EXTI_TRIG_BOTH;
		break;
	}

	stm32_exti_trigger(pin, edge);
 80026a2:	4620      	mov	r0, r4
 80026a4:	f001 fefe 	bl	80044a4 <stm32_exti_trigger>

	stm32_exti_enable(pin);
 80026a8:	4620      	mov	r0, r4
 80026aa:	f7fe ff4f 	bl	800154c <stm32_exti_enable>

exit:
	return err;
}
 80026ae:	4628      	mov	r0, r5
 80026b0:	b002      	add	sp, #8
 80026b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		edge = STM32_EXTI_TRIG_RISING;
 80026b6:	2101      	movs	r1, #1
 80026b8:	e7f3      	b.n	80026a2 <gpio_stm32_pin_interrupt_configure+0xf6>
		edge = STM32_EXTI_TRIG_BOTH;
 80026ba:	2103      	movs	r1, #3
 80026bc:	e7f1      	b.n	80026a2 <gpio_stm32_pin_interrupt_configure+0xf6>
		err = -ENOTSUP;
 80026be:	f06f 0522 	mvn.w	r5, #34	; 0x22
 80026c2:	e7f4      	b.n	80026ae <gpio_stm32_pin_interrupt_configure+0x102>
		err = -EBUSY;
 80026c4:	f06f 050f 	mvn.w	r5, #15
	return err;
 80026c8:	e7f1      	b.n	80026ae <gpio_stm32_pin_interrupt_configure+0x102>
 80026ca:	bf00      	nop
 80026cc:	58000400 	.word	0x58000400
 80026d0:	080045e7 	.word	0x080045e7
 80026d4:	080055ad 	.word	0x080055ad
 80026d8:	08005160 	.word	0x08005160

080026dc <gpio_stm32_init>:
static int gpio_stm32_init(const struct device *device)
{
	const struct gpio_stm32_config *cfg = device->config;
	struct gpio_stm32_data *data = device->data;

	data->dev = device;
 80026dc:	68c3      	ldr	r3, [r0, #12]
{
 80026de:	b510      	push	{r4, lr}
	const struct gpio_stm32_config *cfg = device->config;
 80026e0:	6844      	ldr	r4, [r0, #4]
	data->dev = device;
 80026e2:	6058      	str	r0, [r3, #4]
 80026e4:	4806      	ldr	r0, [pc, #24]	; (8002700 <gpio_stm32_init+0x24>)
 80026e6:	f000 fe5d 	bl	80033a4 <z_impl_device_get_binding>
 80026ea:	6883      	ldr	r3, [r0, #8]
 80026ec:	f104 010c 	add.w	r1, r4, #12
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4798      	blx	r3

	/* enable clock for subsystem */
	const struct device *clk =
		device_get_binding(STM32_CLOCK_CONTROL_NAME);

	if (clock_control_on(clk,
 80026f4:	2800      	cmp	r0, #0
		z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);
	}
#endif  /* PWR_CR2_IOSV */

	return 0;
}
 80026f6:	bf18      	it	ne
 80026f8:	f06f 0004 	mvnne.w	r0, #4
 80026fc:	bd10      	pop	{r4, pc}
 80026fe:	bf00      	nop
 8002700:	080055ad 	.word	0x080055ad

08002704 <pwm_stm32_pin_set>:
{
	const struct pwm_stm32_config *cfg = dev->config;

	uint32_t channel;

	if (pwm < 1u || pwm > TIMER_MAX_CH) {
 8002704:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
 8002708:	f1bc 0f05 	cmp.w	ip, #5
{
 800270c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002710:	4615      	mov	r5, r2
 8002712:	b089      	sub	sp, #36	; 0x24
 8002714:	4699      	mov	r9, r3
	const struct pwm_stm32_config *cfg = dev->config;
 8002716:	6847      	ldr	r7, [r0, #4]
	if (pwm < 1u || pwm > TIMER_MAX_CH) {
 8002718:	d90f      	bls.n	800273a <pwm_stm32_pin_set+0x36>
 800271a:	4868      	ldr	r0, [pc, #416]	; (80028bc <pwm_stm32_pin_set+0x1b8>)
		LOG_ERR("Invalid channel (%d)", pwm);
 800271c:	460a      	mov	r2, r1
 800271e:	4b68      	ldr	r3, [pc, #416]	; (80028c0 <pwm_stm32_pin_set+0x1bc>)
 8002720:	4968      	ldr	r1, [pc, #416]	; (80028c4 <pwm_stm32_pin_set+0x1c0>)
 8002722:	1ac0      	subs	r0, r0, r3
 8002724:	08c0      	lsrs	r0, r0, #3
 8002726:	0180      	lsls	r0, r0, #6
 8002728:	f040 0001 	orr.w	r0, r0, #1
 800272c:	f001 fe08 	bl	8004340 <log_string_sync>
		return -EINVAL;
	}

	if (pulse_cycles > period_cycles) {
		LOG_ERR("Invalid combination of pulse and period cycles");
		return -EINVAL;
 8002730:	f06f 0015 	mvn.w	r0, #21
	}



	return 0;
}
 8002734:	b009      	add	sp, #36	; 0x24
 8002736:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (pulse_cycles > period_cycles) {
 800273a:	4293      	cmp	r3, r2
 800273c:	d90a      	bls.n	8002754 <pwm_stm32_pin_set+0x50>
 800273e:	4b60      	ldr	r3, [pc, #384]	; (80028c0 <pwm_stm32_pin_set+0x1bc>)
 8002740:	485e      	ldr	r0, [pc, #376]	; (80028bc <pwm_stm32_pin_set+0x1b8>)
		LOG_ERR("Invalid combination of pulse and period cycles");
 8002742:	4961      	ldr	r1, [pc, #388]	; (80028c8 <pwm_stm32_pin_set+0x1c4>)
 8002744:	1ac0      	subs	r0, r0, r3
 8002746:	08c0      	lsrs	r0, r0, #3
 8002748:	0180      	lsls	r0, r0, #6
 800274a:	f040 0001 	orr.w	r0, r0, #1
 800274e:	f001 fdf7 	bl	8004340 <log_string_sync>
 8002752:	e7ed      	b.n	8002730 <pwm_stm32_pin_set+0x2c>
	if (!IS_TIM_32B_COUNTER_INSTANCE(cfg->timer) &&
 8002754:	6838      	ldr	r0, [r7, #0]
 8002756:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800275a:	d006      	beq.n	800276a <pwm_stm32_pin_set+0x66>
 800275c:	4b5b      	ldr	r3, [pc, #364]	; (80028cc <pwm_stm32_pin_set+0x1c8>)
 800275e:	4298      	cmp	r0, r3
 8002760:	d003      	beq.n	800276a <pwm_stm32_pin_set+0x66>
 8002762:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002766:	f200 80a6 	bhi.w	80028b6 <pwm_stm32_pin_set+0x1b2>
	channel = ch2ll[pwm - 1u];
 800276a:	4b59      	ldr	r3, [pc, #356]	; (80028d0 <pwm_stm32_pin_set+0x1cc>)
 800276c:	f853 402c 	ldr.w	r4, [r3, ip, lsl #2]
	if (period_cycles == 0u) {
 8002770:	b92d      	cbnz	r5, 800277e <pwm_stm32_pin_set+0x7a>
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
  CLEAR_BIT(TIMx->CCER, Channels);
 8002772:	6a01      	ldr	r1, [r0, #32]
 8002774:	ea21 0104 	bic.w	r1, r1, r4
 8002778:	6201      	str	r1, [r0, #32]
	return 0;
 800277a:	2000      	movs	r0, #0
}
 800277c:	e7da      	b.n	8002734 <pwm_stm32_pin_set+0x30>
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_CC_IsEnabledChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 800277e:	6a03      	ldr	r3, [r0, #32]
 8002780:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 8002784:	ea34 0303 	bics.w	r3, r4, r3
 8002788:	f006 0601 	and.w	r6, r6, #1
 800278c:	d105      	bne.n	800279a <pwm_stm32_pin_set+0x96>
  *         @arg @ref LL_TIM_OCPOLARITY_LOW
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
{
   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800278e:	2c01      	cmp	r4, #1
	return LL_TIM_OCPOLARITY_LOW;
 8002790:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8002794:	d15c      	bne.n	8002850 <pwm_stm32_pin_set+0x14c>
 8002796:	2200      	movs	r2, #0
 8002798:	e06e      	b.n	8002878 <pwm_stm32_pin_set+0x174>
		LL_TIM_OC_StructInit(&oc_init);
 800279a:	4668      	mov	r0, sp
		oc_init.OCState = LL_TIM_OCSTATE_ENABLE;
 800279c:	f04f 0801 	mov.w	r8, #1
		LL_TIM_OC_StructInit(&oc_init);
 80027a0:	f002 f8f3 	bl	800498a <LL_TIM_OC_StructInit>
		oc_init.OCState = LL_TIM_OCSTATE_ENABLE;
 80027a4:	2360      	movs	r3, #96	; 0x60
		return LL_TIM_OCPOLARITY_HIGH;
 80027a6:	fa06 f608 	lsl.w	r6, r6, r8
		if (LL_TIM_OC_Init(cfg->timer, channel, &oc_init) != SUCCESS) {
 80027aa:	466a      	mov	r2, sp
 80027ac:	4621      	mov	r1, r4
 80027ae:	6838      	ldr	r0, [r7, #0]
		oc_init.CompareValue = pulse_cycles;
 80027b0:	f8cd 900c 	str.w	r9, [sp, #12]
		oc_init.OCPolarity = get_polarity(flags);
 80027b4:	9604      	str	r6, [sp, #16]
		oc_init.OCState = LL_TIM_OCSTATE_ENABLE;
 80027b6:	e9cd 3800 	strd	r3, r8, [sp]
		oc_init.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 80027ba:	2300      	movs	r3, #0
 80027bc:	9306      	str	r3, [sp, #24]
		if (LL_TIM_OC_Init(cfg->timer, channel, &oc_init) != SUCCESS) {
 80027be:	f000 fbc3 	bl	8002f48 <LL_TIM_OC_Init>
 80027c2:	b160      	cbz	r0, 80027de <pwm_stm32_pin_set+0xda>
 80027c4:	4b3e      	ldr	r3, [pc, #248]	; (80028c0 <pwm_stm32_pin_set+0x1bc>)
 80027c6:	483d      	ldr	r0, [pc, #244]	; (80028bc <pwm_stm32_pin_set+0x1b8>)
			LOG_ERR("Could not initialize timer channel output");
 80027c8:	4942      	ldr	r1, [pc, #264]	; (80028d4 <pwm_stm32_pin_set+0x1d0>)
 80027ca:	1ac0      	subs	r0, r0, r3
 80027cc:	08c0      	lsrs	r0, r0, #3
 80027ce:	0180      	lsls	r0, r0, #6
 80027d0:	ea40 0008 	orr.w	r0, r0, r8
 80027d4:	f001 fdb4 	bl	8004340 <log_string_sync>
			return -EIO;
 80027d8:	f06f 0004 	mvn.w	r0, #4
 80027dc:	e7aa      	b.n	8002734 <pwm_stm32_pin_set+0x30>
		LL_TIM_EnableARRPreload(cfg->timer);
 80027de:	683b      	ldr	r3, [r7, #0]
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80027e0:	2c01      	cmp	r4, #1
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027e8:	601a      	str	r2, [r3, #0]
   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80027ea:	d013      	beq.n	8002814 <pwm_stm32_pin_set+0x110>
 80027ec:	2c04      	cmp	r4, #4
 80027ee:	d023      	beq.n	8002838 <pwm_stm32_pin_set+0x134>
 80027f0:	2c10      	cmp	r4, #16
 80027f2:	d023      	beq.n	800283c <pwm_stm32_pin_set+0x138>
 80027f4:	2c40      	cmp	r4, #64	; 0x40
 80027f6:	d023      	beq.n	8002840 <pwm_stm32_pin_set+0x13c>
 80027f8:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 80027fc:	d022      	beq.n	8002844 <pwm_stm32_pin_set+0x140>
 80027fe:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8002802:	d021      	beq.n	8002848 <pwm_stm32_pin_set+0x144>
 8002804:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8002808:	d020      	beq.n	800284c <pwm_stm32_pin_set+0x148>
 800280a:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 800280e:	bf0c      	ite	eq
 8002810:	2007      	moveq	r0, #7
 8002812:	2008      	movne	r0, #8
   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002814:	4a30      	ldr	r2, [pc, #192]	; (80028d8 <pwm_stm32_pin_set+0x1d4>)
 8002816:	f103 0118 	add.w	r1, r3, #24
		LL_TIM_SetAutoReload(cfg->timer, period_cycles - 1u);
 800281a:	3d01      	subs	r5, #1
 800281c:	5c14      	ldrb	r4, [r2, r0]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800281e:	4a2f      	ldr	r2, [pc, #188]	; (80028dc <pwm_stm32_pin_set+0x1d8>)
 8002820:	5866      	ldr	r6, [r4, r1]
 8002822:	5c10      	ldrb	r0, [r2, r0]
 8002824:	2208      	movs	r2, #8
 8002826:	4082      	lsls	r2, r0
 8002828:	4332      	orrs	r2, r6
 800282a:	5062      	str	r2, [r4, r1]
  WRITE_REG(TIMx->ARR, AutoReload);
 800282c:	62dd      	str	r5, [r3, #44]	; 0x2c
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800282e:	695a      	ldr	r2, [r3, #20]
 8002830:	f042 0201 	orr.w	r2, r2, #1
 8002834:	615a      	str	r2, [r3, #20]
 8002836:	e7a0      	b.n	800277a <pwm_stm32_pin_set+0x76>
   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002838:	4640      	mov	r0, r8
 800283a:	e7eb      	b.n	8002814 <pwm_stm32_pin_set+0x110>
 800283c:	2002      	movs	r0, #2
 800283e:	e7e9      	b.n	8002814 <pwm_stm32_pin_set+0x110>
 8002840:	2003      	movs	r0, #3
 8002842:	e7e7      	b.n	8002814 <pwm_stm32_pin_set+0x110>
 8002844:	2004      	movs	r0, #4
 8002846:	e7e5      	b.n	8002814 <pwm_stm32_pin_set+0x110>
 8002848:	2005      	movs	r0, #5
 800284a:	e7e3      	b.n	8002814 <pwm_stm32_pin_set+0x110>
 800284c:	2006      	movs	r0, #6
 800284e:	e7e1      	b.n	8002814 <pwm_stm32_pin_set+0x110>
   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002850:	2c04      	cmp	r4, #4
 8002852:	d024      	beq.n	800289e <pwm_stm32_pin_set+0x19a>
 8002854:	2c10      	cmp	r4, #16
 8002856:	d024      	beq.n	80028a2 <pwm_stm32_pin_set+0x19e>
 8002858:	2c40      	cmp	r4, #64	; 0x40
 800285a:	d024      	beq.n	80028a6 <pwm_stm32_pin_set+0x1a2>
 800285c:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8002860:	d023      	beq.n	80028aa <pwm_stm32_pin_set+0x1a6>
 8002862:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8002866:	d022      	beq.n	80028ae <pwm_stm32_pin_set+0x1aa>
 8002868:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800286c:	d021      	beq.n	80028b2 <pwm_stm32_pin_set+0x1ae>
 800286e:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8002872:	bf0c      	ite	eq
 8002874:	2207      	moveq	r2, #7
 8002876:	2208      	movne	r2, #8
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8002878:	4919      	ldr	r1, [pc, #100]	; (80028e0 <pwm_stm32_pin_set+0x1dc>)
		LL_TIM_SetAutoReload(cfg->timer, period_cycles - 1u);
 800287a:	3d01      	subs	r5, #1
 800287c:	6a03      	ldr	r3, [r0, #32]
 800287e:	5c89      	ldrb	r1, [r1, r2]
 8002880:	2202      	movs	r2, #2
 8002882:	408a      	lsls	r2, r1
 8002884:	408e      	lsls	r6, r1
		set_timer_compare[pwm - 1u](cfg->timer, pulse_cycles);
 8002886:	4649      	mov	r1, r9
 8002888:	ea23 0302 	bic.w	r3, r3, r2
 800288c:	431e      	orrs	r6, r3
 800288e:	4b15      	ldr	r3, [pc, #84]	; (80028e4 <pwm_stm32_pin_set+0x1e0>)
 8002890:	6206      	str	r6, [r0, #32]
 8002892:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8002896:	4798      	blx	r3
		LL_TIM_SetAutoReload(cfg->timer, period_cycles - 1u);
 8002898:	683b      	ldr	r3, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800289a:	62dd      	str	r5, [r3, #44]	; 0x2c
 800289c:	e76d      	b.n	800277a <pwm_stm32_pin_set+0x76>
   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800289e:	2201      	movs	r2, #1
 80028a0:	e7ea      	b.n	8002878 <pwm_stm32_pin_set+0x174>
 80028a2:	2202      	movs	r2, #2
 80028a4:	e7e8      	b.n	8002878 <pwm_stm32_pin_set+0x174>
 80028a6:	2203      	movs	r2, #3
 80028a8:	e7e6      	b.n	8002878 <pwm_stm32_pin_set+0x174>
 80028aa:	2204      	movs	r2, #4
 80028ac:	e7e4      	b.n	8002878 <pwm_stm32_pin_set+0x174>
 80028ae:	2205      	movs	r2, #5
 80028b0:	e7e2      	b.n	8002878 <pwm_stm32_pin_set+0x174>
 80028b2:	2206      	movs	r2, #6
 80028b4:	e7e0      	b.n	8002878 <pwm_stm32_pin_set+0x174>
		return -ENOTSUP;
 80028b6:	f06f 0022 	mvn.w	r0, #34	; 0x22
 80028ba:	e73b      	b.n	8002734 <pwm_stm32_pin_set+0x30>
 80028bc:	08005140 	.word	0x08005140
 80028c0:	08005128 	.word	0x08005128
 80028c4:	08005a30 	.word	0x08005a30
 80028c8:	08005a45 	.word	0x08005a45
 80028cc:	40000c00 	.word	0x40000c00
 80028d0:	08005310 	.word	0x08005310
 80028d4:	08005a74 	.word	0x08005a74
 80028d8:	08005b23 	.word	0x08005b23
 80028dc:	08005b35 	.word	0x08005b35
 80028e0:	08005b2c 	.word	0x08005b2c
 80028e4:	08005350 	.word	0x08005350

080028e8 <pwm_stm32_init>:
	.pin_set = pwm_stm32_pin_set,
	.get_cycles_per_sec = pwm_stm32_get_cycles_per_sec,
};

static int pwm_stm32_init(const struct device *dev)
{
 80028e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct pwm_stm32_data *data = dev->data;
 80028ea:	68c6      	ldr	r6, [r0, #12]
{
 80028ec:	b089      	sub	sp, #36	; 0x24
	const struct pwm_stm32_config *cfg = dev->config;
 80028ee:	6845      	ldr	r5, [r0, #4]
 80028f0:	483d      	ldr	r0, [pc, #244]	; (80029e8 <pwm_stm32_init+0x100>)

	/* enable clock and store its speed */
	clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);
	__ASSERT_NO_MSG(clk);

	r = clock_control_on(clk, (clock_control_subsys_t *)&cfg->pclken);
 80028f2:	f105 0708 	add.w	r7, r5, #8
 80028f6:	f000 fd55 	bl	80033a4 <z_impl_device_get_binding>
 80028fa:	6883      	ldr	r3, [r0, #8]
 80028fc:	4639      	mov	r1, r7
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4798      	blx	r3
	if (r < 0) {
 8002902:	1e04      	subs	r4, r0, #0
 8002904:	da0d      	bge.n	8002922 <pwm_stm32_init+0x3a>
 8002906:	4839      	ldr	r0, [pc, #228]	; (80029ec <pwm_stm32_init+0x104>)
		LOG_ERR("Could not initialize clock (%d)", r);
 8002908:	4622      	mov	r2, r4
 800290a:	4b39      	ldr	r3, [pc, #228]	; (80029f0 <pwm_stm32_init+0x108>)
 800290c:	4939      	ldr	r1, [pc, #228]	; (80029f4 <pwm_stm32_init+0x10c>)
 800290e:	1ac0      	subs	r0, r0, r3
 8002910:	08c0      	lsrs	r0, r0, #3
 8002912:	0180      	lsls	r0, r0, #6
	/* configure pinmux */
	r = stm32_dt_pinctrl_configure(cfg->pinctrl,
				       cfg->pinctrl_len,
				       (uint32_t)cfg->timer);
	if (r < 0) {
		LOG_ERR("PWM pinctrl setup failed (%d)", r);
 8002914:	f040 0001 	orr.w	r0, r0, #1
 8002918:	f001 fd12 	bl	8004340 <log_string_sync>
	}

	LL_TIM_EnableCounter(cfg->timer);

	return 0;
}
 800291c:	4620      	mov	r0, r4
 800291e:	b009      	add	sp, #36	; 0x24
 8002920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002922:	4831      	ldr	r0, [pc, #196]	; (80029e8 <pwm_stm32_init+0x100>)
 8002924:	f000 fd3e 	bl	80033a4 <z_impl_device_get_binding>
		(const struct clock_control_driver_api *)dev->api;

	__ASSERT(api->get_rate != NULL, "%s not implemented for device %s",
		__func__, dev->name);

	return api->get_rate(dev, sys, rate);
 8002928:	6883      	ldr	r3, [r0, #8]
 800292a:	466a      	mov	r2, sp
 800292c:	4639      	mov	r1, r7
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	4798      	blx	r3
	if (r < 0) {
 8002932:	1e04      	subs	r4, r0, #0
 8002934:	db15      	blt.n	8002962 <pwm_stm32_init+0x7a>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_TIMPRE));
 8002936:	4b30      	ldr	r3, [pc, #192]	; (80029f8 <pwm_stm32_init+0x110>)
			LL_RCC_GetSystemClocksFreq(&clocks);
 8002938:	a801      	add	r0, sp, #4
 800293a:	691b      	ldr	r3, [r3, #16]
			LL_RCC_GetSystemClocksFreq(&clocks);
 800293c:	f002 f804 	bl	8004948 <LL_RCC_GetSystemClocksFreq>
			*tim_clk = clocks.HCLK_Frequency;
 8002940:	9b03      	ldr	r3, [sp, #12]
	r = stm32_dt_pinctrl_configure(cfg->pinctrl,
 8002942:	682a      	ldr	r2, [r5, #0]
			*tim_clk = clocks.HCLK_Frequency;
 8002944:	6033      	str	r3, [r6, #0]
	r = stm32_dt_pinctrl_configure(cfg->pinctrl,
 8002946:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800294a:	f7ff f85f 	bl	8001a0c <stm32_dt_pinctrl_configure>
	if (r < 0) {
 800294e:	1e04      	subs	r4, r0, #0
 8002950:	da0f      	bge.n	8002972 <pwm_stm32_init+0x8a>
 8002952:	4826      	ldr	r0, [pc, #152]	; (80029ec <pwm_stm32_init+0x104>)
		LOG_ERR("PWM pinctrl setup failed (%d)", r);
 8002954:	4622      	mov	r2, r4
 8002956:	4b26      	ldr	r3, [pc, #152]	; (80029f0 <pwm_stm32_init+0x108>)
 8002958:	4928      	ldr	r1, [pc, #160]	; (80029fc <pwm_stm32_init+0x114>)
 800295a:	1ac0      	subs	r0, r0, r3
 800295c:	08c0      	lsrs	r0, r0, #3
 800295e:	0180      	lsls	r0, r0, #6
 8002960:	e7d8      	b.n	8002914 <pwm_stm32_init+0x2c>
 8002962:	4822      	ldr	r0, [pc, #136]	; (80029ec <pwm_stm32_init+0x104>)
		LOG_ERR("Could not obtain timer clock (%d)", r);
 8002964:	4622      	mov	r2, r4
 8002966:	4b22      	ldr	r3, [pc, #136]	; (80029f0 <pwm_stm32_init+0x108>)
 8002968:	4925      	ldr	r1, [pc, #148]	; (8002a00 <pwm_stm32_init+0x118>)
 800296a:	1ac0      	subs	r0, r0, r3
 800296c:	08c0      	lsrs	r0, r0, #3
 800296e:	0180      	lsls	r0, r0, #6
 8002970:	e7d0      	b.n	8002914 <pwm_stm32_init+0x2c>
	LL_TIM_StructInit(&init);
 8002972:	a801      	add	r0, sp, #4
 8002974:	f002 f800 	bl	8004978 <LL_TIM_StructInit>
	init.Prescaler = cfg->prescaler;
 8002978:	686b      	ldr	r3, [r5, #4]
	if (LL_TIM_Init(cfg->timer, &init) != SUCCESS) {
 800297a:	a901      	add	r1, sp, #4
 800297c:	6828      	ldr	r0, [r5, #0]
	init.Prescaler = cfg->prescaler;
 800297e:	f8ad 3004 	strh.w	r3, [sp, #4]
	init.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002982:	2300      	movs	r3, #0
	init.Autoreload = 0u;
 8002984:	e9cd 3302 	strd	r3, r3, [sp, #8]
	init.RepetitionCounter = 0u;
 8002988:	e9cd 3304 	strd	r3, r3, [sp, #16]
	if (LL_TIM_Init(cfg->timer, &init) != SUCCESS) {
 800298c:	f000 fa78 	bl	8002e80 <LL_TIM_Init>
 8002990:	b160      	cbz	r0, 80029ac <pwm_stm32_init+0xc4>
 8002992:	4b17      	ldr	r3, [pc, #92]	; (80029f0 <pwm_stm32_init+0x108>)
		return -EIO;
 8002994:	f06f 0404 	mvn.w	r4, #4
 8002998:	4814      	ldr	r0, [pc, #80]	; (80029ec <pwm_stm32_init+0x104>)
		LOG_ERR("Could not initialize timer");
 800299a:	491a      	ldr	r1, [pc, #104]	; (8002a04 <pwm_stm32_init+0x11c>)
 800299c:	1ac0      	subs	r0, r0, r3
 800299e:	08c0      	lsrs	r0, r0, #3
 80029a0:	0180      	lsls	r0, r0, #6
 80029a2:	f040 0001 	orr.w	r0, r0, #1
 80029a6:	f001 fccb 	bl	8004340 <log_string_sync>
		return -EIO;
 80029aa:	e7b7      	b.n	800291c <pwm_stm32_init+0x34>
	if (IS_TIM_BREAK_INSTANCE(cfg->timer)) {
 80029ac:	682b      	ldr	r3, [r5, #0]
 80029ae:	4a16      	ldr	r2, [pc, #88]	; (8002a08 <pwm_stm32_init+0x120>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d00f      	beq.n	80029d4 <pwm_stm32_init+0xec>
 80029b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d00b      	beq.n	80029d4 <pwm_stm32_init+0xec>
 80029bc:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d007      	beq.n	80029d4 <pwm_stm32_init+0xec>
 80029c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d003      	beq.n	80029d4 <pwm_stm32_init+0xec>
 80029cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d103      	bne.n	80029dc <pwm_stm32_init+0xf4>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80029d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029da:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80029dc:	681a      	ldr	r2, [r3, #0]
	return 0;
 80029de:	2400      	movs	r4, #0
 80029e0:	f042 0201 	orr.w	r2, r2, #1
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	e799      	b.n	800291c <pwm_stm32_init+0x34>
 80029e8:	080055ad 	.word	0x080055ad
 80029ec:	08005140 	.word	0x08005140
 80029f0:	08005128 	.word	0x08005128
 80029f4:	08005a9e 	.word	0x08005a9e
 80029f8:	58024400 	.word	0x58024400
 80029fc:	08005ae0 	.word	0x08005ae0
 8002a00:	08005abe 	.word	0x08005abe
 8002a04:	08005afe 	.word	0x08005afe
 8002a08:	40010000 	.word	0x40010000

08002a0c <uart_stm32_set_baudrate>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);

	uint32_t clock_rate;

	/* Get clock rate */
	if (clock_control_get_rate(data->clock,
 8002a0c:	68c3      	ldr	r3, [r0, #12]
{
 8002a0e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002a10:	460c      	mov	r4, r1
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8002a12:	6841      	ldr	r1, [r0, #4]
	if (clock_control_get_rate(data->clock,
 8002a14:	6858      	ldr	r0, [r3, #4]
 8002a16:	aa01      	add	r2, sp, #4
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8002a18:	f851 5b08 	ldr.w	r5, [r1], #8
 8002a1c:	6883      	ldr	r3, [r0, #8]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	4798      	blx	r3
	if (clock_control_get_rate(data->clock,
 8002a22:	2800      	cmp	r0, #0
 8002a24:	da0b      	bge.n	8002a3e <uart_stm32_set_baudrate+0x32>
 8002a26:	480a      	ldr	r0, [pc, #40]	; (8002a50 <uart_stm32_set_baudrate+0x44>)
 8002a28:	4b0a      	ldr	r3, [pc, #40]	; (8002a54 <uart_stm32_set_baudrate+0x48>)
			       (clock_control_subsys_t *)&config->pclken,
			       &clock_rate) < 0) {
		LOG_ERR("Failed call clock_control_get_rate");
 8002a2a:	490b      	ldr	r1, [pc, #44]	; (8002a58 <uart_stm32_set_baudrate+0x4c>)
 8002a2c:	1ac0      	subs	r0, r0, r3
 8002a2e:	08c0      	lsrs	r0, r0, #3
 8002a30:	0180      	lsls	r0, r0, #6
 8002a32:	f040 0001 	orr.w	r0, r0, #1
 8002a36:	f001 fc83 	bl	8004340 <log_string_sync>
				     baud_rate);

#if HAS_LPUART_1
	}
#endif /* HAS_LPUART_1 */
}
 8002a3a:	b003      	add	sp, #12
 8002a3c:	bd30      	pop	{r4, r5, pc}
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    USARTx->BRR = brrtemp;
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8002a3e:	9b01      	ldr	r3, [sp, #4]
 8002a40:	eb03 0354 	add.w	r3, r3, r4, lsr #1
 8002a44:	fbb3 f3f4 	udiv	r3, r3, r4
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	60eb      	str	r3, [r5, #12]
 8002a4c:	e7f5      	b.n	8002a3a <uart_stm32_set_baudrate+0x2e>
 8002a4e:	bf00      	nop
 8002a50:	08005148 	.word	0x08005148
 8002a54:	08005128 	.word	0x08005128
 8002a58:	08005b3e 	.word	0x08005b3e

08002a5c <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 8002a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct uart_stm32_config *config = DEV_CFG(dev);
 8002a60:	6847      	ldr	r7, [r0, #4]
{
 8002a62:	4605      	mov	r5, r0
	struct uart_stm32_data *data = DEV_DATA(dev);
 8002a64:	68c6      	ldr	r6, [r0, #12]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8002a66:	46b8      	mov	r8, r7
 8002a68:	f858 4b08 	ldr.w	r4, [r8], #8
 8002a6c:	482f      	ldr	r0, [pc, #188]	; (8002b2c <uart_stm32_init+0xd0>)
 8002a6e:	f000 fc99 	bl	80033a4 <z_impl_device_get_binding>
	return api->on(dev, sys);
 8002a72:	6883      	ldr	r3, [r0, #8]
 8002a74:	4641      	mov	r1, r8
	data->clock = clk;
 8002a76:	6070      	str	r0, [r6, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4798      	blx	r3
	uint32_t ll_datawidth;
	int err;

	__uart_stm32_get_clock(dev);
	/* enable clock */
	if (clock_control_on(data->clock,
 8002a7c:	4680      	mov	r8, r0
 8002a7e:	2800      	cmp	r0, #0
 8002a80:	d150      	bne.n	8002b24 <uart_stm32_init+0xc8>
	}

	/* Configure dt provided device signals when available */
	err = stm32_dt_pinctrl_configure(config->pinctrl_list,
					 config->pinctrl_list_size,
					 (uint32_t)UART_STRUCT(dev));
 8002a82:	686b      	ldr	r3, [r5, #4]
	err = stm32_dt_pinctrl_configure(config->pinctrl_list,
 8002a84:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	f7fe ffbf 	bl	8001a0c <stm32_dt_pinctrl_configure>
	if (err < 0) {
 8002a8e:	2800      	cmp	r0, #0
 8002a90:	db41      	blt.n	8002b16 <uart_stm32_init+0xba>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8002a92:	6823      	ldr	r3, [r4, #0]
				      LL_USART_DIRECTION_TX_RX);

	/* Determine the datawidth and parity. If we use other parity than
	 * 'none' we must use datawidth = 9 (to get 8 databit + 1 parity bit).
	 */
	if (config->parity == 2) {
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	f023 0301 	bic.w	r3, r3, #1
 8002a9a:	2a02      	cmp	r2, #2
 8002a9c:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8002a9e:	6823      	ldr	r3, [r4, #0]
 8002aa0:	f043 030c 	orr.w	r3, r3, #12
 8002aa4:	6023      	str	r3, [r4, #0]
 8002aa6:	d00f      	beq.n	8002ac8 <uart_stm32_init+0x6c>
		/* 8 databit, 1 parity bit, parity even */
		ll_parity = LL_USART_PARITY_EVEN;
		ll_datawidth = LL_USART_DATAWIDTH_9B;
	} else if (config->parity == 1) {
 8002aa8:	2a01      	cmp	r2, #1
 8002aaa:	d036      	beq.n	8002b1a <uart_stm32_init+0xbe>
		/* 8 databit, 1 parity bit, parity odd */
		ll_parity = LL_USART_PARITY_ODD;
		ll_datawidth = LL_USART_DATAWIDTH_9B;
	} else {  /* Default to 8N0, but show warning if invalid value */
		if (config->parity != 0) {
 8002aac:	b152      	cbz	r2, 8002ac4 <uart_stm32_init+0x68>
 8002aae:	4820      	ldr	r0, [pc, #128]	; (8002b30 <uart_stm32_init+0xd4>)
 8002ab0:	4b20      	ldr	r3, [pc, #128]	; (8002b34 <uart_stm32_init+0xd8>)
			LOG_WRN("Invalid parity setting '%d'."
 8002ab2:	4921      	ldr	r1, [pc, #132]	; (8002b38 <uart_stm32_init+0xdc>)
 8002ab4:	1a1b      	subs	r3, r3, r0
 8002ab6:	08db      	lsrs	r3, r3, #3
 8002ab8:	019b      	lsls	r3, r3, #6
 8002aba:	f043 0002 	orr.w	r0, r3, #2
 8002abe:	f001 fc3f 	bl	8004340 <log_string_sync>
				"Defaulting to 'none'.", config->parity);
		}
		/* 8 databit, parity none */
		ll_parity = LL_USART_PARITY_NONE;
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 8002ac2:	4642      	mov	r2, r8
		ll_parity = LL_USART_PARITY_NONE;
 8002ac4:	4610      	mov	r0, r2
 8002ac6:	e003      	b.n	8002ad0 <uart_stm32_init+0x74>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 8002ac8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 8002acc:	f44f 6080 	mov.w	r0, #1024	; 0x400
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 8002ad0:	6823      	ldr	r3, [r4, #0]
 8002ad2:	4302      	orrs	r2, r0
 8002ad4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ad8:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002adc:	431a      	orrs	r2, r3
 8002ade:	6022      	str	r2, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002ae0:	6863      	ldr	r3, [r4, #4]
 8002ae2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ae6:	6063      	str	r3, [r4, #4]
	LL_USART_ConfigCharacter(UartInstance,
				 ll_datawidth,
				 ll_parity,
				 LL_USART_STOPBITS_1);

	if (config->hw_flow_control) {
 8002ae8:	7c3b      	ldrb	r3, [r7, #16]
 8002aea:	b12b      	cbz	r3, 8002af8 <uart_stm32_init+0x9c>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8002aec:	686b      	ldr	r3, [r5, #4]
 8002aee:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002af0:	6893      	ldr	r3, [r2, #8]
 8002af2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002af6:	6093      	str	r3, [r2, #8]
		uart_stm32_set_hwctrl(dev, LL_USART_HWCONTROL_RTS_CTS);
	}

	/* Set the default baudrate */
	uart_stm32_set_baudrate(dev, data->baud_rate);
 8002af8:	6831      	ldr	r1, [r6, #0]
 8002afa:	4628      	mov	r0, r5
 8002afc:	f7ff ff86 	bl	8002a0c <uart_stm32_set_baudrate>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002b00:	6823      	ldr	r3, [r4, #0]
 8002b02:	f043 0301 	orr.w	r3, r3, #1
 8002b06:	6023      	str	r3, [r4, #0]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8002b08:	69e3      	ldr	r3, [r4, #28]
 8002b0a:	029a      	lsls	r2, r3, #10
 8002b0c:	d5fc      	bpl.n	8002b08 <uart_stm32_init+0xac>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8002b0e:	69e3      	ldr	r3, [r4, #28]
 8002b10:	025b      	lsls	r3, r3, #9
 8002b12:	d5fc      	bpl.n	8002b0e <uart_stm32_init+0xb2>
#endif /* !USART_ISR_REACK */

#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	config->uconf.irq_config_func(dev);
#endif
	return 0;
 8002b14:	2000      	movs	r0, #0
}
 8002b16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 8002b1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_ODD;
 8002b1e:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8002b22:	e7d5      	b.n	8002ad0 <uart_stm32_init+0x74>
		return -EIO;
 8002b24:	f06f 0004 	mvn.w	r0, #4
 8002b28:	e7f5      	b.n	8002b16 <uart_stm32_init+0xba>
 8002b2a:	bf00      	nop
 8002b2c:	080055ad 	.word	0x080055ad
 8002b30:	08005128 	.word	0x08005128
 8002b34:	08005148 	.word	0x08005148
 8002b38:	08005b61 	.word	0x08005b61

08002b3c <uart_stm32_configure>:
{
 8002b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 8002b40:	790a      	ldrb	r2, [r1, #4]
{
 8002b42:	460d      	mov	r5, r1
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8002b44:	6843      	ldr	r3, [r0, #4]
	switch (parity) {
 8002b46:	2a01      	cmp	r2, #1
	struct uart_stm32_data *data = DEV_DATA(dev);
 8002b48:	68c6      	ldr	r6, [r0, #12]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8002b4a:	681c      	ldr	r4, [r3, #0]
	switch (parity) {
 8002b4c:	f000 808c 	beq.w	8002c68 <uart_stm32_configure+0x12c>
		return LL_USART_PARITY_NONE;
 8002b50:	2a02      	cmp	r2, #2
 8002b52:	bf0c      	ite	eq
 8002b54:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 8002b58:	2100      	movne	r1, #0
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8002b5a:	f895 9005 	ldrb.w	r9, [r5, #5]
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits);
 8002b5e:	f895 8006 	ldrb.w	r8, [r5, #6]
 8002b62:	f1b9 0f02 	cmp.w	r9, #2
 8002b66:	bf96      	itet	ls
 8002b68:	4b44      	ldrls	r3, [pc, #272]	; (8002c7c <uart_stm32_configure+0x140>)
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8002b6a:	f44f 5e00 	movhi.w	lr, #8192	; 0x2000
 8002b6e:	f833 e019 	ldrhls.w	lr, [r3, r9, lsl #1]
	switch (db) {
 8002b72:	f1b8 0f02 	cmp.w	r8, #2
 8002b76:	d07a      	beq.n	8002c6e <uart_stm32_configure+0x132>
		return LL_USART_DATAWIDTH_8B;
 8002b78:	f1b8 0f04 	cmp.w	r8, #4
 8002b7c:	bf0c      	ite	eq
 8002b7e:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
 8002b82:	2300      	movne	r3, #0
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 8002b84:	79ef      	ldrb	r7, [r5, #7]
	if ((UART_CFG_PARITY_MARK == cfg->parity) ||
 8002b86:	3a03      	subs	r2, #3
		return LL_USART_HWCONTROL_RTS_CTS;
 8002b88:	2f01      	cmp	r7, #1
 8002b8a:	bf14      	ite	ne
 8002b8c:	f04f 0c00 	movne.w	ip, #0
 8002b90:	f44f 7c40 	moveq.w	ip, #768	; 0x300
	if ((UART_CFG_PARITY_MARK == cfg->parity) ||
 8002b94:	2a01      	cmp	r2, #1
 8002b96:	d96d      	bls.n	8002c74 <uart_stm32_configure+0x138>
	if (UART_CFG_STOP_BITS_0_5 == cfg->stop_bits) {
 8002b98:	f019 0ffd 	tst.w	r9, #253	; 0xfd
 8002b9c:	d06a      	beq.n	8002c74 <uart_stm32_configure+0x138>
	if ((UART_CFG_DATA_BITS_5 == cfg->data_bits) ||
 8002b9e:	f1b8 0f01 	cmp.w	r8, #1
 8002ba2:	d967      	bls.n	8002c74 <uart_stm32_configure+0x138>
	if (UART_CFG_FLOW_CTRL_NONE != cfg->flow_ctrl) {
 8002ba4:	b31f      	cbz	r7, 8002bee <uart_stm32_configure+0xb2>
		if (!IS_UART_HWFLOW_INSTANCE(UartInstance) ||
 8002ba6:	4a36      	ldr	r2, [pc, #216]	; (8002c80 <uart_stm32_configure+0x144>)
 8002ba8:	4294      	cmp	r4, r2
 8002baa:	d01e      	beq.n	8002bea <uart_stm32_configure+0xae>
 8002bac:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8002bb0:	4294      	cmp	r4, r2
 8002bb2:	d01a      	beq.n	8002bea <uart_stm32_configure+0xae>
 8002bb4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002bb8:	4294      	cmp	r4, r2
 8002bba:	d016      	beq.n	8002bea <uart_stm32_configure+0xae>
 8002bbc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002bc0:	4294      	cmp	r4, r2
 8002bc2:	d012      	beq.n	8002bea <uart_stm32_configure+0xae>
 8002bc4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002bc8:	4294      	cmp	r4, r2
 8002bca:	d00e      	beq.n	8002bea <uart_stm32_configure+0xae>
 8002bcc:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 8002bd0:	4294      	cmp	r4, r2
 8002bd2:	d00a      	beq.n	8002bea <uart_stm32_configure+0xae>
 8002bd4:	f5a2 421c 	sub.w	r2, r2, #39936	; 0x9c00
 8002bd8:	4294      	cmp	r4, r2
 8002bda:	d006      	beq.n	8002bea <uart_stm32_configure+0xae>
 8002bdc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002be0:	4294      	cmp	r4, r2
 8002be2:	d002      	beq.n	8002bea <uart_stm32_configure+0xae>
 8002be4:	4a27      	ldr	r2, [pc, #156]	; (8002c84 <uart_stm32_configure+0x148>)
 8002be6:	4294      	cmp	r4, r2
 8002be8:	d144      	bne.n	8002c74 <uart_stm32_configure+0x138>
 8002bea:	2f01      	cmp	r7, #1
 8002bec:	d142      	bne.n	8002c74 <uart_stm32_configure+0x138>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8002bee:	6822      	ldr	r2, [r4, #0]
 8002bf0:	f022 0201 	bic.w	r2, r2, #1
 8002bf4:	6022      	str	r2, [r4, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8002bf6:	6822      	ldr	r2, [r4, #0]
 8002bf8:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
	if (parity != uart_stm32_get_parity(dev)) {
 8002bfc:	428a      	cmp	r2, r1
 8002bfe:	d004      	beq.n	8002c0a <uart_stm32_configure+0xce>
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 8002c00:	6827      	ldr	r7, [r4, #0]
 8002c02:	f427 67c0 	bic.w	r7, r7, #1536	; 0x600
 8002c06:	430f      	orrs	r7, r1
 8002c08:	6027      	str	r7, [r4, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8002c0a:	6862      	ldr	r2, [r4, #4]
 8002c0c:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
	if (stopbits != uart_stm32_get_stopbits(dev)) {
 8002c10:	4596      	cmp	lr, r2
 8002c12:	d005      	beq.n	8002c20 <uart_stm32_configure+0xe4>
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002c14:	6861      	ldr	r1, [r4, #4]
 8002c16:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8002c1a:	ea41 010e 	orr.w	r1, r1, lr
 8002c1e:	6061      	str	r1, [r4, #4]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8002c20:	6822      	ldr	r2, [r4, #0]
 8002c22:	f002 2210 	and.w	r2, r2, #268439552	; 0x10001000
	if (databits != uart_stm32_get_databits(dev)) {
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d004      	beq.n	8002c34 <uart_stm32_configure+0xf8>
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 8002c2a:	6822      	ldr	r2, [r4, #0]
 8002c2c:	f022 2210 	bic.w	r2, r2, #268439552	; 0x10001000
 8002c30:	431a      	orrs	r2, r3
 8002c32:	6022      	str	r2, [r4, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8002c34:	68a3      	ldr	r3, [r4, #8]
 8002c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 8002c3a:	459c      	cmp	ip, r3
 8002c3c:	d005      	beq.n	8002c4a <uart_stm32_configure+0x10e>
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002c3e:	68a3      	ldr	r3, [r4, #8]
 8002c40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c44:	ea43 030c 	orr.w	r3, r3, ip
 8002c48:	60a3      	str	r3, [r4, #8]
	if (cfg->baudrate != data->baud_rate) {
 8002c4a:	6829      	ldr	r1, [r5, #0]
 8002c4c:	6833      	ldr	r3, [r6, #0]
 8002c4e:	4299      	cmp	r1, r3
 8002c50:	d003      	beq.n	8002c5a <uart_stm32_configure+0x11e>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 8002c52:	f7ff fedb 	bl	8002a0c <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 8002c56:	682b      	ldr	r3, [r5, #0]
 8002c58:	6033      	str	r3, [r6, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002c5a:	6823      	ldr	r3, [r4, #0]
	return 0;
 8002c5c:	2000      	movs	r0, #0
 8002c5e:	f043 0301 	orr.w	r3, r3, #1
 8002c62:	6023      	str	r3, [r4, #0]
};
 8002c64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	switch (parity) {
 8002c68:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002c6c:	e775      	b.n	8002b5a <uart_stm32_configure+0x1e>
	switch (db) {
 8002c6e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002c72:	e787      	b.n	8002b84 <uart_stm32_configure+0x48>
		return -ENOTSUP;
 8002c74:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8002c78:	e7f4      	b.n	8002c64 <uart_stm32_configure+0x128>
 8002c7a:	bf00      	nop
 8002c7c:	08005408 	.word	0x08005408
 8002c80:	40011000 	.word	0x40011000
 8002c84:	58000c00 	.word	0x58000c00

08002c88 <LL_RCC_HSE_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY))?1UL:0UL);
 8002c88:	4b02      	ldr	r3, [pc, #8]	; (8002c94 <LL_RCC_HSE_IsReady+0xc>)
 8002c8a:	6818      	ldr	r0, [r3, #0]
}
 8002c8c:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	58024400 	.word	0x58024400

08002c98 <LL_RCC_HSI_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY))?1UL:0UL);
 8002c98:	4b02      	ldr	r3, [pc, #8]	; (8002ca4 <LL_RCC_HSI_IsReady+0xc>)
 8002c9a:	6818      	ldr	r0, [r3, #0]
}
 8002c9c:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	58024400 	.word	0x58024400

08002ca8 <LL_RCC_CSI_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_CSIRDY) == (RCC_CR_CSIRDY))?1UL:0UL);
 8002ca8:	4b02      	ldr	r3, [pc, #8]	; (8002cb4 <LL_RCC_CSI_IsReady+0xc>)
 8002caa:	6818      	ldr	r0, [r3, #0]
}
 8002cac:	f3c0 2000 	ubfx	r0, r0, #8, #1
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	58024400 	.word	0x58024400

08002cb8 <LL_RCC_GetPLL1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC));
 8002cb8:	4a35      	ldr	r2, [pc, #212]	; (8002d90 <LL_RCC_GetPLL1ClockFreq+0xd8>)
 8002cba:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002cbc:	f003 0303 	and.w	r3, r3, #3
  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();

  switch (pllsource)
 8002cc0:	2b01      	cmp	r3, #1
{
 8002cc2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002cc6:	4606      	mov	r6, r0
  switch (pllsource)
 8002cc8:	d055      	beq.n	8002d76 <LL_RCC_GetPLL1ClockFreq+0xbe>
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d059      	beq.n	8002d82 <LL_RCC_GetPLL1ClockFreq+0xca>
 8002cce:	b913      	cbnz	r3, 8002cd6 <LL_RCC_GetPLL1ClockFreq+0x1e>
  {
    case LL_RCC_PLLSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
 8002cd0:	f7ff ffe2 	bl	8002c98 <LL_RCC_HSI_IsReady>
 8002cd4:	b908      	cbnz	r0, 8002cda <LL_RCC_GetPLL1ClockFreq+0x22>
  switch (pllsource)
 8002cd6:	2400      	movs	r4, #0
 8002cd8:	e004      	b.n	8002ce4 <LL_RCC_GetPLL1ClockFreq+0x2c>
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 8002cda:	6813      	ldr	r3, [r2, #0]
      {
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider()>> RCC_CR_HSIDIV_Pos);
 8002cdc:	4c2d      	ldr	r4, [pc, #180]	; (8002d94 <LL_RCC_GetPLL1ClockFreq+0xdc>)
 8002cde:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002ce2:	40dc      	lsrs	r4, r3
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1) >>  RCC_PLLCKSELR_DIVM1_Pos);
 8002ce4:	482a      	ldr	r0, [pc, #168]	; (8002d90 <LL_RCC_GetPLL1ClockFreq+0xd8>)
    default:
      /* PLL clock disabled */
      break;
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 8002ce6:	2300      	movs	r3, #0
  PLL_Clocks->PLL_Q_Frequency = 0U;
 8002ce8:	e9c6 3300 	strd	r3, r3, [r6]
  PLL_Clocks->PLL_R_Frequency = 0U;
 8002cec:	60b3      	str	r3, [r6, #8]
 8002cee:	6a81      	ldr	r1, [r0, #40]	; 0x28
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_N1) >>  RCC_PLL1DIVR_N1_Pos) + 1UL);
 8002cf0:	6b07      	ldr	r7, [r0, #48]	; 0x30
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN) == RCC_PLLCFGR_PLL1FRACEN)?1UL:0UL);
 8002cf2:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1) >>  RCC_PLLCKSELR_DIVM1_Pos);
 8002cf4:	f3c1 1805 	ubfx	r8, r1, #4, #6

  m = LL_RCC_PLL1_GetM();
  n = LL_RCC_PLL1_GetN();
  if (LL_RCC_PLL1FRACN_IsEnabled() != 0U)
 8002cf8:	f015 0501 	ands.w	r5, r5, #1
 8002cfc:	d002      	beq.n	8002d04 <LL_RCC_GetPLL1ClockFreq+0x4c>
  return (uint32_t)(READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_FRACN1) >>  RCC_PLL1FRACR_FRACN1_Pos);
 8002cfe:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8002d00:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  {
    fracn = LL_RCC_PLL1_GetFRACN();
  }

  if (m != 0U)
 8002d04:	f1b8 0f00 	cmp.w	r8, #0
 8002d08:	d032      	beq.n	8002d70 <LL_RCC_GetPLL1ClockFreq+0xb8>
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP1EN) == RCC_PLLCFGR_DIVP1EN)?1UL:0UL);
 8002d0a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_N1) >>  RCC_PLL1DIVR_N1_Pos) + 1UL);
 8002d0c:	f3c7 0708 	ubfx	r7, r7, #0, #9
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP1EN) == RCC_PLLCFGR_DIVP1EN)?1UL:0UL);
 8002d10:	03db      	lsls	r3, r3, #15
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_N1) >>  RCC_PLL1DIVR_N1_Pos) + 1UL);
 8002d12:	f107 0701 	add.w	r7, r7, #1
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP1EN) == RCC_PLLCFGR_DIVP1EN)?1UL:0UL);
 8002d16:	d50b      	bpl.n	8002d30 <LL_RCC_GetPLL1ClockFreq+0x78>
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_P1) >>  RCC_PLL1DIVR_P1_Pos) + 1UL);
 8002d18:	6b03      	ldr	r3, [r0, #48]	; 0x30
  {
    if (LL_RCC_PLL1P_IsEnabled() != 0U)
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetP());
 8002d1a:	463a      	mov	r2, r7
 8002d1c:	4641      	mov	r1, r8
 8002d1e:	4620      	mov	r0, r4
 8002d20:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002d24:	3301      	adds	r3, #1
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	462b      	mov	r3, r5
 8002d2a:	f001 fddf 	bl	80048ec <LL_RCC_CalcPLLClockFreq>
 8002d2e:	6030      	str	r0, [r6, #0]
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ1EN) == RCC_PLLCFGR_DIVQ1EN)?1UL:0UL);
 8002d30:	4b17      	ldr	r3, [pc, #92]	; (8002d90 <LL_RCC_GetPLL1ClockFreq+0xd8>)
 8002d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d34:	0391      	lsls	r1, r2, #14
 8002d36:	d50b      	bpl.n	8002d50 <LL_RCC_GetPLL1ClockFreq+0x98>
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_Q1) >>  RCC_PLL1DIVR_Q1_Pos) + 1UL);
 8002d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    }

    if (LL_RCC_PLL1Q_IsEnabled() != 0U)
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetQ());
 8002d3a:	463a      	mov	r2, r7
 8002d3c:	4641      	mov	r1, r8
 8002d3e:	4620      	mov	r0, r4
 8002d40:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8002d44:	3301      	adds	r3, #1
 8002d46:	9300      	str	r3, [sp, #0]
 8002d48:	462b      	mov	r3, r5
 8002d4a:	f001 fdcf 	bl	80048ec <LL_RCC_CalcPLLClockFreq>
 8002d4e:	6070      	str	r0, [r6, #4]
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR1EN) == RCC_PLLCFGR_DIVR1EN)?1UL:0UL);
 8002d50:	4b0f      	ldr	r3, [pc, #60]	; (8002d90 <LL_RCC_GetPLL1ClockFreq+0xd8>)
 8002d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d54:	0352      	lsls	r2, r2, #13
 8002d56:	d50b      	bpl.n	8002d70 <LL_RCC_GetPLL1ClockFreq+0xb8>
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_R1) >>  RCC_PLL1DIVR_R1_Pos) + 1UL);
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    }

    if (LL_RCC_PLL1R_IsEnabled() != 0U)
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetR());
 8002d5a:	463a      	mov	r2, r7
 8002d5c:	4641      	mov	r1, r8
 8002d5e:	4620      	mov	r0, r4
 8002d60:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8002d64:	3301      	adds	r3, #1
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	462b      	mov	r3, r5
 8002d6a:	f001 fdbf 	bl	80048ec <LL_RCC_CalcPLLClockFreq>
 8002d6e:	60b0      	str	r0, [r6, #8]
    }
  }
}
 8002d70:	b002      	add	sp, #8
 8002d72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (LL_RCC_CSI_IsReady() != 0U)
 8002d76:	f7ff ff97 	bl	8002ca8 <LL_RCC_CSI_IsReady>
 8002d7a:	2800      	cmp	r0, #0
 8002d7c:	d0ab      	beq.n	8002cd6 <LL_RCC_GetPLL1ClockFreq+0x1e>
        pllinputfreq = CSI_VALUE;
 8002d7e:	4c06      	ldr	r4, [pc, #24]	; (8002d98 <LL_RCC_GetPLL1ClockFreq+0xe0>)
 8002d80:	e7b0      	b.n	8002ce4 <LL_RCC_GetPLL1ClockFreq+0x2c>
      if (LL_RCC_HSE_IsReady() != 0U)
 8002d82:	f7ff ff81 	bl	8002c88 <LL_RCC_HSE_IsReady>
 8002d86:	2800      	cmp	r0, #0
 8002d88:	d0a5      	beq.n	8002cd6 <LL_RCC_GetPLL1ClockFreq+0x1e>
        pllinputfreq = HSE_VALUE;
 8002d8a:	4c04      	ldr	r4, [pc, #16]	; (8002d9c <LL_RCC_GetPLL1ClockFreq+0xe4>)
 8002d8c:	e7aa      	b.n	8002ce4 <LL_RCC_GetPLL1ClockFreq+0x2c>
 8002d8e:	bf00      	nop
 8002d90:	58024400 	.word	0x58024400
 8002d94:	03d09000 	.word	0x03d09000
 8002d98:	003d0900 	.word	0x003d0900
 8002d9c:	007a1200 	.word	0x007a1200

08002da0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002da0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002da2:	4a10      	ldr	r2, [pc, #64]	; (8002de4 <RCC_GetSystemClockFreq+0x44>)
 8002da4:	6913      	ldr	r3, [r2, #16]
 8002da6:	f003 0338 	and.w	r3, r3, #56	; 0x38
  uint32_t frequency = 0U;
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002daa:	2b10      	cmp	r3, #16
 8002dac:	d017      	beq.n	8002dde <RCC_GetSystemClockFreq+0x3e>
 8002dae:	d807      	bhi.n	8002dc0 <RCC_GetSystemClockFreq+0x20>
 8002db0:	b153      	cbz	r3, 8002dc8 <RCC_GetSystemClockFreq+0x28>
 8002db2:	2b08      	cmp	r3, #8
 8002db4:	480c      	ldr	r0, [pc, #48]	; (8002de8 <RCC_GetSystemClockFreq+0x48>)
 8002db6:	bf18      	it	ne
 8002db8:	2000      	movne	r0, #0
      /* Nothing to do */
      break;
  }

  return frequency;
}
 8002dba:	b005      	add	sp, #20
 8002dbc:	f85d fb04 	ldr.w	pc, [sp], #4
  switch (LL_RCC_GetSysClkSource())
 8002dc0:	2b18      	cmp	r3, #24
 8002dc2:	d007      	beq.n	8002dd4 <RCC_GetSystemClockFreq+0x34>
  uint32_t frequency = 0U;
 8002dc4:	2000      	movs	r0, #0
 8002dc6:	e7f8      	b.n	8002dba <RCC_GetSystemClockFreq+0x1a>
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 8002dc8:	6813      	ldr	r3, [r2, #0]
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider()>> RCC_CR_HSIDIV_Pos);
 8002dca:	4808      	ldr	r0, [pc, #32]	; (8002dec <RCC_GetSystemClockFreq+0x4c>)
 8002dcc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002dd0:	40d8      	lsrs	r0, r3
  return frequency;
 8002dd2:	e7f2      	b.n	8002dba <RCC_GetSystemClockFreq+0x1a>
      LL_RCC_GetPLL1ClockFreq(&PLL_Clocks);
 8002dd4:	a801      	add	r0, sp, #4
 8002dd6:	f7ff ff6f 	bl	8002cb8 <LL_RCC_GetPLL1ClockFreq>
      frequency = PLL_Clocks.PLL_P_Frequency;
 8002dda:	9801      	ldr	r0, [sp, #4]
      break;
 8002ddc:	e7ed      	b.n	8002dba <RCC_GetSystemClockFreq+0x1a>
      frequency = HSE_VALUE;
 8002dde:	4804      	ldr	r0, [pc, #16]	; (8002df0 <RCC_GetSystemClockFreq+0x50>)
 8002de0:	e7eb      	b.n	8002dba <RCC_GetSystemClockFreq+0x1a>
 8002de2:	bf00      	nop
 8002de4:	58024400 	.word	0x58024400
 8002de8:	003d0900 	.word	0x003d0900
 8002dec:	03d09000 	.word	0x03d09000
 8002df0:	007a1200 	.word	0x007a1200

08002df4 <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_HPRE));
 8002df4:	4b04      	ldr	r3, [pc, #16]	; (8002e08 <RCC_GetHCLKClockFreq+0x14>)
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002df6:	4a05      	ldr	r2, [pc, #20]	; (8002e0c <RCC_GetHCLKClockFreq+0x18>)
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	5cd3      	ldrb	r3, [r2, r3]
 8002e00:	f003 031f 	and.w	r3, r3, #31
}
 8002e04:	40d8      	lsrs	r0, r3
 8002e06:	4770      	bx	lr
 8002e08:	58024400 	.word	0x58024400
 8002e0c:	08005b9e 	.word	0x08005b9e

08002e10 <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1));
 8002e10:	4b04      	ldr	r3, [pc, #16]	; (8002e24 <RCC_GetPCLK1ClockFreq+0x14>)
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002e12:	4a05      	ldr	r2, [pc, #20]	; (8002e28 <RCC_GetPCLK1ClockFreq+0x18>)
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002e1a:	5cd3      	ldrb	r3, [r2, r3]
 8002e1c:	f003 031f 	and.w	r3, r3, #31
}
 8002e20:	40d8      	lsrs	r0, r3
 8002e22:	4770      	bx	lr
 8002e24:	58024400 	.word	0x58024400
 8002e28:	08005b9e 	.word	0x08005b9e

08002e2c <RCC_GetPCLK2ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2));
 8002e2c:	4b04      	ldr	r3, [pc, #16]	; (8002e40 <RCC_GetPCLK2ClockFreq+0x14>)
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002e2e:	4a05      	ldr	r2, [pc, #20]	; (8002e44 <RCC_GetPCLK2ClockFreq+0x18>)
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002e36:	5cd3      	ldrb	r3, [r2, r3]
 8002e38:	f003 031f 	and.w	r3, r3, #31
}
 8002e3c:	40d8      	lsrs	r0, r3
 8002e3e:	4770      	bx	lr
 8002e40:	58024400 	.word	0x58024400
 8002e44:	08005b9e 	.word	0x08005b9e

08002e48 <RCC_GetPCLK3ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_D1PPRE));
 8002e48:	4b04      	ldr	r3, [pc, #16]	; (8002e5c <RCC_GetPCLK3ClockFreq+0x14>)
  * @retval PCLK3 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK3ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK3 clock frequency */
  return LL_RCC_CALC_PCLK3_FREQ(HCLK_Frequency, LL_RCC_GetAPB3Prescaler());
 8002e4a:	4a05      	ldr	r2, [pc, #20]	; (8002e60 <RCC_GetPCLK3ClockFreq+0x18>)
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002e52:	5cd3      	ldrb	r3, [r2, r3]
 8002e54:	f003 031f 	and.w	r3, r3, #31
}
 8002e58:	40d8      	lsrs	r0, r3
 8002e5a:	4770      	bx	lr
 8002e5c:	58024400 	.word	0x58024400
 8002e60:	08005b9e 	.word	0x08005b9e

08002e64 <RCC_GetPCLK4ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->D3CFGR, RCC_D3CFGR_D3PPRE));
 8002e64:	4b04      	ldr	r3, [pc, #16]	; (8002e78 <RCC_GetPCLK4ClockFreq+0x14>)
  * @retval PCLK4 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK4ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK4 clock frequency */
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
 8002e66:	4a05      	ldr	r2, [pc, #20]	; (8002e7c <RCC_GetPCLK4ClockFreq+0x18>)
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002e6e:	5cd3      	ldrb	r3, [r2, r3]
 8002e70:	f003 031f 	and.w	r3, r3, #31
}
 8002e74:	40d8      	lsrs	r0, r3
 8002e76:	4770      	bx	lr
 8002e78:	58024400 	.word	0x58024400
 8002e7c:	08005b9e 	.word	0x08005b9e

08002e80 <LL_TIM_Init>:
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e80:	4a2f      	ldr	r2, [pc, #188]	; (8002f40 <LL_TIM_Init+0xc0>)
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002e82:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e84:	4290      	cmp	r0, r2
 8002e86:	d012      	beq.n	8002eae <LL_TIM_Init+0x2e>
 8002e88:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002e8c:	d00f      	beq.n	8002eae <LL_TIM_Init+0x2e>
 8002e8e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002e92:	4290      	cmp	r0, r2
 8002e94:	d00b      	beq.n	8002eae <LL_TIM_Init+0x2e>
 8002e96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e9a:	4290      	cmp	r0, r2
 8002e9c:	d007      	beq.n	8002eae <LL_TIM_Init+0x2e>
 8002e9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ea2:	4290      	cmp	r0, r2
 8002ea4:	d003      	beq.n	8002eae <LL_TIM_Init+0x2e>
 8002ea6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002eaa:	4290      	cmp	r0, r2
 8002eac:	d119      	bne.n	8002ee2 <LL_TIM_Init+0x62>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002eae:	684a      	ldr	r2, [r1, #4]
 8002eb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eb4:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002eb6:	4a22      	ldr	r2, [pc, #136]	; (8002f40 <LL_TIM_Init+0xc0>)
 8002eb8:	4290      	cmp	r0, r2
 8002eba:	d01d      	beq.n	8002ef8 <LL_TIM_Init+0x78>
 8002ebc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002ec0:	d01a      	beq.n	8002ef8 <LL_TIM_Init+0x78>
 8002ec2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002ec6:	4290      	cmp	r0, r2
 8002ec8:	d016      	beq.n	8002ef8 <LL_TIM_Init+0x78>
 8002eca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ece:	4290      	cmp	r0, r2
 8002ed0:	d012      	beq.n	8002ef8 <LL_TIM_Init+0x78>
 8002ed2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ed6:	4290      	cmp	r0, r2
 8002ed8:	d00e      	beq.n	8002ef8 <LL_TIM_Init+0x78>
 8002eda:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002ede:	4290      	cmp	r0, r2
 8002ee0:	d00a      	beq.n	8002ef8 <LL_TIM_Init+0x78>
 8002ee2:	4a18      	ldr	r2, [pc, #96]	; (8002f44 <LL_TIM_Init+0xc4>)
 8002ee4:	4290      	cmp	r0, r2
 8002ee6:	d007      	beq.n	8002ef8 <LL_TIM_Init+0x78>
 8002ee8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002eec:	4290      	cmp	r0, r2
 8002eee:	d003      	beq.n	8002ef8 <LL_TIM_Init+0x78>
 8002ef0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ef4:	4290      	cmp	r0, r2
 8002ef6:	d103      	bne.n	8002f00 <LL_TIM_Init+0x80>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002ef8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002efc:	68ca      	ldr	r2, [r1, #12]
 8002efe:	4313      	orrs	r3, r2
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002f00:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002f02:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002f04:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002f06:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002f08:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f0a:	4b0d      	ldr	r3, [pc, #52]	; (8002f40 <LL_TIM_Init+0xc0>)
 8002f0c:	4298      	cmp	r0, r3
 8002f0e:	d00f      	beq.n	8002f30 <LL_TIM_Init+0xb0>
 8002f10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f14:	4298      	cmp	r0, r3
 8002f16:	d00b      	beq.n	8002f30 <LL_TIM_Init+0xb0>
 8002f18:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8002f1c:	4298      	cmp	r0, r3
 8002f1e:	d007      	beq.n	8002f30 <LL_TIM_Init+0xb0>
 8002f20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f24:	4298      	cmp	r0, r3
 8002f26:	d003      	beq.n	8002f30 <LL_TIM_Init+0xb0>
 8002f28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f2c:	4298      	cmp	r0, r3
 8002f2e:	d101      	bne.n	8002f34 <LL_TIM_Init+0xb4>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002f30:	690b      	ldr	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002f32:	6303      	str	r3, [r0, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002f34:	6943      	ldr	r3, [r0, #20]
 8002f36:	f043 0301 	orr.w	r3, r3, #1
 8002f3a:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 8002f3c:	2000      	movs	r0, #0
 8002f3e:	4770      	bx	lr
 8002f40:	40010000 	.word	0x40010000
 8002f44:	40014000 	.word	0x40014000

08002f48 <LL_TIM_OC_Init>:
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
  ErrorStatus result = ERROR;

  switch (Channel)
 8002f48:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
{
 8002f4c:	b530      	push	{r4, r5, lr}
  switch (Channel)
 8002f4e:	f000 810d 	beq.w	800316c <LL_TIM_OC_Init+0x224>
 8002f52:	d80a      	bhi.n	8002f6a <LL_TIM_OC_Init+0x22>
 8002f54:	2910      	cmp	r1, #16
 8002f56:	f000 8084 	beq.w	8003062 <LL_TIM_OC_Init+0x11a>
 8002f5a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8002f5e:	f000 80c4 	beq.w	80030ea <LL_TIM_OC_Init+0x1a2>
 8002f62:	2901      	cmp	r1, #1
 8002f64:	d03b      	beq.n	8002fde <LL_TIM_OC_Init+0x96>
 8002f66:	2001      	movs	r0, #1
    default:
      break;
  }

  return result;
}
 8002f68:	bd30      	pop	{r4, r5, pc}
  switch (Channel)
 8002f6a:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8002f6e:	f000 8130 	beq.w	80031d2 <LL_TIM_OC_Init+0x28a>
 8002f72:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8002f76:	d1f6      	bne.n	8002f66 <LL_TIM_OC_Init+0x1e>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8002f78:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8002f7a:	6811      	ldr	r1, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8002f7c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002f80:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002f82:	6a03      	ldr	r3, [r0, #32]
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8002f84:	6d44      	ldr	r4, [r0, #84]	; 0x54

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8002f86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8002f8a:	f424 44e0 	bic.w	r4, r4, #28672	; 0x7000
 8002f8e:	ea44 2401 	orr.w	r4, r4, r1, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8002f92:	6911      	ldr	r1, [r2, #16]
 8002f94:	ea43 5301 	orr.w	r3, r3, r1, lsl #20

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8002f98:	6851      	ldr	r1, [r2, #4]
 8002f9a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002f9e:	ea43 5301 	orr.w	r3, r3, r1, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fa2:	49a5      	ldr	r1, [pc, #660]	; (8003238 <LL_TIM_OC_Init+0x2f0>)
 8002fa4:	4288      	cmp	r0, r1
 8002fa6:	d00f      	beq.n	8002fc8 <LL_TIM_OC_Init+0x80>
 8002fa8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002fac:	4288      	cmp	r0, r1
 8002fae:	d00b      	beq.n	8002fc8 <LL_TIM_OC_Init+0x80>
 8002fb0:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 8002fb4:	4288      	cmp	r0, r1
 8002fb6:	d007      	beq.n	8002fc8 <LL_TIM_OC_Init+0x80>
 8002fb8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002fbc:	4288      	cmp	r0, r1
 8002fbe:	d003      	beq.n	8002fc8 <LL_TIM_OC_Init+0x80>
 8002fc0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002fc4:	4288      	cmp	r0, r1
 8002fc6:	d106      	bne.n	8002fd6 <LL_TIM_OC_Init+0x8e>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8002fc8:	6841      	ldr	r1, [r0, #4]
 8002fca:	6995      	ldr	r5, [r2, #24]
 8002fcc:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
 8002fd0:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 8002fd4:	6041      	str	r1, [r0, #4]

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8002fd6:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8002fd8:	6544      	str	r4, [r0, #84]	; 0x54
  WRITE_REG(TIMx->CCR6, CompareValue);
 8002fda:	65c2      	str	r2, [r0, #92]	; 0x5c
 8002fdc:	e03e      	b.n	800305c <LL_TIM_OC_Init+0x114>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002fde:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002fe0:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002fe2:	f023 0301 	bic.w	r3, r3, #1
 8002fe6:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002fe8:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002fea:	6841      	ldr	r1, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002fec:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002fee:	f023 0302 	bic.w	r3, r3, #2
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002ff2:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8002ff6:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8002ffa:	432c      	orrs	r4, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002ffc:	6915      	ldr	r5, [r2, #16]
 8002ffe:	432b      	orrs	r3, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8003000:	6855      	ldr	r5, [r2, #4]
 8003002:	f023 0301 	bic.w	r3, r3, #1
 8003006:	432b      	orrs	r3, r5
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003008:	4d8b      	ldr	r5, [pc, #556]	; (8003238 <LL_TIM_OC_Init+0x2f0>)
 800300a:	42a8      	cmp	r0, r5
 800300c:	d00f      	beq.n	800302e <LL_TIM_OC_Init+0xe6>
 800300e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003012:	42a8      	cmp	r0, r5
 8003014:	d00b      	beq.n	800302e <LL_TIM_OC_Init+0xe6>
 8003016:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 800301a:	42a8      	cmp	r0, r5
 800301c:	d007      	beq.n	800302e <LL_TIM_OC_Init+0xe6>
 800301e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003022:	42a8      	cmp	r0, r5
 8003024:	d003      	beq.n	800302e <LL_TIM_OC_Init+0xe6>
 8003026:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800302a:	42a8      	cmp	r0, r5
 800302c:	d112      	bne.n	8003054 <LL_TIM_OC_Init+0x10c>
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800302e:	6955      	ldr	r5, [r2, #20]
 8003030:	f023 0308 	bic.w	r3, r3, #8
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8003034:	f421 7180 	bic.w	r1, r1, #256	; 0x100
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8003038:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800303c:	6895      	ldr	r5, [r2, #8]
 800303e:	f023 0304 	bic.w	r3, r3, #4
 8003042:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8003046:	6995      	ldr	r5, [r2, #24]
 8003048:	4329      	orrs	r1, r5
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800304a:	69d5      	ldr	r5, [r2, #28]
 800304c:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8003050:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8003054:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003056:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003058:	6184      	str	r4, [r0, #24]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800305a:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800305c:	6203      	str	r3, [r0, #32]
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 800305e:	2000      	movs	r0, #0
      break;
 8003060:	e782      	b.n	8002f68 <LL_TIM_OC_Init+0x20>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8003062:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003064:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8003066:	f023 0310 	bic.w	r3, r3, #16
 800306a:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800306c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800306e:	6841      	ldr	r1, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003070:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8003072:	f023 0320 	bic.w	r3, r3, #32
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003076:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 800307a:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 800307e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8003082:	6915      	ldr	r5, [r2, #16]
 8003084:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8003088:	6855      	ldr	r5, [r2, #4]
 800308a:	f023 0310 	bic.w	r3, r3, #16
 800308e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003092:	4d69      	ldr	r5, [pc, #420]	; (8003238 <LL_TIM_OC_Init+0x2f0>)
 8003094:	42a8      	cmp	r0, r5
 8003096:	d00f      	beq.n	80030b8 <LL_TIM_OC_Init+0x170>
 8003098:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800309c:	42a8      	cmp	r0, r5
 800309e:	d00b      	beq.n	80030b8 <LL_TIM_OC_Init+0x170>
 80030a0:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 80030a4:	42a8      	cmp	r0, r5
 80030a6:	d007      	beq.n	80030b8 <LL_TIM_OC_Init+0x170>
 80030a8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80030ac:	42a8      	cmp	r0, r5
 80030ae:	d003      	beq.n	80030b8 <LL_TIM_OC_Init+0x170>
 80030b0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80030b4:	42a8      	cmp	r0, r5
 80030b6:	d113      	bne.n	80030e0 <LL_TIM_OC_Init+0x198>
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80030b8:	6955      	ldr	r5, [r2, #20]
 80030ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80030be:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80030c2:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80030c6:	6895      	ldr	r5, [r2, #8]
 80030c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030cc:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80030d0:	6995      	ldr	r5, [r2, #24]
 80030d2:	ea41 0185 	orr.w	r1, r1, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80030d6:	69d5      	ldr	r5, [r2, #28]
 80030d8:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 80030dc:	ea41 01c5 	orr.w	r1, r1, r5, lsl #3
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80030e0:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80030e2:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80030e4:	6184      	str	r4, [r0, #24]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80030e6:	6382      	str	r2, [r0, #56]	; 0x38
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80030e8:	e7b8      	b.n	800305c <LL_TIM_OC_Init+0x114>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80030ea:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80030ec:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80030ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030f2:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80030f4:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80030f6:	6841      	ldr	r1, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80030f8:	69c4      	ldr	r4, [r0, #28]
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80030fa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80030fe:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8003102:	432c      	orrs	r4, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8003104:	6915      	ldr	r5, [r2, #16]
 8003106:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800310a:	6855      	ldr	r5, [r2, #4]
 800310c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003110:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003114:	4d48      	ldr	r5, [pc, #288]	; (8003238 <LL_TIM_OC_Init+0x2f0>)
 8003116:	42a8      	cmp	r0, r5
 8003118:	d00f      	beq.n	800313a <LL_TIM_OC_Init+0x1f2>
 800311a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800311e:	42a8      	cmp	r0, r5
 8003120:	d00b      	beq.n	800313a <LL_TIM_OC_Init+0x1f2>
 8003122:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 8003126:	42a8      	cmp	r0, r5
 8003128:	d007      	beq.n	800313a <LL_TIM_OC_Init+0x1f2>
 800312a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800312e:	42a8      	cmp	r0, r5
 8003130:	d003      	beq.n	800313a <LL_TIM_OC_Init+0x1f2>
 8003132:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003136:	42a8      	cmp	r0, r5
 8003138:	d113      	bne.n	8003162 <LL_TIM_OC_Init+0x21a>
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800313a:	6955      	ldr	r5, [r2, #20]
 800313c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8003140:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8003144:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8003148:	6895      	ldr	r5, [r2, #8]
 800314a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800314e:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8003152:	6995      	ldr	r5, [r2, #24]
 8003154:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8003158:	69d5      	ldr	r5, [r2, #28]
 800315a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800315e:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8003162:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003164:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003166:	61c4      	str	r4, [r0, #28]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8003168:	63c2      	str	r2, [r0, #60]	; 0x3c
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800316a:	e777      	b.n	800305c <LL_TIM_OC_Init+0x114>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800316c:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800316e:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8003170:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003174:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003176:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8003178:	6844      	ldr	r4, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800317a:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800317c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003180:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8003184:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8003188:	6915      	ldr	r5, [r2, #16]
 800318a:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800318e:	6855      	ldr	r5, [r2, #4]
 8003190:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003194:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003198:	4d27      	ldr	r5, [pc, #156]	; (8003238 <LL_TIM_OC_Init+0x2f0>)
 800319a:	42a8      	cmp	r0, r5
 800319c:	d00f      	beq.n	80031be <LL_TIM_OC_Init+0x276>
 800319e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80031a2:	42a8      	cmp	r0, r5
 80031a4:	d00b      	beq.n	80031be <LL_TIM_OC_Init+0x276>
 80031a6:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 80031aa:	42a8      	cmp	r0, r5
 80031ac:	d007      	beq.n	80031be <LL_TIM_OC_Init+0x276>
 80031ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80031b2:	42a8      	cmp	r0, r5
 80031b4:	d003      	beq.n	80031be <LL_TIM_OC_Init+0x276>
 80031b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80031ba:	42a8      	cmp	r0, r5
 80031bc:	d104      	bne.n	80031c8 <LL_TIM_OC_Init+0x280>
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80031be:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
 80031c2:	6995      	ldr	r5, [r2, #24]
 80031c4:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80031c8:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80031ca:	6044      	str	r4, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80031cc:	61c1      	str	r1, [r0, #28]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80031ce:	6402      	str	r2, [r0, #64]	; 0x40
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80031d0:	e744      	b.n	800305c <LL_TIM_OC_Init+0x114>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 80031d2:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 80031d4:	6811      	ldr	r1, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 80031d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031da:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80031dc:	6a03      	ldr	r3, [r0, #32]
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80031de:	6d44      	ldr	r4, [r0, #84]	; 0x54
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 80031e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 80031e4:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 80031e8:	430c      	orrs	r4, r1
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 80031ea:	6911      	ldr	r1, [r2, #16]
 80031ec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 80031f0:	6851      	ldr	r1, [r2, #4]
 80031f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031fa:	490f      	ldr	r1, [pc, #60]	; (8003238 <LL_TIM_OC_Init+0x2f0>)
 80031fc:	4288      	cmp	r0, r1
 80031fe:	d00f      	beq.n	8003220 <LL_TIM_OC_Init+0x2d8>
 8003200:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003204:	4288      	cmp	r0, r1
 8003206:	d00b      	beq.n	8003220 <LL_TIM_OC_Init+0x2d8>
 8003208:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 800320c:	4288      	cmp	r0, r1
 800320e:	d007      	beq.n	8003220 <LL_TIM_OC_Init+0x2d8>
 8003210:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003214:	4288      	cmp	r0, r1
 8003216:	d003      	beq.n	8003220 <LL_TIM_OC_Init+0x2d8>
 8003218:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800321c:	4288      	cmp	r0, r1
 800321e:	d106      	bne.n	800322e <LL_TIM_OC_Init+0x2e6>
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8003220:	6841      	ldr	r1, [r0, #4]
 8003222:	6995      	ldr	r5, [r2, #24]
 8003224:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8003228:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 800322c:	6041      	str	r1, [r0, #4]
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 800322e:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8003230:	6544      	str	r4, [r0, #84]	; 0x54
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8003232:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8003234:	6582      	str	r2, [r0, #88]	; 0x58
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003236:	e711      	b.n	800305c <LL_TIM_OC_Init+0x114>
 8003238:	40010000 	.word	0x40010000

0800323c <LL_SetFlashLatency>:
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */



  /* Frequency cannot be equal to 0 */
  if (HCLK_Frequency == 0U)
 800323c:	b320      	cbz	r0, 8003288 <LL_SetFlashLatency+0x4c>
  return (uint32_t)(READ_BIT(PWR->D3CR, PWR_D3CR_VOS));
 800323e:	4a2a      	ldr	r2, [pc, #168]	; (80032e8 <LL_SetFlashLatency+0xac>)
 8003240:	6993      	ldr	r3, [r2, #24]
 8003242:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
    {
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY1_FREQ) && (HCLK_Frequency <= UTILS_SCALE1_LATENCY2_FREQ))
#endif /* STM32H7_DEV_ID == 0x480UL */
#else
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 8003246:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800324a:	d11f      	bne.n	800328c <LL_SetFlashLatency+0x50>
    {
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY1_FREQ) && (HCLK_Frequency <= UTILS_SCALE1_LATENCY2_FREQ))
 800324c:	4b27      	ldr	r3, [pc, #156]	; (80032ec <LL_SetFlashLatency+0xb0>)
 800324e:	4a28      	ldr	r2, [pc, #160]	; (80032f0 <LL_SetFlashLatency+0xb4>)
 8003250:	4403      	add	r3, r0
 8003252:	4293      	cmp	r3, r2
 8003254:	d942      	bls.n	80032dc <LL_SetFlashLatency+0xa0>
#endif /* STM32H7_DEV_ID == 0x480UL || STM32H7_DEV_ID == 0x483UL */
      {
        /* 140 < HCLK <= 210 => 2WS (3 CPU cycles) */
        latency = LL_FLASH_LATENCY_2;
      }
      else if((HCLK_Frequency > UTILS_SCALE1_LATENCY0_FREQ) && (HCLK_Frequency <= UTILS_SCALE1_LATENCY1_FREQ))
 8003256:	4b27      	ldr	r3, [pc, #156]	; (80032f4 <LL_SetFlashLatency+0xb8>)
 8003258:	4a27      	ldr	r2, [pc, #156]	; (80032f8 <LL_SetFlashLatency+0xbc>)
 800325a:	4403      	add	r3, r0
 800325c:	4293      	cmp	r3, r2
 800325e:	d93f      	bls.n	80032e0 <LL_SetFlashLatency+0xa4>
      {
        /* 70 < HCLK <= 140 => 1WS (2 CPU cycles) */
        latency = LL_FLASH_LATENCY_1;
      }
      else if(HCLK_Frequency <= UTILS_SCALE1_LATENCY0_FREQ)
 8003260:	4b26      	ldr	r3, [pc, #152]	; (80032fc <LL_SetFlashLatency+0xc0>)
      else if((HCLK_Frequency > UTILS_SCALE3_LATENCY0_FREQ) && (HCLK_Frequency <= UTILS_SCALE3_LATENCY1_FREQ))
      {
        /* 45 < HCLK <= 90 => 1WS (2 CPU cycles) */
        latency = LL_FLASH_LATENCY_1;
      }
      else if(HCLK_Frequency <= UTILS_SCALE3_LATENCY0_FREQ)
 8003262:	4298      	cmp	r0, r3
 8003264:	d810      	bhi.n	8003288 <LL_SetFlashLatency+0x4c>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8003266:	2300      	movs	r3, #0
  *         @arg @ref LL_FLASH_LATENCY_7
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8003268:	4925      	ldr	r1, [pc, #148]	; (8003300 <LL_SetFlashLatency+0xc4>)
 800326a:	680a      	ldr	r2, [r1, #0]
 800326c:	f022 020f 	bic.w	r2, r2, #15
 8003270:	431a      	orrs	r2, r3
 8003272:	600a      	str	r2, [r1, #0]
  *         @arg @ref LL_FLASH_LATENCY_6
  *         @arg @ref LL_FLASH_LATENCY_7
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8003274:	680a      	ldr	r2, [r1, #0]
 8003276:	f002 020f 	and.w	r2, r2, #15
      do
      {
        /* Wait for Flash latency to be updated */
        getlatency = LL_FLASH_GetLatency();
        timeout--;
      } while ((getlatency != latency) && (timeout > 0U));
 800327a:	4293      	cmp	r3, r2
 800327c:	d032      	beq.n	80032e4 <LL_SetFlashLatency+0xa8>
 800327e:	680a      	ldr	r2, [r1, #0]
 8003280:	f002 020f 	and.w	r2, r2, #15
 8003284:	4293      	cmp	r3, r2
 8003286:	d02d      	beq.n	80032e4 <LL_SetFlashLatency+0xa8>
    status = ERROR;
 8003288:	2001      	movs	r0, #1
 800328a:	4770      	bx	lr
 800328c:	6993      	ldr	r3, [r2, #24]
 800328e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    else if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 8003292:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003296:	d10e      	bne.n	80032b6 <LL_SetFlashLatency+0x7a>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY2_FREQ) && (HCLK_Frequency <= UTILS_SCALE2_LATENCY3_FREQ))
 8003298:	4a1a      	ldr	r2, [pc, #104]	; (8003304 <LL_SetFlashLatency+0xc8>)
 800329a:	4b1b      	ldr	r3, [pc, #108]	; (8003308 <LL_SetFlashLatency+0xcc>)
 800329c:	4402      	add	r2, r0
 800329e:	429a      	cmp	r2, r3
 80032a0:	d91a      	bls.n	80032d8 <LL_SetFlashLatency+0x9c>
      else if((HCLK_Frequency > UTILS_SCALE2_LATENCY1_FREQ) && (HCLK_Frequency <= UTILS_SCALE2_LATENCY2_FREQ))
 80032a2:	4a1a      	ldr	r2, [pc, #104]	; (800330c <LL_SetFlashLatency+0xd0>)
 80032a4:	4402      	add	r2, r0
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d918      	bls.n	80032dc <LL_SetFlashLatency+0xa0>
      else if((HCLK_Frequency > UTILS_SCALE2_LATENCY0_FREQ) && (HCLK_Frequency <= UTILS_SCALE2_LATENCY1_FREQ))
 80032aa:	4a19      	ldr	r2, [pc, #100]	; (8003310 <LL_SetFlashLatency+0xd4>)
      else if((HCLK_Frequency > UTILS_SCALE3_LATENCY0_FREQ) && (HCLK_Frequency <= UTILS_SCALE3_LATENCY1_FREQ))
 80032ac:	4402      	add	r2, r0
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d916      	bls.n	80032e0 <LL_SetFlashLatency+0xa4>
      else if(HCLK_Frequency <= UTILS_SCALE3_LATENCY0_FREQ)
 80032b2:	3301      	adds	r3, #1
 80032b4:	e7d5      	b.n	8003262 <LL_SetFlashLatency+0x26>
      if((HCLK_Frequency > UTILS_SCALE3_LATENCY3_FREQ) && (HCLK_Frequency <= UTILS_SCALE3_LATENCY4_FREQ))
 80032b6:	4a17      	ldr	r2, [pc, #92]	; (8003314 <LL_SetFlashLatency+0xd8>)
 80032b8:	4b17      	ldr	r3, [pc, #92]	; (8003318 <LL_SetFlashLatency+0xdc>)
 80032ba:	4402      	add	r2, r0
 80032bc:	429a      	cmp	r2, r3
 80032be:	d909      	bls.n	80032d4 <LL_SetFlashLatency+0x98>
      else if((HCLK_Frequency > UTILS_SCALE3_LATENCY2_FREQ) && (HCLK_Frequency <= UTILS_SCALE3_LATENCY3_FREQ))
 80032c0:	4a16      	ldr	r2, [pc, #88]	; (800331c <LL_SetFlashLatency+0xe0>)
 80032c2:	4402      	add	r2, r0
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d907      	bls.n	80032d8 <LL_SetFlashLatency+0x9c>
      else if((HCLK_Frequency > UTILS_SCALE3_LATENCY1_FREQ) && (HCLK_Frequency <= UTILS_SCALE3_LATENCY2_FREQ))
 80032c8:	4a15      	ldr	r2, [pc, #84]	; (8003320 <LL_SetFlashLatency+0xe4>)
 80032ca:	4402      	add	r2, r0
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d905      	bls.n	80032dc <LL_SetFlashLatency+0xa0>
      else if((HCLK_Frequency > UTILS_SCALE3_LATENCY0_FREQ) && (HCLK_Frequency <= UTILS_SCALE3_LATENCY1_FREQ))
 80032d0:	4a14      	ldr	r2, [pc, #80]	; (8003324 <LL_SetFlashLatency+0xe8>)
 80032d2:	e7eb      	b.n	80032ac <LL_SetFlashLatency+0x70>
        latency = LL_FLASH_LATENCY_4;
 80032d4:	2304      	movs	r3, #4
 80032d6:	e7c7      	b.n	8003268 <LL_SetFlashLatency+0x2c>
        latency = LL_FLASH_LATENCY_3;
 80032d8:	2303      	movs	r3, #3
 80032da:	e7c5      	b.n	8003268 <LL_SetFlashLatency+0x2c>
        latency = LL_FLASH_LATENCY_2;
 80032dc:	2302      	movs	r3, #2
 80032de:	e7c3      	b.n	8003268 <LL_SetFlashLatency+0x2c>
        latency = LL_FLASH_LATENCY_1;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e7c1      	b.n	8003268 <LL_SetFlashLatency+0x2c>
 80032e4:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 80032e6:	4770      	bx	lr
 80032e8:	58024800 	.word	0x58024800
 80032ec:	f7a7c4ff 	.word	0xf7a7c4ff
 80032f0:	05f5e0ff 	.word	0x05f5e0ff
 80032f4:	fbd3e27f 	.word	0xfbd3e27f
 80032f8:	042c1d7f 	.word	0x042c1d7f
 80032fc:	042c1d80 	.word	0x042c1d80
 8003300:	52002000 	.word	0x52002000
 8003304:	f62a4cbf 	.word	0xf62a4cbf
 8003308:	03473bbf 	.word	0x03473bbf
 800330c:	f971887f 	.word	0xf971887f
 8003310:	fcb8c43f 	.word	0xfcb8c43f
 8003314:	f5456aff 	.word	0xf5456aff
 8003318:	02aea53f 	.word	0x02aea53f
 800331c:	f7f4103f 	.word	0xf7f4103f
 8003320:	faa2b57f 	.word	0xfaa2b57f
 8003324:	fd515abf 	.word	0xfd515abf

08003328 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
 8003328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 800332a:	4b10      	ldr	r3, [pc, #64]	; (800336c <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
 800332c:	4f10      	ldr	r7, [pc, #64]	; (8003370 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 800332e:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8003332:	3001      	adds	r0, #1
 8003334:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8003338:	42ae      	cmp	r6, r5
 800333a:	d800      	bhi.n	800333e <z_sys_init_run_level+0x16>
		}
	}
}
 800333c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
 800333e:	e9d5 3400 	ldrd	r3, r4, [r5]
 8003342:	4620      	mov	r0, r4
 8003344:	4798      	blx	r3
 8003346:	b170      	cbz	r0, 8003366 <z_sys_init_run_level+0x3e>
 8003348:	b16c      	cbz	r4, 8003366 <z_sys_init_run_level+0x3e>
				(dev - __device_start));
 800334a:	1be4      	subs	r4, r4, r7
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
 800334c:	4a09      	ldr	r2, [pc, #36]	; (8003374 <z_sys_init_run_level+0x4c>)
	*(volatile uint32_t *)addr = temp | (1 << bit);
 800334e:	2301      	movs	r3, #1
 8003350:	1124      	asrs	r4, r4, #4
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
 8003352:	0961      	lsrs	r1, r4, #5
 8003354:	f004 041f 	and.w	r4, r4, #31
	uint32_t temp = *(volatile uint32_t *)addr;
 8003358:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	*(volatile uint32_t *)addr = temp | (1 << bit);
 800335c:	fa03 f404 	lsl.w	r4, r3, r4
 8003360:	4304      	orrs	r4, r0
 8003362:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8003366:	3508      	adds	r5, #8
 8003368:	e7e6      	b.n	8003338 <z_sys_init_run_level+0x10>
 800336a:	bf00      	nop
 800336c:	080053ac 	.word	0x080053ac
 8003370:	24000034 	.word	0x24000034
 8003374:	24000134 	.word	0x24000134

08003378 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
 8003378:	4b08      	ldr	r3, [pc, #32]	; (800339c <z_device_ready+0x24>)
 800337a:	1ac0      	subs	r0, r0, r3
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
 800337c:	4b08      	ldr	r3, [pc, #32]	; (80033a0 <z_device_ready+0x28>)
 800337e:	1100      	asrs	r0, r0, #4
 8003380:	0942      	lsrs	r2, r0, #5
 8003382:	f000 001f 	and.w	r0, r0, #31
	uint32_t temp = *(volatile uint32_t *)addr;
 8003386:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
 800338a:	2301      	movs	r3, #1
 800338c:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
 8003390:	4210      	tst	r0, r2
}
 8003392:	bf0c      	ite	eq
 8003394:	4618      	moveq	r0, r3
 8003396:	2000      	movne	r0, #0
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	24000034 	.word	0x24000034
 80033a0:	24000134 	.word	0x24000134

080033a4 <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
 80033a4:	4911      	ldr	r1, [pc, #68]	; (80033ec <z_impl_device_get_binding+0x48>)
{
 80033a6:	b570      	push	{r4, r5, r6, lr}
 80033a8:	4605      	mov	r5, r0
	for (dev = __device_start; dev != __device_end; dev++) {
 80033aa:	4c11      	ldr	r4, [pc, #68]	; (80033f0 <z_impl_device_get_binding+0x4c>)
 80033ac:	460e      	mov	r6, r1
 80033ae:	428c      	cmp	r4, r1
 80033b0:	d104      	bne.n	80033bc <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
 80033b2:	4c0f      	ldr	r4, [pc, #60]	; (80033f0 <z_impl_device_get_binding+0x4c>)
 80033b4:	42b4      	cmp	r4, r6
 80033b6:	d10a      	bne.n	80033ce <z_impl_device_get_binding+0x2a>
	return NULL;
 80033b8:	2400      	movs	r4, #0
 80033ba:	e014      	b.n	80033e6 <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
 80033bc:	4620      	mov	r0, r4
 80033be:	f7ff ffdb 	bl	8003378 <z_device_ready>
 80033c2:	b110      	cbz	r0, 80033ca <z_impl_device_get_binding+0x26>
 80033c4:	6823      	ldr	r3, [r4, #0]
 80033c6:	42ab      	cmp	r3, r5
 80033c8:	d00d      	beq.n	80033e6 <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
 80033ca:	3410      	adds	r4, #16
 80033cc:	e7ef      	b.n	80033ae <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
 80033ce:	4620      	mov	r0, r4
 80033d0:	f7ff ffd2 	bl	8003378 <z_device_ready>
 80033d4:	b908      	cbnz	r0, 80033da <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
 80033d6:	3410      	adds	r4, #16
 80033d8:	e7ec      	b.n	80033b4 <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
 80033da:	6821      	ldr	r1, [r4, #0]
 80033dc:	4628      	mov	r0, r5
 80033de:	f001 f8a5 	bl	800452c <strcmp>
 80033e2:	2800      	cmp	r0, #0
 80033e4:	d1f7      	bne.n	80033d6 <z_impl_device_get_binding+0x32>
}
 80033e6:	4620      	mov	r0, r4
 80033e8:	bd70      	pop	{r4, r5, r6, pc}
 80033ea:	bf00      	nop
 80033ec:	24000134 	.word	0x24000134
 80033f0:	24000034 	.word	0x24000034

080033f4 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 80033f4:	b510      	push	{r4, lr}
 80033f6:	4604      	mov	r4, r0
		arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
 80033f8:	f7fd fe66 	bl	80010c8 <z_impl_log_panic>
 80033fc:	4806      	ldr	r0, [pc, #24]	; (8003418 <k_sys_fatal_error_handler+0x24>)
 80033fe:	4b07      	ldr	r3, [pc, #28]	; (800341c <k_sys_fatal_error_handler+0x28>)
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
 8003400:	4907      	ldr	r1, [pc, #28]	; (8003420 <k_sys_fatal_error_handler+0x2c>)
 8003402:	1a1b      	subs	r3, r3, r0
 8003404:	08db      	lsrs	r3, r3, #3
 8003406:	019b      	lsls	r3, r3, #6
 8003408:	f043 0001 	orr.w	r0, r3, #1
 800340c:	f000 ff98 	bl	8004340 <log_string_sync>
	arch_system_halt(reason);
 8003410:	4620      	mov	r0, r4
 8003412:	f001 fac4 	bl	800499e <arch_system_halt>
 8003416:	bf00      	nop
 8003418:	08005128 	.word	0x08005128
 800341c:	08005138 	.word	0x08005138
 8003420:	08005bae 	.word	0x08005bae

08003424 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8003424:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003428:	4606      	mov	r6, r0
 800342a:	460f      	mov	r7, r1
 800342c:	f04f 0310 	mov.w	r3, #16
 8003430:	f3ef 8811 	mrs	r8, BASEPRI
 8003434:	f383 8811 	msr	BASEPRI, r3
 8003438:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
 800343c:	f000 fc56 	bl	8003cec <z_impl_k_current_get>
 8003440:	4c20      	ldr	r4, [pc, #128]	; (80034c4 <z_fatal_error+0xa0>)
 8003442:	4b21      	ldr	r3, [pc, #132]	; (80034c8 <z_fatal_error+0xa4>)
 8003444:	2e04      	cmp	r6, #4
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
 8003446:	f04f 0200 	mov.w	r2, #0
 800344a:	4605      	mov	r5, r0
 800344c:	eba4 0403 	sub.w	r4, r4, r3
 8003450:	bf94      	ite	ls
 8003452:	4b1e      	ldrls	r3, [pc, #120]	; (80034cc <z_fatal_error+0xa8>)
 8003454:	4b1e      	ldrhi	r3, [pc, #120]	; (80034d0 <z_fatal_error+0xac>)
 8003456:	ea4f 04d4 	mov.w	r4, r4, lsr #3
 800345a:	bf98      	it	ls
 800345c:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
 8003460:	9200      	str	r2, [sp, #0]
 8003462:	4632      	mov	r2, r6
 8003464:	01a4      	lsls	r4, r4, #6
 8003466:	491b      	ldr	r1, [pc, #108]	; (80034d4 <z_fatal_error+0xb0>)
 8003468:	f044 0001 	orr.w	r0, r4, #1
 800346c:	f000 ff68 	bl	8004340 <log_string_sync>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
 8003470:	b147      	cbz	r7, 8003484 <z_fatal_error+0x60>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003478:	b123      	cbz	r3, 8003484 <z_fatal_error+0x60>
		LOG_ERR("Fault during interrupt handling\n");
 800347a:	4917      	ldr	r1, [pc, #92]	; (80034d8 <z_fatal_error+0xb4>)
 800347c:	f044 0001 	orr.w	r0, r4, #1
 8003480:	f000 ff5e 	bl	8004340 <log_string_sync>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
 8003484:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = thread ? k_thread_name_get(thread) : NULL;
 8003488:	b12d      	cbz	r5, 8003496 <z_fatal_error+0x72>
 800348a:	4628      	mov	r0, r5
 800348c:	f001 fb11 	bl	8004ab2 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
 8003490:	b108      	cbz	r0, 8003496 <z_fatal_error+0x72>
 8003492:	7803      	ldrb	r3, [r0, #0]
 8003494:	b903      	cbnz	r3, 8003498 <z_fatal_error+0x74>
		thread_name = "unknown";
 8003496:	4811      	ldr	r0, [pc, #68]	; (80034dc <z_fatal_error+0xb8>)
	LOG_ERR("Current thread: %p (%s)", thread,
 8003498:	f000 ff65 	bl	8004366 <log_strdup>
 800349c:	462a      	mov	r2, r5
 800349e:	4603      	mov	r3, r0
 80034a0:	490f      	ldr	r1, [pc, #60]	; (80034e0 <z_fatal_error+0xbc>)
 80034a2:	4620      	mov	r0, r4
 80034a4:	f000 ff4c 	bl	8004340 <log_string_sync>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
 80034a8:	4639      	mov	r1, r7
 80034aa:	4630      	mov	r0, r6
 80034ac:	f7ff ffa2 	bl	80033f4 <k_sys_fatal_error_handler>
	__asm__ volatile(
 80034b0:	f388 8811 	msr	BASEPRI, r8
 80034b4:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 80034b8:	4628      	mov	r0, r5
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
 80034ba:	b002      	add	sp, #8
 80034bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80034c0:	f7fe bf5c 	b.w	800237c <z_impl_k_thread_abort>
 80034c4:	08005138 	.word	0x08005138
 80034c8:	08005128 	.word	0x08005128
 80034cc:	080053c4 	.word	0x080053c4
 80034d0:	08005bbd 	.word	0x08005bbd
 80034d4:	08005bd3 	.word	0x08005bd3
 80034d8:	08005bfb 	.word	0x08005bfb
 80034dc:	08005bcb 	.word	0x08005bcb
 80034e0:	08005c1c 	.word	0x08005c1c

080034e4 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
 80034e4:	4807      	ldr	r0, [pc, #28]	; (8003504 <z_bss_zero+0x20>)
 80034e6:	2100      	movs	r1, #0
 80034e8:	4a07      	ldr	r2, [pc, #28]	; (8003508 <z_bss_zero+0x24>)
{
 80034ea:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
 80034ec:	1a12      	subs	r2, r2, r0
 80034ee:	f001 f854 	bl	800459a <memset>
#if DT_NODE_HAS_STATUS(DT_CHOSEN(zephyr_ccm), okay)
	(void)memset(&__ccm_bss_start, 0,
		     ((uint32_t) &__ccm_bss_end - (uint32_t) &__ccm_bss_start));
#endif
#if DT_NODE_HAS_STATUS(DT_CHOSEN(zephyr_dtcm), okay)
	(void)memset(&__dtcm_bss_start, 0,
 80034f2:	4806      	ldr	r0, [pc, #24]	; (800350c <z_bss_zero+0x28>)
 80034f4:	4a06      	ldr	r2, [pc, #24]	; (8003510 <z_bss_zero+0x2c>)
 80034f6:	2100      	movs	r1, #0
 80034f8:	1a12      	subs	r2, r2, r0
#endif	/* CONFIG_CODE_DATA_RELOCATION */
#ifdef CONFIG_COVERAGE_GCOV
	(void)memset(&__gcov_bss_start, 0,
		 ((uint32_t) &__gcov_bss_end - (uint32_t) &__gcov_bss_start));
#endif
}
 80034fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memset(&__dtcm_bss_start, 0,
 80034fe:	f001 b84c 	b.w	800459a <memset>
 8003502:	bf00      	nop
 8003504:	24000148 	.word	0x24000148
 8003508:	24000404 	.word	0x24000404
 800350c:	20000000 	.word	0x20000000
 8003510:	20000000 	.word	0x20000000

08003514 <z_data_copy>:
 * @return N/A
 */
void z_data_copy(void)
{
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
 8003514:	4809      	ldr	r0, [pc, #36]	; (800353c <z_data_copy+0x28>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
 8003516:	4a0a      	ldr	r2, [pc, #40]	; (8003540 <z_data_copy+0x2c>)
 8003518:	490a      	ldr	r1, [pc, #40]	; (8003544 <z_data_copy+0x30>)
 800351a:	1a12      	subs	r2, r2, r0
{
 800351c:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
 800351e:	f001 f811 	bl	8004544 <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
 8003522:	4a09      	ldr	r2, [pc, #36]	; (8003548 <z_data_copy+0x34>)
 8003524:	4909      	ldr	r1, [pc, #36]	; (800354c <z_data_copy+0x38>)
 8003526:	480a      	ldr	r0, [pc, #40]	; (8003550 <z_data_copy+0x3c>)
 8003528:	f001 f80c 	bl	8004544 <memcpy>
	(void)memcpy(&__ccm_data_start, &__ccm_data_rom_start,
		 __ccm_data_end - __ccm_data_start);
#endif
#if DT_NODE_HAS_STATUS(DT_CHOSEN(zephyr_dtcm), okay)
	(void)memcpy(&__dtcm_data_start, &__dtcm_data_rom_start,
		 __dtcm_data_end - __dtcm_data_start);
 800352c:	4809      	ldr	r0, [pc, #36]	; (8003554 <z_data_copy+0x40>)
	(void)memcpy(&__dtcm_data_start, &__dtcm_data_rom_start,
 800352e:	4a0a      	ldr	r2, [pc, #40]	; (8003558 <z_data_copy+0x44>)
 8003530:	490a      	ldr	r1, [pc, #40]	; (800355c <z_data_copy+0x48>)
 8003532:	1a12      	subs	r2, r2, r0
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 8003534:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__dtcm_data_start, &__dtcm_data_rom_start,
 8003538:	f001 b804 	b.w	8004544 <memcpy>
 800353c:	24000000 	.word	0x24000000
 8003540:	24000148 	.word	0x24000148
 8003544:	08005cd0 	.word	0x08005cd0
 8003548:	00000000 	.word	0x00000000
 800354c:	08005cd0 	.word	0x08005cd0
 8003550:	24000000 	.word	0x24000000
 8003554:	20000000 	.word	0x20000000
 8003558:	20000000 	.word	0x20000000
 800355c:	08005e18 	.word	0x08005e18

08003560 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
 8003560:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
 8003562:	2201      	movs	r2, #1
 8003564:	4b0b      	ldr	r3, [pc, #44]	; (8003594 <bg_thread_main+0x34>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 8003566:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
 8003568:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 800356a:	f7ff fedd 	bl	8003328 <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
 800356e:	4a0a      	ldr	r2, [pc, #40]	; (8003598 <bg_thread_main+0x38>)
 8003570:	490a      	ldr	r1, [pc, #40]	; (800359c <bg_thread_main+0x3c>)
 8003572:	480b      	ldr	r0, [pc, #44]	; (80035a0 <bg_thread_main+0x40>)
 8003574:	f000 fde0 	bl	8004138 <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 8003578:	2003      	movs	r0, #3
 800357a:	f7ff fed5 	bl	8003328 <z_sys_init_run_level>

	z_init_static_threads();
 800357e:	f000 fc0d 	bl	8003d9c <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
 8003582:	f7fd facb 	bl	8000b1c <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 8003586:	4a07      	ldr	r2, [pc, #28]	; (80035a4 <bg_thread_main+0x44>)
 8003588:	7b13      	ldrb	r3, [r2, #12]
 800358a:	f023 0301 	bic.w	r3, r3, #1
 800358e:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 8003590:	bd08      	pop	{r3, pc}
 8003592:	bf00      	nop
 8003594:	24000400 	.word	0x24000400
 8003598:	08005558 	.word	0x08005558
 800359c:	08005c7e 	.word	0x08005c7e
 80035a0:	08005c9f 	.word	0x08005c9f
 80035a4:	240001c8 	.word	0x240001c8

080035a8 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
 80035a8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80035ac:	b0a7      	sub	sp, #156	; 0x9c
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 80035ae:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 80036a0 <z_cstart+0xf8>
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
 80035b2:	f7fd fd2b 	bl	800100c <log_core_init>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80035b6:	f389 8808 	msr	MSP, r9
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ba:	2400      	movs	r4, #0
 80035bc:	4d30      	ldr	r5, [pc, #192]	; (8003680 <z_cstart+0xd8>)
 80035be:	23f0      	movs	r3, #240	; 0xf0
	_kernel.ready_q.cache = &z_main_thread;
 80035c0:	4e30      	ldr	r6, [pc, #192]	; (8003684 <z_cstart+0xdc>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 80035c2:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 80036a4 <z_cstart+0xfc>
 80035c6:	f04f 0b01 	mov.w	fp, #1
 80035ca:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 80035ce:	77ec      	strb	r4, [r5, #31]
 80035d0:	762c      	strb	r4, [r5, #24]
 80035d2:	766c      	strb	r4, [r5, #25]
 80035d4:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 80035d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	z_setup_new_thread(thread, stack,
 80035d8:	4f2b      	ldr	r7, [pc, #172]	; (8003688 <z_cstart+0xe0>)
 80035da:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80035de:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 80035e0:	f7fe feaa 	bl	8002338 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 80035e4:	f7fe fbee 	bl	8001dc4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 80035e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 80035ec:	4620      	mov	r0, r4
 80035ee:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 80035f0:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
 80035f2:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
 80035f6:	4d25      	ldr	r5, [pc, #148]	; (800368c <z_cstart+0xe4>)
	dummy_thread->base.user_options = K_ESSENTIAL;
 80035f8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
 80035fc:	ab06      	add	r3, sp, #24
 80035fe:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
 8003600:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
 8003604:	f7ff fe90 	bl	8003328 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 8003608:	2001      	movs	r0, #1
 800360a:	f7ff fe8d 	bl	8003328 <z_sys_init_run_level>
	z_sched_init();
 800360e:	f000 faf3 	bl	8003bf8 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8003612:	4b1f      	ldr	r3, [pc, #124]	; (8003690 <z_cstart+0xe8>)
	_kernel.ready_q.cache = &z_main_thread;
 8003614:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8003616:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800361a:	491e      	ldr	r1, [pc, #120]	; (8003694 <z_cstart+0xec>)
 800361c:	4630      	mov	r0, r6
 800361e:	9305      	str	r3, [sp, #20]
 8003620:	4653      	mov	r3, sl
 8003622:	9400      	str	r4, [sp, #0]
 8003624:	e9cd 4b03 	strd	r4, fp, [sp, #12]
 8003628:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800362c:	f000 fb84 	bl	8003d38 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8003630:	7b73      	ldrb	r3, [r6, #13]
 8003632:	4680      	mov	r8, r0
	z_ready_thread(&z_main_thread);
 8003634:	4630      	mov	r0, r6
 8003636:	f023 0304 	bic.w	r3, r3, #4
 800363a:	7373      	strb	r3, [r6, #13]
 800363c:	f001 f9e4 	bl	8004a08 <z_ready_thread>
	z_setup_new_thread(thread, stack,
 8003640:	230f      	movs	r3, #15
 8003642:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003646:	4914      	ldr	r1, [pc, #80]	; (8003698 <z_cstart+0xf0>)
 8003648:	4638      	mov	r0, r7
 800364a:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800364e:	e9cd b404 	strd	fp, r4, [sp, #16]
 8003652:	4b12      	ldr	r3, [pc, #72]	; (800369c <z_cstart+0xf4>)
 8003654:	e9cd 5400 	strd	r5, r4, [sp]
 8003658:	f000 fb6e 	bl	8003d38 <z_setup_new_thread>
 800365c:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 800365e:	4652      	mov	r2, sl
 8003660:	4641      	mov	r1, r8
 8003662:	f023 0304 	bic.w	r3, r3, #4
 8003666:	4630      	mov	r0, r6
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
 8003668:	60ef      	str	r7, [r5, #12]
 800366a:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
 800366c:	f105 031c 	add.w	r3, r5, #28
		_kernel.cpus[i].id = i;
 8003670:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
 8003672:	f8c5 9004 	str.w	r9, [r5, #4]
	list->tail = (sys_dnode_t *)list;
 8003676:	e9c5 3307 	strd	r3, r3, [r5, #28]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 800367a:	f7fe fb89 	bl	8001d90 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 800367e:	bf00      	nop
 8003680:	e000ed00 	.word	0xe000ed00
 8003684:	240001c8 	.word	0x240001c8
 8003688:	24000148 	.word	0x24000148
 800368c:	240003bc 	.word	0x240003bc
 8003690:	08005cc6 	.word	0x08005cc6
 8003694:	24000420 	.word	0x24000420
 8003698:	24000840 	.word	0x24000840
 800369c:	08004b43 	.word	0x08004b43
 80036a0:	240011c0 	.word	0x240011c0
 80036a4:	08003561 	.word	0x08003561

080036a8 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
 80036a8:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 80036aa:	4b0e      	ldr	r3, [pc, #56]	; (80036e4 <init_mem_slab_module+0x3c>)
 80036ac:	4c0e      	ldr	r4, [pc, #56]	; (80036e8 <init_mem_slab_module+0x40>)
 80036ae:	42a3      	cmp	r3, r4
 80036b0:	d301      	bcc.n	80036b6 <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
 80036b2:	2000      	movs	r0, #0
	return rc;
}
 80036b4:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
 80036b6:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
 80036ba:	ea41 0200 	orr.w	r2, r1, r0
 80036be:	f012 0203 	ands.w	r2, r2, #3
 80036c2:	d10b      	bne.n	80036dc <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
 80036c4:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
 80036c6:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
 80036c8:	42aa      	cmp	r2, r5
 80036ca:	d101      	bne.n	80036d0 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 80036cc:	331c      	adds	r3, #28
 80036ce:	e7ee      	b.n	80036ae <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
 80036d0:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
 80036d2:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
 80036d4:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
 80036d6:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
 80036d8:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
 80036da:	e7f5      	b.n	80036c8 <init_mem_slab_module+0x20>
		return -EINVAL;
 80036dc:	f06f 0015 	mvn.w	r0, #21
	return rc;
 80036e0:	e7e8      	b.n	80036b4 <init_mem_slab_module+0xc>
 80036e2:	bf00      	nop
 80036e4:	24000138 	.word	0x24000138
 80036e8:	24000138 	.word	0x24000138

080036ec <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
 80036ec:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
 80036ee:	4c08      	ldr	r4, [pc, #32]	; (8003710 <z_reset_time_slice+0x24>)
 80036f0:	6823      	ldr	r3, [r4, #0]
 80036f2:	b15b      	cbz	r3, 800370c <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
 80036f4:	f7fe fa84 	bl	8001c00 <z_clock_elapsed>
 80036f8:	4603      	mov	r3, r0
 80036fa:	6820      	ldr	r0, [r4, #0]
		z_set_timeout_expiry(slice_time, false);
 80036fc:	2100      	movs	r1, #0
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
 80036fe:	4a05      	ldr	r2, [pc, #20]	; (8003714 <z_reset_time_slice+0x28>)
 8003700:	4403      	add	r3, r0
	}
}
 8003702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
 8003706:	6153      	str	r3, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
 8003708:	f001 b9fb 	b.w	8004b02 <z_set_timeout_expiry>
}
 800370c:	bd10      	pop	{r4, pc}
 800370e:	bf00      	nop
 8003710:	240003f4 	.word	0x240003f4
 8003714:	240003bc 	.word	0x240003bc

08003718 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
 8003718:	b510      	push	{r4, lr}
	__asm__ volatile(
 800371a:	f04f 0310 	mov.w	r3, #16
 800371e:	f3ef 8411 	mrs	r4, BASEPRI
 8003722:	f383 8811 	msr	BASEPRI, r3
 8003726:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
 800372a:	2200      	movs	r2, #0
 800372c:	4b07      	ldr	r3, [pc, #28]	; (800374c <k_sched_time_slice_set+0x34>)
 800372e:	615a      	str	r2, [r3, #20]
		} else {
			return t / (from_hz / to_hz);
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
 8003730:	230a      	movs	r3, #10
 8003732:	4358      	muls	r0, r3
		slice_time = k_ms_to_ticks_ceil32(slice);
 8003734:	4b06      	ldr	r3, [pc, #24]	; (8003750 <k_sched_time_slice_set+0x38>)
 8003736:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
 8003738:	4b06      	ldr	r3, [pc, #24]	; (8003754 <k_sched_time_slice_set+0x3c>)
 800373a:	6019      	str	r1, [r3, #0]
		z_reset_time_slice();
 800373c:	f7ff ffd6 	bl	80036ec <z_reset_time_slice>
	__asm__ volatile(
 8003740:	f384 8811 	msr	BASEPRI, r4
 8003744:	f3bf 8f6f 	isb	sy
	}
}
 8003748:	bd10      	pop	{r4, pc}
 800374a:	bf00      	nop
 800374c:	240003bc 	.word	0x240003bc
 8003750:	240003f4 	.word	0x240003f4
 8003754:	240003f0 	.word	0x240003f0

08003758 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8003758:	b949      	cbnz	r1, 800376e <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800375a:	f3ef 8005 	mrs	r0, IPSR
 800375e:	b930      	cbnz	r0, 800376e <z_reschedule+0x16>
	return _kernel.ready_q.cache;
 8003760:	4b05      	ldr	r3, [pc, #20]	; (8003778 <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
 8003762:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	429a      	cmp	r2, r3
 8003768:	d001      	beq.n	800376e <z_reschedule+0x16>
	ret = arch_swap(key);
 800376a:	f7fe ba67 	b.w	8001c3c <arch_swap>
 800376e:	f381 8811 	msr	BASEPRI, r1
 8003772:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
 8003776:	4770      	bx	lr
 8003778:	240003bc 	.word	0x240003bc

0800377c <k_sched_lock>:
	__asm__ volatile(
 800377c:	f04f 0310 	mov.w	r3, #16
 8003780:	f3ef 8111 	mrs	r1, BASEPRI
 8003784:	f383 8811 	msr	BASEPRI, r3
 8003788:	f3bf 8f6f 	isb	sy
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
 800378c:	4b04      	ldr	r3, [pc, #16]	; (80037a0 <k_sched_lock+0x24>)
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	7bd3      	ldrb	r3, [r2, #15]
 8003792:	3b01      	subs	r3, #1
 8003794:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 8003796:	f381 8811 	msr	BASEPRI, r1
 800379a:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
 800379e:	4770      	bx	lr
 80037a0:	240003bc 	.word	0x240003bc

080037a4 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
 80037a4:	4b09      	ldr	r3, [pc, #36]	; (80037cc <z_priq_dumb_remove+0x28>)
 80037a6:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80037aa:	4282      	cmp	r2, r0
 80037ac:	d105      	bne.n	80037ba <z_priq_dumb_remove+0x16>
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	428b      	cmp	r3, r1
 80037b2:	d102      	bne.n	80037ba <z_priq_dumb_remove+0x16>
 80037b4:	7b4b      	ldrb	r3, [r1, #13]
 80037b6:	06db      	lsls	r3, r3, #27
 80037b8:	d106      	bne.n	80037c8 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
 80037ba:	e9d1 3200 	ldrd	r3, r2, [r1]
 80037be:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
 80037c0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 80037c2:	2300      	movs	r3, #0
	node->prev = NULL;
 80037c4:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	240003bc 	.word	0x240003bc

080037d0 <update_cache>:
{
 80037d0:	b538      	push	{r3, r4, r5, lr}
 80037d2:	4c12      	ldr	r4, [pc, #72]	; (800381c <update_cache+0x4c>)
 80037d4:	4601      	mov	r1, r0
	if (_current_cpu->pending_abort != NULL) {
 80037d6:	6923      	ldr	r3, [r4, #16]
 80037d8:	68a2      	ldr	r2, [r4, #8]
 80037da:	b10b      	cbz	r3, 80037e0 <update_cache+0x10>
	return thread ? thread : _current_cpu->idle_thread;
 80037dc:	68e5      	ldr	r5, [r4, #12]
 80037de:	e00c      	b.n	80037fa <update_cache+0x2a>
	thread = _priq_run_best(&_kernel.ready_q.runq);
 80037e0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80037e4:	f001 f906 	bl	80049f4 <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
 80037e8:	7b53      	ldrb	r3, [r2, #13]
	thread = _priq_run_best(&_kernel.ready_q.runq);
 80037ea:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
 80037ec:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
 80037ee:	bf44      	itt	mi
 80037f0:	f043 0308 	orrmi.w	r3, r3, #8
 80037f4:	7353      	strbmi	r3, [r2, #13]
	return thread ? thread : _current_cpu->idle_thread;
 80037f6:	2d00      	cmp	r5, #0
 80037f8:	d0f0      	beq.n	80037dc <update_cache+0xc>
	if (preempt_ok != 0) {
 80037fa:	b949      	cbnz	r1, 8003810 <update_cache+0x40>
	if (z_is_thread_prevented_from_running(_current)) {
 80037fc:	7b53      	ldrb	r3, [r2, #13]
 80037fe:	06db      	lsls	r3, r3, #27
 8003800:	d106      	bne.n	8003810 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 8003802:	69ab      	ldr	r3, [r5, #24]
 8003804:	b923      	cbnz	r3, 8003810 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
 8003806:	89d3      	ldrh	r3, [r2, #14]
 8003808:	2b7f      	cmp	r3, #127	; 0x7f
 800380a:	d901      	bls.n	8003810 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
 800380c:	6262      	str	r2, [r4, #36]	; 0x24
}
 800380e:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
 8003810:	4295      	cmp	r5, r2
 8003812:	d001      	beq.n	8003818 <update_cache+0x48>
			z_reset_time_slice();
 8003814:	f7ff ff6a 	bl	80036ec <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 8003818:	6265      	str	r5, [r4, #36]	; 0x24
}
 800381a:	e7f8      	b.n	800380e <update_cache+0x3e>
 800381c:	240003bc 	.word	0x240003bc

08003820 <k_sched_unlock>:
{
 8003820:	b510      	push	{r4, lr}
	__asm__ volatile(
 8003822:	f04f 0310 	mov.w	r3, #16
 8003826:	f3ef 8411 	mrs	r4, BASEPRI
 800382a:	f383 8811 	msr	BASEPRI, r3
 800382e:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 8003832:	4b08      	ldr	r3, [pc, #32]	; (8003854 <k_sched_unlock+0x34>)
		update_cache(0);
 8003834:	2000      	movs	r0, #0
		++_current->base.sched_locked;
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	7bd3      	ldrb	r3, [r2, #15]
 800383a:	3301      	adds	r3, #1
 800383c:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 800383e:	f7ff ffc7 	bl	80037d0 <update_cache>
	__asm__ volatile(
 8003842:	f384 8811 	msr	BASEPRI, r4
 8003846:	f3bf 8f6f 	isb	sy
}
 800384a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 800384e:	f001 b8bb 	b.w	80049c8 <z_reschedule_unlocked>
 8003852:	bf00      	nop
 8003854:	240003bc 	.word	0x240003bc

08003858 <ready_thread>:
{
 8003858:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 800385a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
 800385e:	7b43      	ldrb	r3, [r0, #13]
 8003860:	2a00      	cmp	r2, #0
 8003862:	db2c      	blt.n	80038be <ready_thread+0x66>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8003864:	06db      	lsls	r3, r3, #27
 8003866:	d12a      	bne.n	80038be <ready_thread+0x66>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(const struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
 8003868:	6983      	ldr	r3, [r0, #24]
 800386a:	bb43      	cbnz	r3, 80038be <ready_thread+0x66>
	return list->head == list;
 800386c:	4a15      	ldr	r2, [pc, #84]	; (80038c4 <ready_thread+0x6c>)
 800386e:	4611      	mov	r1, r2
 8003870:	f851 4f28 	ldr.w	r4, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003874:	428c      	cmp	r4, r1
 8003876:	bf18      	it	ne
 8003878:	4623      	movne	r3, r4
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800387a:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 800387c:	2b00      	cmp	r3, #0
 800387e:	bf38      	it	cc
 8003880:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8003882:	b1b3      	cbz	r3, 80038b2 <ready_thread+0x5a>
	if (thread_1->base.prio < thread_2->base.prio) {
 8003884:	f990 600e 	ldrsb.w	r6, [r0, #14]
 8003888:	f993 500e 	ldrsb.w	r5, [r3, #14]
 800388c:	42ae      	cmp	r6, r5
 800388e:	db03      	blt.n	8003898 <ready_thread+0x40>
	return (node == list->tail) ? NULL : node->next;
 8003890:	42a3      	cmp	r3, r4
 8003892:	d00e      	beq.n	80038b2 <ready_thread+0x5a>
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	e7f4      	b.n	8003882 <ready_thread+0x2a>
	node->prev = successor->prev;
 8003898:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 800389a:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
 800389e:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 80038a0:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
 80038a2:	7b43      	ldrb	r3, [r0, #13]
 80038a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80038a8:	7343      	strb	r3, [r0, #13]
		update_cache(0);
 80038aa:	2000      	movs	r0, #0
}
 80038ac:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
 80038ae:	f7ff bf8f 	b.w	80037d0 <update_cache>
	node->prev = list->tail;
 80038b2:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
 80038b6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80038b8:	6018      	str	r0, [r3, #0]
	list->tail = node;
 80038ba:	62d0      	str	r0, [r2, #44]	; 0x2c
}
 80038bc:	e7f1      	b.n	80038a2 <ready_thread+0x4a>
}
 80038be:	bc70      	pop	{r4, r5, r6}
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	240003bc 	.word	0x240003bc

080038c8 <z_sched_start>:
{
 80038c8:	b510      	push	{r4, lr}
	__asm__ volatile(
 80038ca:	f04f 0210 	mov.w	r2, #16
 80038ce:	f3ef 8411 	mrs	r4, BASEPRI
 80038d2:	f382 8811 	msr	BASEPRI, r2
 80038d6:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
 80038da:	7b42      	ldrb	r2, [r0, #13]
 80038dc:	0751      	lsls	r1, r2, #29
 80038de:	d404      	bmi.n	80038ea <z_sched_start+0x22>
	__asm__ volatile(
 80038e0:	f384 8811 	msr	BASEPRI, r4
 80038e4:	f3bf 8f6f 	isb	sy
}
 80038e8:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 80038ea:	f022 0204 	bic.w	r2, r2, #4
 80038ee:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
 80038f0:	f7ff ffb2 	bl	8003858 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 80038f4:	4621      	mov	r1, r4
 80038f6:	4802      	ldr	r0, [pc, #8]	; (8003900 <z_sched_start+0x38>)
}
 80038f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
 80038fc:	f7ff bf2c 	b.w	8003758 <z_reschedule>
 8003900:	24000401 	.word	0x24000401

08003904 <move_thread_to_end_of_prio_q>:
{
 8003904:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
 8003906:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
 800390a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 800390c:	2b00      	cmp	r3, #0
 800390e:	da02      	bge.n	8003916 <move_thread_to_end_of_prio_q+0x12>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
 8003910:	4817      	ldr	r0, [pc, #92]	; (8003970 <move_thread_to_end_of_prio_q+0x6c>)
 8003912:	f7ff ff47 	bl	80037a4 <z_priq_dumb_remove>
	return list->head == list;
 8003916:	4a17      	ldr	r2, [pc, #92]	; (8003974 <move_thread_to_end_of_prio_q+0x70>)
 8003918:	4610      	mov	r0, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800391a:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
	return list->head == list;
 800391c:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003920:	4283      	cmp	r3, r0
 8003922:	bf08      	it	eq
 8003924:	2300      	moveq	r3, #0
 8003926:	2b00      	cmp	r3, #0
 8003928:	bf38      	it	cc
 800392a:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800392c:	b1d3      	cbz	r3, 8003964 <move_thread_to_end_of_prio_q+0x60>
	if (thread_1->base.prio < thread_2->base.prio) {
 800392e:	f991 600e 	ldrsb.w	r6, [r1, #14]
 8003932:	f993 500e 	ldrsb.w	r5, [r3, #14]
 8003936:	42ae      	cmp	r6, r5
 8003938:	db03      	blt.n	8003942 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
 800393a:	42a3      	cmp	r3, r4
 800393c:	d012      	beq.n	8003964 <move_thread_to_end_of_prio_q+0x60>
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	e7f4      	b.n	800392c <move_thread_to_end_of_prio_q+0x28>
	node->prev = successor->prev;
 8003942:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
 8003944:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
 8003948:	6001      	str	r1, [r0, #0]
	successor->prev = node;
 800394a:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
 800394c:	7b4b      	ldrb	r3, [r1, #13]
	update_cache(thread == _current);
 800394e:	6890      	ldr	r0, [r2, #8]
 8003950:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003954:	734b      	strb	r3, [r1, #13]
 8003956:	1a43      	subs	r3, r0, r1
 8003958:	4258      	negs	r0, r3
}
 800395a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
 800395e:	4158      	adcs	r0, r3
 8003960:	f7ff bf36 	b.w	80037d0 <update_cache>
	node->prev = list->tail;
 8003964:	e9c1 0400 	strd	r0, r4, [r1]
	list->tail->next = node;
 8003968:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800396a:	6019      	str	r1, [r3, #0]
	list->tail = node;
 800396c:	62d1      	str	r1, [r2, #44]	; 0x2c
}
 800396e:	e7ed      	b.n	800394c <move_thread_to_end_of_prio_q+0x48>
 8003970:	240003e4 	.word	0x240003e4
 8003974:	240003bc 	.word	0x240003bc

08003978 <z_time_slice>:
{
 8003978:	4601      	mov	r1, r0
 800397a:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
 800397c:	f04f 0310 	mov.w	r3, #16
 8003980:	f3ef 8411 	mrs	r4, BASEPRI
 8003984:	f383 8811 	msr	BASEPRI, r3
 8003988:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 800398c:	4b16      	ldr	r3, [pc, #88]	; (80039e8 <z_time_slice+0x70>)
 800398e:	4a17      	ldr	r2, [pc, #92]	; (80039ec <z_time_slice+0x74>)
 8003990:	6898      	ldr	r0, [r3, #8]
 8003992:	6815      	ldr	r5, [r2, #0]
 8003994:	42a8      	cmp	r0, r5
 8003996:	461d      	mov	r5, r3
 8003998:	d106      	bne.n	80039a8 <z_time_slice+0x30>
			z_reset_time_slice();
 800399a:	f7ff fea7 	bl	80036ec <z_reset_time_slice>
	__asm__ volatile(
 800399e:	f384 8811 	msr	BASEPRI, r4
 80039a2:	f3bf 8f6f 	isb	sy
}
 80039a6:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
 80039a8:	2600      	movs	r6, #0
 80039aa:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
 80039ac:	4a10      	ldr	r2, [pc, #64]	; (80039f0 <z_time_slice+0x78>)
 80039ae:	6812      	ldr	r2, [r2, #0]
 80039b0:	b1ba      	cbz	r2, 80039e2 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
 80039b2:	89c2      	ldrh	r2, [r0, #14]
 80039b4:	2a7f      	cmp	r2, #127	; 0x7f
 80039b6:	d814      	bhi.n	80039e2 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
 80039b8:	7b42      	ldrb	r2, [r0, #13]
 80039ba:	06d2      	lsls	r2, r2, #27
 80039bc:	d111      	bne.n	80039e2 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 80039be:	4a0d      	ldr	r2, [pc, #52]	; (80039f4 <z_time_slice+0x7c>)
 80039c0:	f990 600e 	ldrsb.w	r6, [r0, #14]
 80039c4:	6812      	ldr	r2, [r2, #0]
 80039c6:	4296      	cmp	r6, r2
 80039c8:	db0b      	blt.n	80039e2 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
 80039ca:	4a0b      	ldr	r2, [pc, #44]	; (80039f8 <z_time_slice+0x80>)
 80039cc:	4290      	cmp	r0, r2
 80039ce:	d008      	beq.n	80039e2 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
 80039d0:	695a      	ldr	r2, [r3, #20]
 80039d2:	428a      	cmp	r2, r1
 80039d4:	dc02      	bgt.n	80039dc <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
 80039d6:	f7ff ff95 	bl	8003904 <move_thread_to_end_of_prio_q>
 80039da:	e7de      	b.n	800399a <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
 80039dc:	1a52      	subs	r2, r2, r1
 80039de:	615a      	str	r2, [r3, #20]
 80039e0:	e7dd      	b.n	800399e <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
 80039e2:	2300      	movs	r3, #0
 80039e4:	616b      	str	r3, [r5, #20]
 80039e6:	e7da      	b.n	800399e <z_time_slice+0x26>
 80039e8:	240003bc 	.word	0x240003bc
 80039ec:	240003ec 	.word	0x240003ec
 80039f0:	240003f4 	.word	0x240003f4
 80039f4:	240003f0 	.word	0x240003f0
 80039f8:	24000148 	.word	0x24000148

080039fc <z_impl_k_thread_suspend>:
{
 80039fc:	b570      	push	{r4, r5, r6, lr}
 80039fe:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 8003a00:	3018      	adds	r0, #24
 8003a02:	f001 f858 	bl	8004ab6 <z_abort_timeout>
	__asm__ volatile(
 8003a06:	f04f 0310 	mov.w	r3, #16
 8003a0a:	f3ef 8611 	mrs	r6, BASEPRI
 8003a0e:	f383 8811 	msr	BASEPRI, r3
 8003a12:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 8003a16:	f994 300d 	ldrsb.w	r3, [r4, #13]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	da07      	bge.n	8003a2e <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
 8003a1e:	4621      	mov	r1, r4
 8003a20:	480e      	ldr	r0, [pc, #56]	; (8003a5c <z_impl_k_thread_suspend+0x60>)
 8003a22:	f7ff febf 	bl	80037a4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
 8003a26:	7b63      	ldrb	r3, [r4, #13]
 8003a28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a2c:	7363      	strb	r3, [r4, #13]
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8003a2e:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
 8003a30:	4d0b      	ldr	r5, [pc, #44]	; (8003a60 <z_impl_k_thread_suspend+0x64>)
 8003a32:	f043 0310 	orr.w	r3, r3, #16
 8003a36:	68a8      	ldr	r0, [r5, #8]
 8003a38:	7363      	strb	r3, [r4, #13]
 8003a3a:	1b03      	subs	r3, r0, r4
 8003a3c:	4258      	negs	r0, r3
 8003a3e:	4158      	adcs	r0, r3
 8003a40:	f7ff fec6 	bl	80037d0 <update_cache>
	__asm__ volatile(
 8003a44:	f386 8811 	msr	BASEPRI, r6
 8003a48:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
 8003a4c:	68ab      	ldr	r3, [r5, #8]
 8003a4e:	42a3      	cmp	r3, r4
 8003a50:	d103      	bne.n	8003a5a <z_impl_k_thread_suspend+0x5e>
}
 8003a52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
 8003a56:	f000 bfb7 	b.w	80049c8 <z_reschedule_unlocked>
}
 8003a5a:	bd70      	pop	{r4, r5, r6, pc}
 8003a5c:	240003e4 	.word	0x240003e4
 8003a60:	240003bc 	.word	0x240003bc

08003a64 <z_thread_single_abort>:
{
 8003a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a68:	4604      	mov	r4, r0
	__asm__ volatile(
 8003a6a:	f04f 0310 	mov.w	r3, #16
 8003a6e:	f3ef 8211 	mrs	r2, BASEPRI
 8003a72:	f383 8811 	msr	BASEPRI, r3
 8003a76:	f3bf 8f6f 	isb	sy
	if ((thread->base.thread_state &
 8003a7a:	7b43      	ldrb	r3, [r0, #13]
 8003a7c:	f013 0f28 	tst.w	r3, #40	; 0x28
 8003a80:	d005      	beq.n	8003a8e <z_thread_single_abort+0x2a>
	__asm__ volatile(
 8003a82:	f382 8811 	msr	BASEPRI, r2
 8003a86:	f3bf 8f6f 	isb	sy
}
 8003a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
 8003a8e:	f043 0320 	orr.w	r3, r3, #32
 8003a92:	7343      	strb	r3, [r0, #13]
 8003a94:	f382 8811 	msr	BASEPRI, r2
 8003a98:	f3bf 8f6f 	isb	sy
 8003a9c:	3018      	adds	r0, #24
 8003a9e:	f001 f80a 	bl	8004ab6 <z_abort_timeout>
	__asm__ volatile(
 8003aa2:	f04f 0310 	mov.w	r3, #16
 8003aa6:	f3ef 8611 	mrs	r6, BASEPRI
 8003aaa:	f383 8811 	msr	BASEPRI, r3
 8003aae:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8003ab2:	7b63      	ldrb	r3, [r4, #13]
 8003ab4:	06d8      	lsls	r0, r3, #27
 8003ab6:	d116      	bne.n	8003ae6 <z_thread_single_abort+0x82>
		if (z_is_thread_ready(thread)) {
 8003ab8:	69a2      	ldr	r2, [r4, #24]
 8003aba:	b9a2      	cbnz	r2, 8003ae6 <z_thread_single_abort+0x82>
			if (z_is_thread_queued(thread)) {
 8003abc:	0619      	lsls	r1, r3, #24
 8003abe:	d507      	bpl.n	8003ad0 <z_thread_single_abort+0x6c>
				_priq_run_remove(&_kernel.ready_q.runq,
 8003ac0:	4621      	mov	r1, r4
 8003ac2:	4826      	ldr	r0, [pc, #152]	; (8003b5c <z_thread_single_abort+0xf8>)
 8003ac4:	f7ff fe6e 	bl	80037a4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
 8003ac8:	7b63      	ldrb	r3, [r4, #13]
 8003aca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ace:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
 8003ad0:	4b23      	ldr	r3, [pc, #140]	; (8003b60 <z_thread_single_abort+0xfc>)
 8003ad2:	6898      	ldr	r0, [r3, #8]
 8003ad4:	1b02      	subs	r2, r0, r4
 8003ad6:	4250      	negs	r0, r2
 8003ad8:	4150      	adcs	r0, r2
 8003ada:	f7ff fe79 	bl	80037d0 <update_cache>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 8003ade:	f104 0830 	add.w	r8, r4, #48	; 0x30
			waiter->base.pended_on = NULL;
 8003ae2:	2700      	movs	r7, #0
 8003ae4:	e01d      	b.n	8003b22 <z_thread_single_abort+0xbe>
			if (z_is_thread_pending(thread)) {
 8003ae6:	079b      	lsls	r3, r3, #30
 8003ae8:	d5f9      	bpl.n	8003ade <z_thread_single_abort+0x7a>
				_priq_wait_remove(&pended_on(thread)->waitq,
 8003aea:	4621      	mov	r1, r4
 8003aec:	68a0      	ldr	r0, [r4, #8]
 8003aee:	f7ff fe59 	bl	80037a4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8003af2:	7b63      	ldrb	r3, [r4, #13]
 8003af4:	f023 0302 	bic.w	r3, r3, #2
 8003af8:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
 8003afa:	2300      	movs	r3, #0
 8003afc:	60a3      	str	r3, [r4, #8]
 8003afe:	e7ee      	b.n	8003ade <z_thread_single_abort+0x7a>
 8003b00:	f105 0018 	add.w	r0, r5, #24
 8003b04:	f000 ffd7 	bl	8004ab6 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
 8003b08:	68a8      	ldr	r0, [r5, #8]
 8003b0a:	4629      	mov	r1, r5
 8003b0c:	f7ff fe4a 	bl	80037a4 <z_priq_dumb_remove>
 8003b10:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
 8003b12:	4628      	mov	r0, r5
			waiter->base.pended_on = NULL;
 8003b14:	60af      	str	r7, [r5, #8]
 8003b16:	f023 0302 	bic.w	r3, r3, #2
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 8003b1a:	67ef      	str	r7, [r5, #124]	; 0x7c
 8003b1c:	736b      	strb	r3, [r5, #13]
			ready_thread(waiter);
 8003b1e:	f7ff fe9b 	bl	8003858 <ready_thread>
	return list->head == list;
 8003b22:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003b24:	4545      	cmp	r5, r8
 8003b26:	d001      	beq.n	8003b2c <z_thread_single_abort+0xc8>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
 8003b28:	2d00      	cmp	r5, #0
 8003b2a:	d1e9      	bne.n	8003b00 <z_thread_single_abort+0x9c>
		if (z_is_idle_thread_object(_current)) {
 8003b2c:	4b0c      	ldr	r3, [pc, #48]	; (8003b60 <z_thread_single_abort+0xfc>)
 8003b2e:	689a      	ldr	r2, [r3, #8]
 8003b30:	4b0c      	ldr	r3, [pc, #48]	; (8003b64 <z_thread_single_abort+0x100>)
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d102      	bne.n	8003b3c <z_thread_single_abort+0xd8>
			update_cache(1);
 8003b36:	2001      	movs	r0, #1
 8003b38:	f7ff fe4a 	bl	80037d0 <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
 8003b3c:	7b63      	ldrb	r3, [r4, #13]
 8003b3e:	f043 0308 	orr.w	r3, r3, #8
 8003b42:	7363      	strb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
 8003b44:	6e23      	ldr	r3, [r4, #96]	; 0x60
	__asm__ volatile(
 8003b46:	f386 8811 	msr	BASEPRI, r6
 8003b4a:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d09b      	beq.n	8003a8a <z_thread_single_abort+0x26>
		fn_abort(thread);
 8003b52:	4620      	mov	r0, r4
}
 8003b54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		fn_abort(thread);
 8003b58:	4718      	bx	r3
 8003b5a:	bf00      	nop
 8003b5c:	240003e4 	.word	0x240003e4
 8003b60:	240003bc 	.word	0x240003bc
 8003b64:	24000148 	.word	0x24000148

08003b68 <unready_thread>:
{
 8003b68:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
 8003b6a:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
 8003b6e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	da06      	bge.n	8003b82 <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
 8003b74:	4807      	ldr	r0, [pc, #28]	; (8003b94 <unready_thread+0x2c>)
 8003b76:	f7ff fe15 	bl	80037a4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
 8003b7a:	7b4b      	ldrb	r3, [r1, #13]
 8003b7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b80:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
 8003b82:	4b05      	ldr	r3, [pc, #20]	; (8003b98 <unready_thread+0x30>)
 8003b84:	6898      	ldr	r0, [r3, #8]
 8003b86:	1a43      	subs	r3, r0, r1
 8003b88:	4258      	negs	r0, r3
 8003b8a:	4158      	adcs	r0, r3
}
 8003b8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
 8003b90:	f7ff be1e 	b.w	80037d0 <update_cache>
 8003b94:	240003e4 	.word	0x240003e4
 8003b98:	240003bc 	.word	0x240003bc

08003b9c <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
 8003b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b9e:	4605      	mov	r5, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
 8003ba0:	f000 ffc9 	bl	8004b36 <z_tick_get_32>
 8003ba4:	182c      	adds	r4, r5, r0
	__asm__ volatile(
 8003ba6:	f04f 0310 	mov.w	r3, #16
 8003baa:	f3ef 8711 	mrs	r7, BASEPRI
 8003bae:	f383 8811 	msr	BASEPRI, r3
 8003bb2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
 8003bb6:	4e0d      	ldr	r6, [pc, #52]	; (8003bec <z_tick_sleep.part.0+0x50>)
 8003bb8:	4b0d      	ldr	r3, [pc, #52]	; (8003bf0 <z_tick_sleep.part.0+0x54>)
 8003bba:	68b0      	ldr	r0, [r6, #8]
 8003bbc:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
 8003bbe:	f7ff ffd3 	bl	8003b68 <unready_thread>
	z_add_thread_timeout(_current, timeout);
 8003bc2:	68b0      	ldr	r0, [r6, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
 8003bc4:	462a      	mov	r2, r5
 8003bc6:	490b      	ldr	r1, [pc, #44]	; (8003bf4 <z_tick_sleep.part.0+0x58>)
 8003bc8:	17eb      	asrs	r3, r5, #31
 8003bca:	3018      	adds	r0, #24
 8003bcc:	f000 f992 	bl	8003ef4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 8003bd0:	68b2      	ldr	r2, [r6, #8]
 8003bd2:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8003bd4:	7b53      	ldrb	r3, [r2, #13]
 8003bd6:	f043 0310 	orr.w	r3, r3, #16
 8003bda:	7353      	strb	r3, [r2, #13]
 8003bdc:	f7fe f82e 	bl	8001c3c <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
 8003be0:	f000 ffa9 	bl	8004b36 <z_tick_get_32>
 8003be4:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
 8003be6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8003bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bec:	240003bc 	.word	0x240003bc
 8003bf0:	240003ec 	.word	0x240003ec
 8003bf4:	08004a29 	.word	0x08004a29

08003bf8 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 8003bf8:	4b04      	ldr	r3, [pc, #16]	; (8003c0c <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8003c00:	4608      	mov	r0, r1
	list->tail = (sys_dnode_t *)list;
 8003c02:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
 8003c06:	f7ff bd87 	b.w	8003718 <k_sched_time_slice_set>
 8003c0a:	bf00      	nop
 8003c0c:	240003bc 	.word	0x240003bc

08003c10 <z_impl_k_yield>:
{
 8003c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
 8003c12:	4c24      	ldr	r4, [pc, #144]	; (8003ca4 <z_impl_k_yield+0x94>)
 8003c14:	4b24      	ldr	r3, [pc, #144]	; (8003ca8 <z_impl_k_yield+0x98>)
 8003c16:	68a2      	ldr	r2, [r4, #8]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d030      	beq.n	8003c7e <z_impl_k_yield+0x6e>
 8003c1c:	f04f 0310 	mov.w	r3, #16
 8003c20:	f3ef 8511 	mrs	r5, BASEPRI
 8003c24:	f383 8811 	msr	BASEPRI, r3
 8003c28:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
 8003c2c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8003c30:	68a1      	ldr	r1, [r4, #8]
 8003c32:	f7ff fdb7 	bl	80037a4 <z_priq_dumb_remove>
	return list->head == list;
 8003c36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
 8003c38:	68a2      	ldr	r2, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003c3a:	4283      	cmp	r3, r0
 8003c3c:	bf08      	it	eq
 8003c3e:	2300      	moveq	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8003c40:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	bf38      	it	cc
 8003c46:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8003c48:	b32b      	cbz	r3, 8003c96 <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
 8003c4a:	f992 700e 	ldrsb.w	r7, [r2, #14]
 8003c4e:	f993 600e 	ldrsb.w	r6, [r3, #14]
 8003c52:	42b7      	cmp	r7, r6
 8003c54:	db03      	blt.n	8003c5e <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
 8003c56:	428b      	cmp	r3, r1
 8003c58:	d01d      	beq.n	8003c96 <z_impl_k_yield+0x86>
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	e7f4      	b.n	8003c48 <z_impl_k_yield+0x38>
	node->prev = successor->prev;
 8003c5e:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
 8003c60:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
 8003c64:	600a      	str	r2, [r1, #0]
	successor->prev = node;
 8003c66:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
 8003c68:	7b53      	ldrb	r3, [r2, #13]
			update_cache(1);
 8003c6a:	2001      	movs	r0, #1
 8003c6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c70:	7353      	strb	r3, [r2, #13]
 8003c72:	f7ff fdad 	bl	80037d0 <update_cache>
	__asm__ volatile(
 8003c76:	f385 8811 	msr	BASEPRI, r5
 8003c7a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 8003c7e:	f04f 0310 	mov.w	r3, #16
 8003c82:	f3ef 8011 	mrs	r0, BASEPRI
 8003c86:	f383 8811 	msr	BASEPRI, r3
 8003c8a:	f3bf 8f6f 	isb	sy
}
 8003c8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003c92:	f7fd bfd3 	b.w	8001c3c <arch_swap>
	node->prev = list->tail;
 8003c96:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
 8003c9a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003c9c:	601a      	str	r2, [r3, #0]
	list->tail = node;
 8003c9e:	62e2      	str	r2, [r4, #44]	; 0x2c
}
 8003ca0:	e7e2      	b.n	8003c68 <z_impl_k_yield+0x58>
 8003ca2:	bf00      	nop
 8003ca4:	240003bc 	.word	0x240003bc
 8003ca8:	24000148 	.word	0x24000148

08003cac <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
 8003cac:	460b      	mov	r3, r1

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8003cae:	3301      	adds	r3, #1
 8003cb0:	bf08      	it	eq
 8003cb2:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
 8003cb6:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8003cb8:	d106      	bne.n	8003cc8 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
 8003cba:	4b0b      	ldr	r3, [pc, #44]	; (8003ce8 <z_impl_k_sleep+0x3c>)
 8003cbc:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 8003cbe:	f7ff fe9d 	bl	80039fc <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
 8003cc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#endif

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
 8003cc6:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
 8003cc8:	4604      	mov	r4, r0
	if (ticks == 0) {
 8003cca:	b940      	cbnz	r0, 8003cde <z_impl_k_sleep+0x32>
	z_impl_k_yield();
 8003ccc:	f7ff ffa0 	bl	8003c10 <z_impl_k_yield>
			return t / (from_hz / to_hz);
 8003cd0:	220a      	movs	r2, #10
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	4620      	mov	r0, r4
 8003cd6:	17e1      	asrs	r1, r4, #31
 8003cd8:	f7fc fd5c 	bl	8000794 <__aeabi_uldivmod>
	return k_ticks_to_ms_floor64(ticks);
 8003cdc:	e7f3      	b.n	8003cc6 <z_impl_k_sleep+0x1a>
 8003cde:	f7ff ff5d 	bl	8003b9c <z_tick_sleep.part.0>
 8003ce2:	4604      	mov	r4, r0
 8003ce4:	e7f4      	b.n	8003cd0 <z_impl_k_sleep+0x24>
 8003ce6:	bf00      	nop
 8003ce8:	240003bc 	.word	0x240003bc

08003cec <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 8003cec:	4b01      	ldr	r3, [pc, #4]	; (8003cf4 <z_impl_k_current_get+0x8>)
 8003cee:	6898      	ldr	r0, [r3, #8]
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	240003bc 	.word	0x240003bc

08003cf8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 8003cf8:	b538      	push	{r3, r4, r5, lr}
 8003cfa:	4604      	mov	r4, r0
 8003cfc:	f04f 0310 	mov.w	r3, #16
 8003d00:	f3ef 8511 	mrs	r5, BASEPRI
 8003d04:	f383 8811 	msr	BASEPRI, r3
 8003d08:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
 8003d0c:	f000 feac 	bl	8004a68 <z_unpend_first_thread>

	if (thread != NULL) {
 8003d10:	b148      	cbz	r0, 8003d26 <z_impl_k_sem_give+0x2e>
 8003d12:	2200      	movs	r2, #0
 8003d14:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 8003d16:	f000 fe77 	bl	8004a08 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
 8003d1a:	4629      	mov	r1, r5
 8003d1c:	4805      	ldr	r0, [pc, #20]	; (8003d34 <z_impl_k_sem_give+0x3c>)
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
 8003d1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
 8003d22:	f7ff bd19 	b.w	8003758 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 8003d26:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	bf18      	it	ne
 8003d2e:	3301      	addne	r3, #1
 8003d30:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
 8003d32:	e7f2      	b.n	8003d1a <z_impl_k_sem_give+0x22>
 8003d34:	24000401 	.word	0x24000401

08003d38 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 8003d38:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	sys_dlist_init(&w->waitq);
 8003d3c:	f100 0530 	add.w	r5, r0, #48	; 0x30
 8003d40:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8003d42:	1dd6      	adds	r6, r2, #7
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8003d44:	9a0c      	ldr	r2, [sp, #48]	; 0x30

#define K_KERNEL_STACK_SIZEOF(sym) (sizeof(sym) - K_KERNEL_STACK_RESERVED)

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 8003d46:	3720      	adds	r7, #32
{
 8003d48:	4604      	mov	r4, r0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8003d4a:	f026 0607 	bic.w	r6, r6, #7
	list->tail = (sys_dnode_t *)list;
 8003d4e:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
 8003d52:	9d0e      	ldr	r5, [sp, #56]	; 0x38
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8003d54:	f106 0820 	add.w	r8, r6, #32
	thread_base->user_options = (uint8_t)options;
 8003d58:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 8003d5a:	2504      	movs	r5, #4
	stack_ptr = (char *)stack + stack_obj_size;
 8003d5c:	4488      	add	r8, r1
	thread_base->thread_state = (uint8_t)initial_state;
 8003d5e:	7345      	strb	r5, [r0, #13]

	thread_base->prio = priority;
 8003d60:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8003d62:	7385      	strb	r5, [r0, #14]

	thread_base->sched_locked = 0U;
 8003d64:	2500      	movs	r5, #0
	new_thread->stack_info.size = stack_buf_size;
 8003d66:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->sched_locked = 0U;
 8003d6a:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
 8003d6c:	6705      	str	r5, [r0, #112]	; 0x70
	node->prev = NULL;
 8003d6e:	e9c0 5506 	strd	r5, r5, [r0, #24]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8003d72:	9202      	str	r2, [sp, #8]
 8003d74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003d76:	9201      	str	r2, [sp, #4]
 8003d78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003d7a:	9200      	str	r2, [sp, #0]
 8003d7c:	4642      	mov	r2, r8
 8003d7e:	f7fd ffd7 	bl	8001d30 <arch_new_thread>
	if (!_current) {
 8003d82:	4b05      	ldr	r3, [pc, #20]	; (8003d98 <z_setup_new_thread+0x60>)
 8003d84:	689b      	ldr	r3, [r3, #8]
	new_thread->fn_abort = NULL;
 8003d86:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
 8003d8a:	b103      	cbz	r3, 8003d8e <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
 8003d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
 8003d8e:	4640      	mov	r0, r8
 8003d90:	6763      	str	r3, [r4, #116]	; 0x74
 8003d92:	b004      	add	sp, #16
 8003d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d98:	240003bc 	.word	0x240003bc

08003d9c <z_init_static_threads>:
{
 8003d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
 8003d9e:	4f22      	ldr	r7, [pc, #136]	; (8003e28 <z_init_static_threads+0x8c>)
{
 8003da0:	b087      	sub	sp, #28
 8003da2:	4d22      	ldr	r5, [pc, #136]	; (8003e2c <z_init_static_threads+0x90>)
 8003da4:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
 8003da6:	42bd      	cmp	r5, r7
 8003da8:	f105 0430 	add.w	r4, r5, #48	; 0x30
 8003dac:	d30b      	bcc.n	8003dc6 <z_init_static_threads+0x2a>
	_FOREACH_STATIC_THREAD(thread_data) {
 8003dae:	4c1f      	ldr	r4, [pc, #124]	; (8003e2c <z_init_static_threads+0x90>)
		} else {
			return t * (to_hz / from_hz);
 8003db0:	250a      	movs	r5, #10
 8003db2:	4f1f      	ldr	r7, [pc, #124]	; (8003e30 <z_init_static_threads+0x94>)
	k_sched_lock();
 8003db4:	f7ff fce2 	bl	800377c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 8003db8:	42b4      	cmp	r4, r6
 8003dba:	d321      	bcc.n	8003e00 <z_init_static_threads+0x64>
}
 8003dbc:	b007      	add	sp, #28
 8003dbe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 8003dc2:	f7ff bd2d 	b.w	8003820 <k_sched_unlock>
		z_setup_new_thread(
 8003dc6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8003dca:	9305      	str	r3, [sp, #20]
 8003dcc:	f854 3c10 	ldr.w	r3, [r4, #-16]
 8003dd0:	9304      	str	r3, [sp, #16]
 8003dd2:	f854 3c14 	ldr.w	r3, [r4, #-20]
 8003dd6:	9303      	str	r3, [sp, #12]
 8003dd8:	f854 3c18 	ldr.w	r3, [r4, #-24]
 8003ddc:	9302      	str	r3, [sp, #8]
 8003dde:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 8003de2:	9301      	str	r3, [sp, #4]
 8003de4:	f854 3c20 	ldr.w	r3, [r4, #-32]
 8003de8:	9300      	str	r3, [sp, #0]
 8003dea:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 8003dee:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
 8003df2:	f7ff ffa1 	bl	8003d38 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 8003df6:	f854 3c30 	ldr.w	r3, [r4, #-48]
 8003dfa:	65dd      	str	r5, [r3, #92]	; 0x5c
 8003dfc:	4625      	mov	r5, r4
 8003dfe:	e7d2      	b.n	8003da6 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 8003e00:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003e02:	1c53      	adds	r3, r2, #1
 8003e04:	d009      	beq.n	8003e1a <z_init_static_threads+0x7e>
					    K_MSEC(thread_data->init_delay));
 8003e06:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
			schedule_new_thread(thread_data->init_thread,
 8003e0a:	6820      	ldr	r0, [r4, #0]
 8003e0c:	fb82 2305 	smull	r2, r3, r2, r5
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8003e10:	ea52 0103 	orrs.w	r1, r2, r3
 8003e14:	d103      	bne.n	8003e1e <z_init_static_threads+0x82>
	z_sched_start(thread);
 8003e16:	f7ff fd57 	bl	80038c8 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 8003e1a:	3430      	adds	r4, #48	; 0x30
 8003e1c:	e7cc      	b.n	8003db8 <z_init_static_threads+0x1c>
 8003e1e:	4639      	mov	r1, r7
 8003e20:	3018      	adds	r0, #24
 8003e22:	f000 f867 	bl	8003ef4 <z_add_timeout>
 8003e26:	e7f8      	b.n	8003e1a <z_init_static_threads+0x7e>
 8003e28:	24000138 	.word	0x24000138
 8003e2c:	24000138 	.word	0x24000138
 8003e30:	08004a29 	.word	0x08004a29

08003e34 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os);

FUNC_NORETURN void z_self_abort(void)
{
 8003e34:	b508      	push	{r3, lr}
 8003e36:	f04f 0310 	mov.w	r3, #16
 8003e3a:	f3ef 8411 	mrs	r4, BASEPRI
 8003e3e:	f383 8811 	msr	BASEPRI, r3
 8003e42:	f3bf 8f6f 	isb	sy
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
	cpu->pending_abort = _current;
 8003e46:	4b04      	ldr	r3, [pc, #16]	; (8003e58 <z_self_abort+0x24>)
 8003e48:	6898      	ldr	r0, [r3, #8]
 8003e4a:	6118      	str	r0, [r3, #16]
	z_impl_k_thread_suspend(thread);
 8003e4c:	f7ff fdd6 	bl	80039fc <z_impl_k_thread_suspend>
 8003e50:	4620      	mov	r0, r4
 8003e52:	f7fd fef3 	bl	8001c3c <arch_swap>
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
	CODE_UNREACHABLE;
 8003e56:	bf00      	nop
 8003e58:	240003bc 	.word	0x240003bc

08003e5c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
 8003e5c:	4b03      	ldr	r3, [pc, #12]	; (8003e6c <elapsed+0x10>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	b90b      	cbnz	r3, 8003e66 <elapsed+0xa>
 8003e62:	f7fd becd 	b.w	8001c00 <z_clock_elapsed>
}
 8003e66:	2000      	movs	r0, #0
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	240003f8 	.word	0x240003f8

08003e70 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8003e70:	6803      	ldr	r3, [r0, #0]
{
 8003e72:	b530      	push	{r4, r5, lr}
 8003e74:	b168      	cbz	r0, 8003e92 <remove_timeout+0x22>
 8003e76:	4a0a      	ldr	r2, [pc, #40]	; (8003ea0 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
 8003e78:	6852      	ldr	r2, [r2, #4]
 8003e7a:	4290      	cmp	r0, r2
 8003e7c:	d009      	beq.n	8003e92 <remove_timeout+0x22>
	if (next(t) != NULL) {
 8003e7e:	b143      	cbz	r3, 8003e92 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 8003e80:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 8003e84:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 8003e88:	1912      	adds	r2, r2, r4
 8003e8a:	eb45 0101 	adc.w	r1, r5, r1
 8003e8e:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
 8003e92:	6842      	ldr	r2, [r0, #4]
 8003e94:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
 8003e96:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8003e98:	2300      	movs	r3, #0
	node->prev = NULL;
 8003e9a:	e9c0 3300 	strd	r3, r3, [r0]
}
 8003e9e:	bd30      	pop	{r4, r5, pc}
 8003ea0:	2400002c 	.word	0x2400002c

08003ea4 <next_timeout>:

static int32_t next_timeout(void)
{
 8003ea4:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
 8003ea6:	4b11      	ldr	r3, [pc, #68]	; (8003eec <next_timeout+0x48>)
 8003ea8:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003eaa:	429c      	cmp	r4, r3
 8003eac:	bf08      	it	eq
 8003eae:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
 8003eb0:	f7ff ffd4 	bl	8003e5c <elapsed>
 8003eb4:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
 8003eb6:	b1ac      	cbz	r4, 8003ee4 <next_timeout+0x40>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
 8003eb8:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8003ebc:	1b40      	subs	r0, r0, r5
 8003ebe:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
 8003ec2:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8003ec6:	f171 0300 	sbcs.w	r3, r1, #0
 8003eca:	da0b      	bge.n	8003ee4 <next_timeout+0x40>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
 8003ecc:	2800      	cmp	r0, #0
 8003ece:	f171 0300 	sbcs.w	r3, r1, #0
 8003ed2:	da00      	bge.n	8003ed6 <next_timeout+0x32>
 8003ed4:	2000      	movs	r0, #0

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 8003ed6:	4b06      	ldr	r3, [pc, #24]	; (8003ef0 <next_timeout+0x4c>)
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	b113      	cbz	r3, 8003ee2 <next_timeout+0x3e>
 8003edc:	4298      	cmp	r0, r3
 8003ede:	bfa8      	it	ge
 8003ee0:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 8003ee2:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
 8003ee4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8003ee8:	e7f5      	b.n	8003ed6 <next_timeout+0x32>
 8003eea:	bf00      	nop
 8003eec:	2400002c 	.word	0x2400002c
 8003ef0:	240003bc 	.word	0x240003bc

08003ef4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
 8003ef4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ef8:	9101      	str	r1, [sp, #4]
 8003efa:	4619      	mov	r1, r3
 8003efc:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8003efe:	1c4b      	adds	r3, r1, #1
 8003f00:	bf08      	it	eq
 8003f02:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8003f06:	d06b      	beq.n	8003fe0 <z_add_timeout+0xec>
#endif

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
 8003f08:	1c54      	adds	r4, r2, #1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
 8003f0a:	f06f 0301 	mvn.w	r3, #1
 8003f0e:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
	k_ticks_t ticks = timeout.ticks + 1;
 8003f12:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
 8003f16:	ebb3 0804 	subs.w	r8, r3, r4
 8003f1a:	eb6b 0905 	sbc.w	r9, fp, r5
 8003f1e:	f1b8 0f00 	cmp.w	r8, #0
 8003f22:	f179 0300 	sbcs.w	r3, r9, #0
 8003f26:	db0f      	blt.n	8003f48 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
 8003f28:	f7ff ff98 	bl	8003e5c <elapsed>
 8003f2c:	4a33      	ldr	r2, [pc, #204]	; (8003ffc <z_add_timeout+0x108>)
 8003f2e:	f06f 0301 	mvn.w	r3, #1
 8003f32:	e9d2 1c00 	ldrd	r1, ip, [r2]
 8003f36:	1a5b      	subs	r3, r3, r1
 8003f38:	eb6b 020c 	sbc.w	r2, fp, ip
 8003f3c:	1b1e      	subs	r6, r3, r4
 8003f3e:	eb62 0705 	sbc.w	r7, r2, r5
 8003f42:	1a34      	subs	r4, r6, r0
 8003f44:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 8003f48:	9b01      	ldr	r3, [sp, #4]
 8003f4a:	f8ca 3008 	str.w	r3, [sl, #8]
 8003f4e:	f04f 0310 	mov.w	r3, #16
 8003f52:	f3ef 8611 	mrs	r6, BASEPRI
 8003f56:	f383 8811 	msr	BASEPRI, r3
 8003f5a:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
 8003f5e:	f7ff ff7d 	bl	8003e5c <elapsed>
	ticks = MAX(1, ticks);
 8003f62:	2c01      	cmp	r4, #1
 8003f64:	f175 0300 	sbcs.w	r3, r5, #0
	return list->head == list;
 8003f68:	4b25      	ldr	r3, [pc, #148]	; (8004000 <z_add_timeout+0x10c>)
 8003f6a:	bfbc      	itt	lt
 8003f6c:	2401      	movlt	r4, #1
 8003f6e:	2500      	movlt	r5, #0
 8003f70:	681a      	ldr	r2, [r3, #0]
		to->dticks = ticks + elapsed();
 8003f72:	1824      	adds	r4, r4, r0
 8003f74:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	e9ca 4504 	strd	r4, r5, [sl, #16]
 8003f7e:	d001      	beq.n	8003f84 <z_add_timeout+0x90>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8003f80:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
 8003f82:	b952      	cbnz	r2, 8003f9a <z_add_timeout+0xa6>
	node->prev = list->tail;
 8003f84:	685a      	ldr	r2, [r3, #4]
	node->next = list;
 8003f86:	f8ca 3000 	str.w	r3, [sl]
	node->prev = list->tail;
 8003f8a:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
 8003f94:	f8c3 a004 	str.w	sl, [r3, #4]
}
 8003f98:	e014      	b.n	8003fc4 <z_add_timeout+0xd0>
			if (t->dticks > to->dticks) {
 8003f9a:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
 8003f9e:	e9da 4504 	ldrd	r4, r5, [sl, #16]
 8003fa2:	4544      	cmp	r4, r8
 8003fa4:	eb75 0109 	sbcs.w	r1, r5, r9
 8003fa8:	da1d      	bge.n	8003fe6 <z_add_timeout+0xf2>
				t->dticks -= to->dticks;
 8003faa:	ebb8 0004 	subs.w	r0, r8, r4
 8003fae:	eb69 0105 	sbc.w	r1, r9, r5
 8003fb2:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
 8003fb6:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 8003fb8:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
 8003fbc:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
 8003fc0:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
 8003fc4:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d006      	beq.n	8003fd8 <z_add_timeout+0xe4>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 8003fca:	4592      	cmp	sl, r2
 8003fcc:	d104      	bne.n	8003fd8 <z_add_timeout+0xe4>
			z_clock_set_timeout(next_timeout(), false);
 8003fce:	f7ff ff69 	bl	8003ea4 <next_timeout>
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	f7fd fdb0 	bl	8001b38 <z_clock_set_timeout>
	__asm__ volatile(
 8003fd8:	f386 8811 	msr	BASEPRI, r6
 8003fdc:	f3bf 8f6f 	isb	sy
		}
	}
}
 8003fe0:	b003      	add	sp, #12
 8003fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
 8003fe6:	ebb4 0008 	subs.w	r0, r4, r8
 8003fea:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
 8003fee:	42ba      	cmp	r2, r7
 8003ff0:	e9ca 0104 	strd	r0, r1, [sl, #16]
 8003ff4:	d0c6      	beq.n	8003f84 <z_add_timeout+0x90>
 8003ff6:	6812      	ldr	r2, [r2, #0]
 8003ff8:	e7c3      	b.n	8003f82 <z_add_timeout+0x8e>
 8003ffa:	bf00      	nop
 8003ffc:	24000248 	.word	0x24000248
 8004000:	2400002c 	.word	0x2400002c

08004004 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
 8004004:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004008:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 800400a:	f7ff fcb5 	bl	8003978 <z_time_slice>
	__asm__ volatile(
 800400e:	f04f 0310 	mov.w	r3, #16
 8004012:	f3ef 8411 	mrs	r4, BASEPRI
 8004016:	f383 8811 	msr	BASEPRI, r3
 800401a:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 800401e:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 80040d4 <z_clock_announce+0xd0>
 8004022:	4d2b      	ldr	r5, [pc, #172]	; (80040d0 <z_clock_announce+0xcc>)
	return list->head == list;
 8004024:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 80040d8 <z_clock_announce+0xd4>
 8004028:	4651      	mov	r1, sl
 800402a:	602e      	str	r6, [r5, #0]
 800402c:	f8d5 c000 	ldr.w	ip, [r5]
 8004030:	f8db 0000 	ldr.w	r0, [fp]
 8004034:	4662      	mov	r2, ip
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8004036:	4558      	cmp	r0, fp
 8004038:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800403c:	e9da 8900 	ldrd	r8, r9, [sl]
 8004040:	e9cd 2300 	strd	r2, r3, [sp]
 8004044:	d00d      	beq.n	8004062 <z_clock_announce+0x5e>

	while (first() != NULL && first()->dticks <= announce_remaining) {
 8004046:	b160      	cbz	r0, 8004062 <z_clock_announce+0x5e>
 8004048:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
 800404c:	45b4      	cmp	ip, r6
 800404e:	41bb      	sbcs	r3, r7
 8004050:	da1d      	bge.n	800408e <z_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
 8004052:	9b00      	ldr	r3, [sp, #0]
 8004054:	ebb6 0c03 	subs.w	ip, r6, r3
 8004058:	9b01      	ldr	r3, [sp, #4]
 800405a:	eb67 0603 	sbc.w	r6, r7, r3
 800405e:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
 8004062:	9b00      	ldr	r3, [sp, #0]
	announce_remaining = 0;
 8004064:	2600      	movs	r6, #0
	curr_tick += announce_remaining;
 8004066:	eb13 0208 	adds.w	r2, r3, r8
 800406a:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
 800406c:	602e      	str	r6, [r5, #0]
	curr_tick += announce_remaining;
 800406e:	eb43 0309 	adc.w	r3, r3, r9
 8004072:	e9c1 2300 	strd	r2, r3, [r1]

	z_clock_set_timeout(next_timeout(), false);
 8004076:	f7ff ff15 	bl	8003ea4 <next_timeout>
 800407a:	4631      	mov	r1, r6
 800407c:	f7fd fd5c 	bl	8001b38 <z_clock_set_timeout>
	__asm__ volatile(
 8004080:	f384 8811 	msr	BASEPRI, r4
 8004084:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 8004088:	b003      	add	sp, #12
 800408a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
 800408e:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
 8004092:	f04f 0200 	mov.w	r2, #0
 8004096:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
 800409a:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		announce_remaining -= dt;
 800409e:	ebac 0606 	sub.w	r6, ip, r6
		t->dticks = 0;
 80040a2:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
 80040a6:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
 80040aa:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
 80040ac:	f7ff fee0 	bl	8003e70 <remove_timeout>
 80040b0:	f384 8811 	msr	BASEPRI, r4
 80040b4:	f3bf 8f6f 	isb	sy
		t->fn(t);
 80040b8:	6883      	ldr	r3, [r0, #8]
 80040ba:	4798      	blx	r3
	__asm__ volatile(
 80040bc:	f04f 0310 	mov.w	r3, #16
 80040c0:	f3ef 8411 	mrs	r4, BASEPRI
 80040c4:	f383 8811 	msr	BASEPRI, r3
 80040c8:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
 80040cc:	4901      	ldr	r1, [pc, #4]	; (80040d4 <z_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 80040ce:	e7ad      	b.n	800402c <z_clock_announce+0x28>
 80040d0:	240003f8 	.word	0x240003f8
 80040d4:	24000248 	.word	0x24000248
 80040d8:	2400002c 	.word	0x2400002c

080040dc <z_tick_get>:

int64_t z_tick_get(void)
{
 80040dc:	b510      	push	{r4, lr}
 80040de:	f04f 0310 	mov.w	r3, #16
 80040e2:	f3ef 8411 	mrs	r4, BASEPRI
 80040e6:	f383 8811 	msr	BASEPRI, r3
 80040ea:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
 80040ee:	f7fd fd87 	bl	8001c00 <z_clock_elapsed>
 80040f2:	4b06      	ldr	r3, [pc, #24]	; (800410c <z_tick_get+0x30>)
 80040f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f8:	1812      	adds	r2, r2, r0
 80040fa:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
 80040fe:	f384 8811 	msr	BASEPRI, r4
 8004102:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 8004106:	4610      	mov	r0, r2
 8004108:	4619      	mov	r1, r3
 800410a:	bd10      	pop	{r4, pc}
 800410c:	24000248 	.word	0x24000248

08004110 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
 8004110:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
 8004112:	4c06      	ldr	r4, [pc, #24]	; (800412c <statics_init+0x1c>)
 8004114:	4d06      	ldr	r5, [pc, #24]	; (8004130 <statics_init+0x20>)
 8004116:	42ac      	cmp	r4, r5
 8004118:	d301      	bcc.n	800411e <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
 800411a:	2000      	movs	r0, #0
 800411c:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
 800411e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8004122:	4620      	mov	r0, r4
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
 8004124:	3414      	adds	r4, #20
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
 8004126:	f000 fd42 	bl	8004bae <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
 800412a:	e7f4      	b.n	8004116 <statics_init+0x6>
 800412c:	24000138 	.word	0x24000138
 8004130:	24000138 	.word	0x24000138

08004134 <arch_printk_char_out>:
}
 8004134:	2000      	movs	r0, #0
 8004136:	4770      	bx	lr

08004138 <printk>:
 * @param fmt formatted string to output
 *
 * @return N/A
 */
void printk(const char *fmt, ...)
{
 8004138:	b40f      	push	{r0, r1, r2, r3}
 800413a:	b507      	push	{r0, r1, r2, lr}
 800413c:	a904      	add	r1, sp, #16
 800413e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
 8004142:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
 8004144:	f000 f8f6 	bl	8004334 <log_printk>
	} else {
		vprintk(fmt, ap);
	}
	va_end(ap);
}
 8004148:	b003      	add	sp, #12
 800414a:	f85d eb04 	ldr.w	lr, [sp], #4
 800414e:	b004      	add	sp, #16
 8004150:	4770      	bx	lr

08004152 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 8004152:	4604      	mov	r4, r0
 8004154:	4608      	mov	r0, r1
 8004156:	4611      	mov	r1, r2
	entry(p1, p2, p3);
 8004158:	461a      	mov	r2, r3
{
 800415a:	b508      	push	{r3, lr}
	entry(p1, p2, p3);
 800415c:	47a0      	blx	r4
	return z_impl_k_current_get();
 800415e:	f7ff fdc5 	bl	8003cec <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
 8004162:	f7fe f90b 	bl	800237c <z_impl_k_thread_abort>

08004166 <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
 8004166:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
 8004168:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
 800416c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
 8004170:	bf2c      	ite	cs
 8004172:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
 8004176:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
 800417a:	4770      	bx	lr

0800417c <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
 800417c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
 8004180:	6880      	ldr	r0, [r0, #8]
 8004182:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
 8004186:	bf2c      	ite	cs
 8004188:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
 800418c:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
 8004190:	4770      	bx	lr

08004192 <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 8004192:	2201      	movs	r2, #1
{
 8004194:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 8004196:	f7ff ffe6 	bl	8004166 <chunk_field>
}
 800419a:	0840      	lsrs	r0, r0, #1
 800419c:	bd08      	pop	{r3, pc}

0800419e <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
 800419e:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
 80041a0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
 80041a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041a8:	d308      	bcc.n	80041bc <set_chunk_used+0x1e>
		if (used) {
 80041aa:	684b      	ldr	r3, [r1, #4]
 80041ac:	b11a      	cbz	r2, 80041b6 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
 80041ae:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
 80041b2:	604b      	str	r3, [r1, #4]
 80041b4:	4770      	bx	lr
 80041b6:	f023 0301 	bic.w	r3, r3, #1
 80041ba:	e7fa      	b.n	80041b2 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
 80041bc:	884b      	ldrh	r3, [r1, #2]
 80041be:	b11a      	cbz	r2, 80041c8 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 80041c0:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
 80041c4:	804b      	strh	r3, [r1, #2]
		}
	}
}
 80041c6:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
 80041c8:	f023 0301 	bic.w	r3, r3, #1
 80041cc:	e7fa      	b.n	80041c4 <set_chunk_used+0x26>

080041ce <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 80041ce:	0053      	lsls	r3, r2, #1
 80041d0:	2201      	movs	r2, #1
 80041d2:	f7ff bfd3 	b.w	800417c <chunk_set>

080041d6 <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
 80041d6:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
 80041d8:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 80041da:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80041de:	bf2c      	ite	cs
 80041e0:	2002      	movcs	r0, #2
 80041e2:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
 80041e4:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
 80041e6:	fab0 f080 	clz	r0, r0
}
 80041ea:	f1c0 001f 	rsb	r0, r0, #31
 80041ee:	4770      	bx	lr

080041f0 <free_list_add>:
		set_prev_free_chunk(h, second, c);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
 80041f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041f4:	4604      	mov	r4, r0
 80041f6:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
 80041f8:	f7ff ffcb 	bl	8004192 <chunk_size>
 80041fc:	4601      	mov	r1, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
 80041fe:	68a3      	ldr	r3, [r4, #8]
 8004200:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004204:	d301      	bcc.n	800420a <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
 8004206:	2801      	cmp	r0, #1
 8004208:	d035      	beq.n	8004276 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
 800420a:	4620      	mov	r0, r4
 800420c:	f7ff ffe3 	bl	80041d6 <bucket_idx>
	if (b->next == 0U) {
 8004210:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 8004214:	6916      	ldr	r6, [r2, #16]
 8004216:	b99e      	cbnz	r6, 8004240 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
 8004218:	2301      	movs	r3, #1
	chunk_set(h, c, FREE_PREV, prev);
 800421a:	4629      	mov	r1, r5
 800421c:	fa03 f000 	lsl.w	r0, r3, r0
 8004220:	68e3      	ldr	r3, [r4, #12]
 8004222:	4303      	orrs	r3, r0
 8004224:	4620      	mov	r0, r4
 8004226:	60e3      	str	r3, [r4, #12]
 8004228:	462b      	mov	r3, r5
		b->next = c;
 800422a:	6115      	str	r5, [r2, #16]
 800422c:	2202      	movs	r2, #2
 800422e:	f7ff ffa5 	bl	800417c <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
 8004232:	2203      	movs	r2, #3
 8004234:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
 8004236:	4620      	mov	r0, r4
		free_list_add_bidx(h, c, bidx);
	}
}
 8004238:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800423c:	f7ff bf9e 	b.w	800417c <chunk_set>
	return chunk_field(h, c, FREE_PREV);
 8004240:	2202      	movs	r2, #2
 8004242:	4631      	mov	r1, r6
 8004244:	4620      	mov	r0, r4
 8004246:	f7ff ff8e 	bl	8004166 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
 800424a:	2202      	movs	r2, #2
 800424c:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
 800424e:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
 8004250:	4629      	mov	r1, r5
 8004252:	4620      	mov	r0, r4
 8004254:	f7ff ff92 	bl	800417c <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
 8004258:	4633      	mov	r3, r6
 800425a:	2203      	movs	r2, #3
 800425c:	4629      	mov	r1, r5
 800425e:	4620      	mov	r0, r4
 8004260:	f7ff ff8c 	bl	800417c <chunk_set>
 8004264:	2203      	movs	r2, #3
 8004266:	4639      	mov	r1, r7
 8004268:	462b      	mov	r3, r5
 800426a:	4620      	mov	r0, r4
 800426c:	f7ff ff86 	bl	800417c <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
 8004270:	2202      	movs	r2, #2
 8004272:	4631      	mov	r1, r6
 8004274:	e7df      	b.n	8004236 <free_list_add+0x46>
 8004276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800427a <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
 800427a:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
 800427e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004280:	bf2c      	ite	cs
 8004282:	2508      	movcs	r5, #8
 8004284:	2504      	movcc	r5, #4
	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 8004286:	1dcc      	adds	r4, r1, #7
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
 8004288:	2300      	movs	r3, #0
	bytes -= heap_footer_bytes(bytes);
 800428a:	1b55      	subs	r5, r2, r5
	h->chunk0_hdr_area = 0;
 800428c:	2200      	movs	r2, #0
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 800428e:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 8004292:	440d      	add	r5, r1
	heap->heap = h;
 8004294:	6004      	str	r4, [r0, #0]
	h->len = buf_sz;
	h->avail_buckets = 0;

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
 8004296:	4620      	mov	r0, r4
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 8004298:	f025 0507 	bic.w	r5, r5, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
 800429c:	1b2d      	subs	r5, r5, r4
	h->chunk0_hdr_area = 0;
 800429e:	e9c4 2300 	strd	r2, r3, [r4]
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
 80042a2:	08ed      	lsrs	r5, r5, #3
	h->avail_buckets = 0;
 80042a4:	2300      	movs	r3, #0
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
 80042a6:	4629      	mov	r1, r5
	h->len = buf_sz;
 80042a8:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
 80042aa:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
 80042ac:	f7ff ff93 	bl	80041d6 <bucket_idx>
 80042b0:	f104 0210 	add.w	r2, r4, #16
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
 80042b4:	0086      	lsls	r6, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
 80042b6:	1c41      	adds	r1, r0, #1
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
 80042b8:	4618      	mov	r0, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 80042ba:	361b      	adds	r6, #27
 80042bc:	08f6      	lsrs	r6, r6, #3
	for (int i = 0; i < nb_buckets; i++) {
 80042be:	428b      	cmp	r3, r1
 80042c0:	db29      	blt.n	8004316 <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
 80042c2:	4632      	mov	r2, r6
 80042c4:	4620      	mov	r0, r4
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
 80042c6:	1baf      	subs	r7, r5, r6
	set_chunk_size(h, 0, chunk0_size);
 80042c8:	2100      	movs	r1, #0
 80042ca:	f7ff ff80 	bl	80041ce <set_chunk_size>
	set_chunk_used(h, 0, true);
 80042ce:	4620      	mov	r0, r4
 80042d0:	2201      	movs	r2, #1
 80042d2:	2100      	movs	r1, #0
 80042d4:	f7ff ff63 	bl	800419e <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
 80042d8:	463a      	mov	r2, r7
 80042da:	4631      	mov	r1, r6
 80042dc:	f7ff ff77 	bl	80041ce <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
 80042e0:	4633      	mov	r3, r6
 80042e2:	4631      	mov	r1, r6
 80042e4:	4620      	mov	r0, r4
 80042e6:	2200      	movs	r2, #0
 80042e8:	f7ff ff48 	bl	800417c <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
 80042ec:	4629      	mov	r1, r5
 80042ee:	4620      	mov	r0, r4
 80042f0:	2200      	movs	r2, #0
 80042f2:	f7ff ff6c 	bl	80041ce <set_chunk_size>
 80042f6:	463b      	mov	r3, r7
 80042f8:	4629      	mov	r1, r5
 80042fa:	4620      	mov	r0, r4
 80042fc:	2200      	movs	r2, #0
 80042fe:	f7ff ff3d 	bl	800417c <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
 8004302:	4629      	mov	r1, r5
 8004304:	4620      	mov	r0, r4
 8004306:	2201      	movs	r2, #1
 8004308:	f7ff ff49 	bl	800419e <set_chunk_used>

	free_list_add(h, chunk0_size);
 800430c:	4631      	mov	r1, r6
}
 800430e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
 8004312:	f7ff bf6d 	b.w	80041f0 <free_list_add>
	for (int i = 0; i < nb_buckets; i++) {
 8004316:	3301      	adds	r3, #1
		h->buckets[i].next = 0;
 8004318:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
 800431c:	e7cf      	b.n	80042be <sys_heap_init+0x44>

0800431e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 800431e:	4770      	bx	lr

08004320 <k_uptime_get_32>:
 *    @option{CONFIG_SYS_CLOCK_TICKS_PER_SEC} config option
 *
 * @return The low 32 bits of the current uptime, in milliseconds.
 */
static inline uint32_t k_uptime_get_32(void)
{
 8004320:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 8004322:	f000 fc0c 	bl	8004b3e <z_impl_k_uptime_ticks>
			return t / (from_hz / to_hz);
 8004326:	220a      	movs	r2, #10
 8004328:	2300      	movs	r3, #0
 800432a:	f7fc fa33 	bl	8000794 <__aeabi_uldivmod>
	return (uint32_t)k_uptime_get();
}
 800432e:	bd08      	pop	{r3, pc}

08004330 <dummy_timestamp>:
 8004330:	2000      	movs	r0, #0
 8004332:	4770      	bx	lr

08004334 <log_printk>:
			log_generic(src_level_union.structure, fmt, ap,
 8004334:	2300      	movs	r3, #0
{
 8004336:	460a      	mov	r2, r1
			log_generic(src_level_union.structure, fmt, ap,
 8004338:	4601      	mov	r1, r0
 800433a:	4618      	mov	r0, r3
 800433c:	f7fc be38 	b.w	8000fb0 <log_generic>

08004340 <log_string_sync>:
{
 8004340:	b40e      	push	{r1, r2, r3}
 8004342:	b503      	push	{r0, r1, lr}
 8004344:	aa03      	add	r2, sp, #12
	log_generic(src_level, fmt, ap, LOG_STRDUP_SKIP);
 8004346:	2300      	movs	r3, #0
{
 8004348:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
 800434c:	9201      	str	r2, [sp, #4]
	log_generic(src_level, fmt, ap, LOG_STRDUP_SKIP);
 800434e:	f7fc fe2f 	bl	8000fb0 <log_generic>
}
 8004352:	b002      	add	sp, #8
 8004354:	f85d eb04 	ldr.w	lr, [sp], #4
 8004358:	b003      	add	sp, #12
 800435a:	4770      	bx	lr

0800435c <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
 800435c:	b508      	push	{r3, lr}
				K_KERNEL_STACK_SIZEOF(logging_stack),
				log_process_thread_func, NULL, NULL, NULL,
				K_LOWEST_APPLICATION_THREAD_PRIO, 0, K_NO_WAIT);
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
 800435e:	f7fc fe89 	bl	8001074 <log_init>
	}

	return 0;
}
 8004362:	2000      	movs	r0, #0
 8004364:	bd08      	pop	{r3, pc}

08004366 <log_strdup>:
}
 8004366:	4770      	bx	lr

08004368 <out_func>:
{
 8004368:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((uint8_t *)&c, 1, out_ctx->control_block->ctx);
 800436a:	e9d1 3200 	ldrd	r3, r2, [r1]
{
 800436e:	9001      	str	r0, [sp, #4]
		out_ctx->func((uint8_t *)&c, 1, out_ctx->control_block->ctx);
 8004370:	2101      	movs	r1, #1
 8004372:	6852      	ldr	r2, [r2, #4]
 8004374:	a801      	add	r0, sp, #4
 8004376:	4798      	blx	r3
}
 8004378:	2000      	movs	r0, #0
 800437a:	b003      	add	sp, #12
 800437c:	f85d fb04 	ldr.w	pc, [sp], #4

08004380 <buffer_write>:
{
 8004380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004382:	4606      	mov	r6, r0
 8004384:	460d      	mov	r5, r1
 8004386:	4614      	mov	r4, r2
 8004388:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
 800438a:	4621      	mov	r1, r4
 800438c:	4628      	mov	r0, r5
 800438e:	463a      	mov	r2, r7
 8004390:	47b0      	blx	r6
	} while (len != 0);
 8004392:	1a24      	subs	r4, r4, r0
		buf += processed;
 8004394:	4405      	add	r5, r0
	} while (len != 0);
 8004396:	d1f8      	bne.n	800438a <buffer_write+0xa>
}
 8004398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800439a <log_output_flush>:
		     log_output->control_block->offset,
 800439a:	6842      	ldr	r2, [r0, #4]
	buffer_write(log_output->func, log_output->buf,
 800439c:	6881      	ldr	r1, [r0, #8]
{
 800439e:	b510      	push	{r4, lr}
 80043a0:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
 80043a2:	6800      	ldr	r0, [r0, #0]
 80043a4:	e9d2 2300 	ldrd	r2, r3, [r2]
 80043a8:	f7ff ffea 	bl	8004380 <buffer_write>
	log_output->control_block->offset = 0;
 80043ac:	6863      	ldr	r3, [r4, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	601a      	str	r2, [r3, #0]
}
 80043b2:	bd10      	pop	{r4, pc}

080043b4 <__stm32_exti_isr.isra.0>:
static void __stm32_exti_isr(int min, int max, const struct device *dev)
 80043b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043b8:	4604      	mov	r4, r0
 80043ba:	460e      	mov	r6, r1
 80043bc:	4615      	mov	r5, r2
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 80043be:	f04f 0801 	mov.w	r8, #1
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1U : 0U);
 80043c2:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
			data->cb[line].cb(line, data->cb[line].data);
 80043c6:	f102 0904 	add.w	r9, r2, #4
	for (line = min; line < max; line++) {
 80043ca:	42b4      	cmp	r4, r6
 80043cc:	db01      	blt.n	80043d2 <__stm32_exti_isr.isra.0+0x1e>
}
 80043ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 80043d2:	fa08 f304 	lsl.w	r3, r8, r4
 80043d6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
		if (stm32_exti_is_pending(line)) {
 80043da:	ea33 0202 	bics.w	r2, r3, r2
 80043de:	d108      	bne.n	80043f2 <__stm32_exti_isr.isra.0+0x3e>
  *         @arg @ref LL_EXTI_LINE_21
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 80043e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			if (!data->cb[line].cb) {
 80043e4:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 80043e8:	b11b      	cbz	r3, 80043f2 <__stm32_exti_isr.isra.0+0x3e>
			data->cb[line].cb(line, data->cb[line].data);
 80043ea:	f859 1034 	ldr.w	r1, [r9, r4, lsl #3]
 80043ee:	4620      	mov	r0, r4
 80043f0:	4798      	blx	r3
	for (line = min; line < max; line++) {
 80043f2:	3401      	adds	r4, #1
 80043f4:	e7e9      	b.n	80043ca <__stm32_exti_isr.isra.0+0x16>

080043f6 <__stm32_exti_isr_0>:
	__stm32_exti_isr(0, 1, arg);
 80043f6:	68c2      	ldr	r2, [r0, #12]
 80043f8:	2101      	movs	r1, #1
 80043fa:	2000      	movs	r0, #0
 80043fc:	f7ff bfda 	b.w	80043b4 <__stm32_exti_isr.isra.0>

08004400 <__stm32_exti_isr_1>:
	__stm32_exti_isr(1, 2, arg);
 8004400:	68c2      	ldr	r2, [r0, #12]
 8004402:	2102      	movs	r1, #2
 8004404:	2001      	movs	r0, #1
 8004406:	f7ff bfd5 	b.w	80043b4 <__stm32_exti_isr.isra.0>

0800440a <__stm32_exti_isr_2>:
	__stm32_exti_isr(2, 3, arg);
 800440a:	68c2      	ldr	r2, [r0, #12]
 800440c:	2103      	movs	r1, #3
 800440e:	2002      	movs	r0, #2
 8004410:	f7ff bfd0 	b.w	80043b4 <__stm32_exti_isr.isra.0>

08004414 <__stm32_exti_isr_3>:
	__stm32_exti_isr(3, 4, arg);
 8004414:	68c2      	ldr	r2, [r0, #12]
 8004416:	2104      	movs	r1, #4
 8004418:	2003      	movs	r0, #3
 800441a:	f7ff bfcb 	b.w	80043b4 <__stm32_exti_isr.isra.0>

0800441e <__stm32_exti_isr_4>:
	__stm32_exti_isr(4, 5, arg);
 800441e:	68c2      	ldr	r2, [r0, #12]
 8004420:	2105      	movs	r1, #5
 8004422:	2004      	movs	r0, #4
 8004424:	f7ff bfc6 	b.w	80043b4 <__stm32_exti_isr.isra.0>

08004428 <__stm32_exti_isr_9_5>:
	__stm32_exti_isr(5, 10, arg);
 8004428:	68c2      	ldr	r2, [r0, #12]
 800442a:	210a      	movs	r1, #10
 800442c:	2005      	movs	r0, #5
 800442e:	f7ff bfc1 	b.w	80043b4 <__stm32_exti_isr.isra.0>

08004432 <__stm32_exti_isr_15_10>:
	__stm32_exti_isr(10, 16, arg);
 8004432:	68c2      	ldr	r2, [r0, #12]
 8004434:	2110      	movs	r1, #16
 8004436:	200a      	movs	r0, #10
 8004438:	f7ff bfbc 	b.w	80043b4 <__stm32_exti_isr.isra.0>

0800443c <stm32_exti_init>:
	defined(CONFIG_SOC_SERIES_STM32L4X) || \
	defined(CONFIG_SOC_SERIES_STM32L5X) || \
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X)
	IRQ_CONNECT(EXTI0_IRQn,
 800443c:	2200      	movs	r2, #0
 800443e:	2006      	movs	r0, #6
{
 8004440:	b508      	push	{r3, lr}
	IRQ_CONNECT(EXTI0_IRQn,
 8004442:	4611      	mov	r1, r2
 8004444:	f7fd fc5e 	bl	8001d04 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 8004448:	2200      	movs	r2, #0
 800444a:	2007      	movs	r0, #7
 800444c:	4611      	mov	r1, r2
 800444e:	f7fd fc59 	bl	8001d04 <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_GET(exti_stm32),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 8004452:	2200      	movs	r2, #0
 8004454:	2008      	movs	r0, #8
 8004456:	4611      	mov	r1, r2
 8004458:	f7fd fc54 	bl	8001d04 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_GET(exti_stm32),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 800445c:	2200      	movs	r2, #0
 800445e:	2009      	movs	r0, #9
 8004460:	4611      	mov	r1, r2
 8004462:	f7fd fc4f 	bl	8001d04 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 8004466:	2200      	movs	r2, #0
 8004468:	200a      	movs	r0, #10
 800446a:	4611      	mov	r1, r2
 800446c:	f7fd fc4a 	bl	8001d04 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI4_IRQ_PRI,
		__stm32_exti_isr_4, DEVICE_GET(exti_stm32),
		0);
#if !defined(CONFIG_SOC_SERIES_STM32MP1X) && \
	!defined(CONFIG_SOC_SERIES_STM32L5X)
	IRQ_CONNECT(EXTI9_5_IRQn,
 8004470:	2200      	movs	r2, #0
 8004472:	2017      	movs	r0, #23
 8004474:	4611      	mov	r1, r2
 8004476:	f7fd fc45 	bl	8001d04 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 800447a:	2200      	movs	r2, #0
 800447c:	2028      	movs	r0, #40	; 0x28
 800447e:	4611      	mov	r1, r2
 8004480:	f7fd fc40 	bl	8001d04 <z_arm_irq_priority_set>
}
 8004484:	2000      	movs	r0, #0
 8004486:	bd08      	pop	{r3, pc}

08004488 <stm32_exti_disable>:
	if (line < 32) {
 8004488:	281f      	cmp	r0, #31
 800448a:	dc0a      	bgt.n	80044a2 <stm32_exti_disable+0x1a>
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800448c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
		LL_EXTI_DisableIT_0_31(1 << line);
 8004490:	2201      	movs	r2, #1
 8004492:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 8004496:	fa02 f000 	lsl.w	r0, r2, r0
 800449a:	ea23 0000 	bic.w	r0, r3, r0
 800449e:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
}
 80044a2:	4770      	bx	lr

080044a4 <stm32_exti_trigger>:
	switch (trigger) {
 80044a4:	2903      	cmp	r1, #3
 80044a6:	d810      	bhi.n	80044ca <stm32_exti_trigger+0x26>
 80044a8:	e8df f001 	tbb	[pc, r1]
 80044ac:	26191002 	.word	0x26191002
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80044b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 80044b4:	2201      	movs	r2, #1
 80044b6:	6819      	ldr	r1, [r3, #0]
 80044b8:	fa02 f000 	lsl.w	r0, r2, r0
 80044bc:	ea21 0100 	bic.w	r1, r1, r0
 80044c0:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80044c2:	685a      	ldr	r2, [r3, #4]
 80044c4:	ea22 0000 	bic.w	r0, r2, r0
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80044c8:	6058      	str	r0, [r3, #4]
}
 80044ca:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 80044cc:	2301      	movs	r3, #1
 80044ce:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80044d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	4302      	orrs	r2, r0
 80044da:	601a      	str	r2, [r3, #0]
 80044dc:	e7f1      	b.n	80044c2 <stm32_exti_trigger+0x1e>
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 80044de:	2301      	movs	r3, #1
 80044e0:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80044e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044e8:	685a      	ldr	r2, [r3, #4]
 80044ea:	4302      	orrs	r2, r0
 80044ec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	ea22 0000 	bic.w	r0, r2, r0
 80044f4:	6018      	str	r0, [r3, #0]
}
 80044f6:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 80044f8:	2301      	movs	r3, #1
 80044fa:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80044fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	4302      	orrs	r2, r0
 8004506:	601a      	str	r2, [r3, #0]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8004508:	685a      	ldr	r2, [r3, #4]
 800450a:	4310      	orrs	r0, r2
 800450c:	e7dc      	b.n	80044c8 <stm32_exti_trigger+0x24>

0800450e <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 800450e:	2100      	movs	r1, #0
 8004510:	2001      	movs	r0, #1
 8004512:	f7fd bc6b 	b.w	8001dec <z_arm_fatal_error>

08004516 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 8004516:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
 8004518:	6800      	ldr	r0, [r0, #0]
 800451a:	f7fd bc67 	b.w	8001dec <z_arm_fatal_error>

0800451e <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
 800451e:	b508      	push	{r3, lr}
	handler();
 8004520:	f7fd fc9c 	bl	8001e5c <z_SysNmiOnReset>
	z_arm_int_exit();
}
 8004524:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 8004528:	f7fd bf0e 	b.w	8002348 <z_arm_exc_exit>

0800452c <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
 800452c:	1e43      	subs	r3, r0, #1
 800452e:	3901      	subs	r1, #1
 8004530:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8004534:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8004538:	4282      	cmp	r2, r0
 800453a:	d101      	bne.n	8004540 <strcmp+0x14>
 800453c:	2a00      	cmp	r2, #0
 800453e:	d1f7      	bne.n	8004530 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
 8004540:	1a10      	subs	r0, r2, r0
 8004542:	4770      	bx	lr

08004544 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
 8004544:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
 8004546:	ea81 0400 	eor.w	r4, r1, r0
 800454a:	4603      	mov	r3, r0
 800454c:	07a5      	lsls	r5, r4, #30
 800454e:	d00b      	beq.n	8004568 <memcpy+0x24>
 8004550:	3b01      	subs	r3, #1
 8004552:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
 8004554:	4291      	cmp	r1, r2
 8004556:	d11b      	bne.n	8004590 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
 8004558:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
 800455a:	2a00      	cmp	r2, #0
 800455c:	d0fc      	beq.n	8004558 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
 800455e:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
 8004562:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
 8004564:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
 8004568:	079c      	lsls	r4, r3, #30
 800456a:	d1f6      	bne.n	800455a <memcpy+0x16>
 800456c:	f022 0403 	bic.w	r4, r2, #3
 8004570:	1f1d      	subs	r5, r3, #4
 8004572:	0896      	lsrs	r6, r2, #2
 8004574:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
 8004576:	42b9      	cmp	r1, r7
 8004578:	d105      	bne.n	8004586 <memcpy+0x42>
 800457a:	f06f 0503 	mvn.w	r5, #3
 800457e:	4423      	add	r3, r4
 8004580:	fb05 2206 	mla	r2, r5, r6, r2
 8004584:	e7e4      	b.n	8004550 <memcpy+0xc>
			*(d_word++) = *(s_word++);
 8004586:	f851 cb04 	ldr.w	ip, [r1], #4
 800458a:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
 800458e:	e7f2      	b.n	8004576 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
 8004590:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004594:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
 8004598:	e7dc      	b.n	8004554 <memcpy+0x10>

0800459a <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
 800459a:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
 800459c:	4603      	mov	r3, r0
{
 800459e:	b570      	push	{r4, r5, r6, lr}

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
 80045a0:	079c      	lsls	r4, r3, #30
 80045a2:	d111      	bne.n	80045c8 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
 80045a4:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
 80045a8:	f022 0603 	bic.w	r6, r2, #3
 80045ac:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
 80045b0:	441e      	add	r6, r3
 80045b2:	0894      	lsrs	r4, r2, #2
 80045b4:	42b3      	cmp	r3, r6
 80045b6:	d10d      	bne.n	80045d4 <memset+0x3a>
 80045b8:	f06f 0503 	mvn.w	r5, #3
 80045bc:	fb05 2204 	mla	r2, r5, r4, r2
 80045c0:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d109      	bne.n	80045da <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
 80045c6:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
 80045c8:	2a00      	cmp	r2, #0
 80045ca:	d0fc      	beq.n	80045c6 <memset+0x2c>
		n--;
 80045cc:	3a01      	subs	r2, #1
		*(d_byte++) = c_byte;
 80045ce:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 80045d2:	e7e5      	b.n	80045a0 <memset+0x6>
		*(d_word++) = c_word;
 80045d4:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
 80045d8:	e7ec      	b.n	80045b4 <memset+0x1a>
		*(d_byte++) = c_byte;
 80045da:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 80045de:	e7f0      	b.n	80045c2 <memset+0x28>

080045e0 <_stdout_hook_default>:
}
 80045e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045e4:	4770      	bx	lr

080045e6 <gpio_stm32_isr>:
{
 80045e6:	460b      	mov	r3, r1
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 80045e8:	6889      	ldr	r1, [r1, #8]
 80045ea:	b570      	push	{r4, r5, r6, lr}
 80045ec:	b1a9      	cbz	r1, 800461a <gpio_stm32_isr+0x34>
 80045ee:	680c      	ldr	r4, [r1, #0]
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 80045f0:	2501      	movs	r5, #1
 80045f2:	685e      	ldr	r6, [r3, #4]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
 80045f4:	2c00      	cmp	r4, #0
 80045f6:	fa05 f500 	lsl.w	r5, r5, r0
 80045fa:	bf38      	it	cc
 80045fc:	2400      	movcc	r4, #0
		if (cb->pin_mask & pins) {
 80045fe:	688a      	ldr	r2, [r1, #8]
 8004600:	402a      	ands	r2, r5
 8004602:	d002      	beq.n	800460a <gpio_stm32_isr+0x24>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 8004604:	684b      	ldr	r3, [r1, #4]
 8004606:	4630      	mov	r0, r6
 8004608:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 800460a:	b134      	cbz	r4, 800461a <gpio_stm32_isr+0x34>
 800460c:	6823      	ldr	r3, [r4, #0]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 800460e:	4621      	mov	r1, r4
 8004610:	2b00      	cmp	r3, #0
 8004612:	bf38      	it	cc
 8004614:	2300      	movcc	r3, #0
 8004616:	461c      	mov	r4, r3
 8004618:	e7f1      	b.n	80045fe <gpio_stm32_isr+0x18>
}
 800461a:	bd70      	pop	{r4, r5, r6, pc}

0800461c <gpio_stm32_port_get_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800461c:	6843      	ldr	r3, [r0, #4]
}
 800461e:	2000      	movs	r0, #0
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8004620:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8004622:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 8004624:	600b      	str	r3, [r1, #0]
}
 8004626:	4770      	bx	lr

08004628 <gpio_stm32_port_set_masked_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8004628:	6843      	ldr	r3, [r0, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 800462c:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 800462e:	4042      	eors	r2, r0
 8004630:	400a      	ands	r2, r1
 8004632:	4042      	eors	r2, r0
}
 8004634:	2000      	movs	r0, #0
  WRITE_REG(GPIOx->ODR, PortValue);
 8004636:	615a      	str	r2, [r3, #20]
 8004638:	4770      	bx	lr

0800463a <gpio_stm32_port_set_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800463a:	6843      	ldr	r3, [r0, #4]
}
 800463c:	2000      	movs	r0, #0
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800463e:	685b      	ldr	r3, [r3, #4]
	WRITE_REG(gpio->BSRR, pins);
 8004640:	6199      	str	r1, [r3, #24]
}
 8004642:	4770      	bx	lr

08004644 <gpio_stm32_port_clear_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8004644:	6843      	ldr	r3, [r0, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 8004646:	0409      	lsls	r1, r1, #16
}
 8004648:	2000      	movs	r0, #0
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	6199      	str	r1, [r3, #24]
}
 800464e:	4770      	bx	lr

08004650 <gpio_stm32_port_toggle_bits>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8004650:	6843      	ldr	r3, [r0, #4]
}
 8004652:	2000      	movs	r0, #0
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8004654:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 8004656:	6953      	ldr	r3, [r2, #20]
 8004658:	404b      	eors	r3, r1
 800465a:	6153      	str	r3, [r2, #20]
}
 800465c:	4770      	bx	lr

0800465e <gpio_stm32_manage_callback>:
	struct gpio_stm32_data *data = dev->data;
 800465e:	68c3      	ldr	r3, [r0, #12]
Z_GENLIST_IS_EMPTY(slist)
 8004660:	6898      	ldr	r0, [r3, #8]
{
 8004662:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
 8004664:	b158      	cbz	r0, 800467e <gpio_stm32_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8004666:	2400      	movs	r4, #0
 8004668:	4281      	cmp	r1, r0
 800466a:	d113      	bne.n	8004694 <gpio_stm32_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
 800466c:	6808      	ldr	r0, [r1, #0]
 800466e:	b95c      	cbnz	r4, 8004688 <gpio_stm32_manage_callback+0x2a>
 8004670:	68dc      	ldr	r4, [r3, #12]
	list->head = node;
 8004672:	6098      	str	r0, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
 8004674:	42a1      	cmp	r1, r4
 8004676:	d100      	bne.n	800467a <gpio_stm32_manage_callback+0x1c>
	list->tail = node;
 8004678:	60d8      	str	r0, [r3, #12]
	parent->next = child;
 800467a:	2000      	movs	r0, #0
 800467c:	6008      	str	r0, [r1, #0]
	if (set) {
 800467e:	b972      	cbnz	r2, 800469e <gpio_stm32_manage_callback+0x40>
	return 0;
 8004680:	2000      	movs	r0, #0
}
 8004682:	bd30      	pop	{r4, r5, pc}
 8004684:	4628      	mov	r0, r5
 8004686:	e7ef      	b.n	8004668 <gpio_stm32_manage_callback+0xa>
 8004688:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
 800468a:	68d8      	ldr	r0, [r3, #12]
 800468c:	4281      	cmp	r1, r0
	list->tail = node;
 800468e:	bf08      	it	eq
 8004690:	60dc      	streq	r4, [r3, #12]
}
 8004692:	e7f2      	b.n	800467a <gpio_stm32_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 8004694:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8004696:	4604      	mov	r4, r0
 8004698:	2d00      	cmp	r5, #0
 800469a:	d1f3      	bne.n	8004684 <gpio_stm32_manage_callback+0x26>
			if (!set) {
 800469c:	b13a      	cbz	r2, 80046ae <gpio_stm32_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
 800469e:	689a      	ldr	r2, [r3, #8]
	parent->next = child;
 80046a0:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
 80046a2:	68d8      	ldr	r0, [r3, #12]
	list->head = node;
 80046a4:	6099      	str	r1, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
 80046a6:	2800      	cmp	r0, #0
 80046a8:	d1ea      	bne.n	8004680 <gpio_stm32_manage_callback+0x22>
	list->tail = node;
 80046aa:	60d9      	str	r1, [r3, #12]
}
 80046ac:	e7e9      	b.n	8004682 <gpio_stm32_manage_callback+0x24>
				return -EINVAL;
 80046ae:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&data->cb, callback, set);
 80046b2:	e7e6      	b.n	8004682 <gpio_stm32_manage_callback+0x24>

080046b4 <gpio_stm32_configure>:
{
 80046b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	pinval = 1 << pin;
 80046b8:	2401      	movs	r4, #1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80046ba:	6846      	ldr	r6, [r0, #4]
{
 80046bc:	4615      	mov	r5, r2
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 80046be:	f002 0c30 	and.w	ip, r2, #48	; 0x30
	pinval = 1 << pin;
 80046c2:	408c      	lsls	r4, r1
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 80046c4:	f3c2 1280 	ubfx	r2, r2, #6, #1
	if (mode == STM32_MODER_ALT_MODE) {
 80046c8:	f1bc 0f20 	cmp.w	ip, #32
 80046cc:	ea26 0604 	bic.w	r6, r6, r4
 80046d0:	fa02 f201 	lsl.w	r2, r2, r1
 80046d4:	ea42 0206 	orr.w	r2, r2, r6
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80046d8:	fa04 f601 	lsl.w	r6, r4, r1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80046dc:	6042      	str	r2, [r0, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80046de:	eb06 0e46 	add.w	lr, r6, r6, lsl #1
 80046e2:	f8d0 8008 	ldr.w	r8, [r0, #8]
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 80046e6:	f3c5 12c1 	ubfx	r2, r5, #7, #2
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 80046ea:	f3c5 2541 	ubfx	r5, r5, #9, #2
 80046ee:	ea6f 070e 	mvn.w	r7, lr
 80046f2:	fb06 f202 	mul.w	r2, r6, r2
 80046f6:	ea28 080e 	bic.w	r8, r8, lr
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80046fa:	fb06 f505 	mul.w	r5, r6, r5
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80046fe:	ea42 0208 	orr.w	r2, r2, r8
 8004702:	6082      	str	r2, [r0, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8004704:	68c2      	ldr	r2, [r0, #12]
 8004706:	ea22 020e 	bic.w	r2, r2, lr
 800470a:	ea45 0502 	orr.w	r5, r5, r2
 800470e:	60c5      	str	r5, [r0, #12]
	if (mode == STM32_MODER_ALT_MODE) {
 8004710:	d10d      	bne.n	800472e <gpio_stm32_configure+0x7a>
		if (pin < 8) {
 8004712:	2907      	cmp	r1, #7
 8004714:	dc15      	bgt.n	8004742 <gpio_stm32_configure+0x8e>
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8004716:	fa06 f201 	lsl.w	r2, r6, r1
 800471a:	6a04      	ldr	r4, [r0, #32]
 800471c:	fa02 f101 	lsl.w	r1, r2, r1
 8004720:	ebc1 1201 	rsb	r2, r1, r1, lsl #4
 8004724:	4359      	muls	r1, r3
 8004726:	ea24 0202 	bic.w	r2, r4, r2
 800472a:	4311      	orrs	r1, r2
 800472c:	6201      	str	r1, [r0, #32]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800472e:	6802      	ldr	r2, [r0, #0]
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 8004730:	ea4f 131c 	mov.w	r3, ip, lsr #4
 8004734:	4017      	ands	r7, r2
 8004736:	4373      	muls	r3, r6
 8004738:	433b      	orrs	r3, r7
 800473a:	6003      	str	r3, [r0, #0]
}
 800473c:	2000      	movs	r0, #0
 800473e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8004742:	0a22      	lsrs	r2, r4, #8
 8004744:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8004746:	4352      	muls	r2, r2
 8004748:	4352      	muls	r2, r2
 800474a:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
 800474e:	435a      	muls	r2, r3
 8004750:	ea21 0104 	bic.w	r1, r1, r4
 8004754:	430a      	orrs	r2, r1
 8004756:	6242      	str	r2, [r0, #36]	; 0x24
}
 8004758:	e7e9      	b.n	800472e <gpio_stm32_configure+0x7a>

0800475a <gpio_stm32_config>:
{
 800475a:	b538      	push	{r3, r4, r5, lr}
 800475c:	4613      	mov	r3, r2
 800475e:	460c      	mov	r4, r1
	const struct gpio_stm32_config *cfg = dev->config;
 8004760:	6845      	ldr	r5, [r0, #4]
	if ((flags & GPIO_OUTPUT) != 0) {
 8004762:	059a      	lsls	r2, r3, #22
 8004764:	d518      	bpl.n	8004798 <gpio_stm32_config+0x3e>
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 8004766:	0799      	lsls	r1, r3, #30
 8004768:	d50f      	bpl.n	800478a <gpio_stm32_config+0x30>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 800476a:	075a      	lsls	r2, r3, #29
 800476c:	d52e      	bpl.n	80047cc <gpio_stm32_config+0x72>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 800476e:	2250      	movs	r2, #80	; 0x50
		if ((flags & GPIO_PULL_UP) != 0) {
 8004770:	06d9      	lsls	r1, r3, #27
 8004772:	d50c      	bpl.n	800478e <gpio_stm32_config+0x34>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8004774:	f442 7200 	orr.w	r2, r2, #512	; 0x200
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 8004778:	0519      	lsls	r1, r3, #20
 800477a:	d41d      	bmi.n	80047b8 <gpio_stm32_config+0x5e>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 800477c:	055b      	lsls	r3, r3, #21
 800477e:	d514      	bpl.n	80047aa <gpio_stm32_config+0x50>
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 8004780:	2101      	movs	r1, #1
 8004782:	40a1      	lsls	r1, r4
 8004784:	f7ff ff5e 	bl	8004644 <gpio_stm32_port_clear_bits_raw>
 8004788:	e00f      	b.n	80047aa <gpio_stm32_config+0x50>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 800478a:	2210      	movs	r2, #16
 800478c:	e7f0      	b.n	8004770 <gpio_stm32_config+0x16>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 800478e:	0699      	lsls	r1, r3, #26
 8004790:	d5f2      	bpl.n	8004778 <gpio_stm32_config+0x1e>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8004792:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	if (err != 0) {
 8004796:	e7ef      	b.n	8004778 <gpio_stm32_config+0x1e>
	} else if  ((flags & GPIO_INPUT) != 0) {
 8004798:	05d9      	lsls	r1, r3, #23
 800479a:	d512      	bpl.n	80047c2 <gpio_stm32_config+0x68>
		if ((flags & GPIO_PULL_UP) != 0) {
 800479c:	06da      	lsls	r2, r3, #27
 800479e:	d412      	bmi.n	80047c6 <gpio_stm32_config+0x6c>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 80047a0:	f013 0220 	ands.w	r2, r3, #32
 80047a4:	bf18      	it	ne
 80047a6:	f44f 6280 	movne.w	r2, #1024	; 0x400
	gpio_stm32_configure(cfg->base, pin, pincfg, 0);
 80047aa:	2300      	movs	r3, #0
 80047ac:	4621      	mov	r1, r4
 80047ae:	6868      	ldr	r0, [r5, #4]
 80047b0:	f7ff ff80 	bl	80046b4 <gpio_stm32_configure>
 80047b4:	2000      	movs	r0, #0
}
 80047b6:	bd38      	pop	{r3, r4, r5, pc}
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 80047b8:	2301      	movs	r3, #1
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80047ba:	6869      	ldr	r1, [r5, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 80047bc:	40a3      	lsls	r3, r4
	WRITE_REG(gpio->BSRR, pins);
 80047be:	618b      	str	r3, [r1, #24]
	return 0;
 80047c0:	e7f3      	b.n	80047aa <gpio_stm32_config+0x50>
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 80047c2:	2230      	movs	r2, #48	; 0x30
 80047c4:	e7f1      	b.n	80047aa <gpio_stm32_config+0x50>
			*pincfg |= STM32_PINCFG_PULL_UP;
 80047c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047ca:	e7ee      	b.n	80047aa <gpio_stm32_config+0x50>
				return -ENOTSUP;
 80047cc:	f06f 0022 	mvn.w	r0, #34	; 0x22
	return err;
 80047d0:	e7f1      	b.n	80047b6 <gpio_stm32_config+0x5c>

080047d2 <LL_TIM_OC_SetCompareCH1>:
  WRITE_REG(TIMx->CCR1, CompareValue);
 80047d2:	6341      	str	r1, [r0, #52]	; 0x34
}
 80047d4:	4770      	bx	lr

080047d6 <LL_TIM_OC_SetCompareCH2>:
  WRITE_REG(TIMx->CCR2, CompareValue);
 80047d6:	6381      	str	r1, [r0, #56]	; 0x38
}
 80047d8:	4770      	bx	lr

080047da <LL_TIM_OC_SetCompareCH3>:
  WRITE_REG(TIMx->CCR3, CompareValue);
 80047da:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 80047dc:	4770      	bx	lr

080047de <LL_TIM_OC_SetCompareCH4>:
  WRITE_REG(TIMx->CCR4, CompareValue);
 80047de:	6401      	str	r1, [r0, #64]	; 0x40
}
 80047e0:	4770      	bx	lr

080047e2 <LL_TIM_OC_SetCompareCH5>:
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 80047e2:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80047e4:	6581      	str	r1, [r0, #88]	; 0x58
}
 80047e6:	4770      	bx	lr

080047e8 <LL_TIM_OC_SetCompareCH6>:
  WRITE_REG(TIMx->CCR6, CompareValue);
 80047e8:	65c1      	str	r1, [r0, #92]	; 0x5c
}
 80047ea:	4770      	bx	lr

080047ec <pwm_stm32_get_cycles_per_sec>:
	*cycles = (uint64_t)(data->tim_clk / (cfg->prescaler + 1));
 80047ec:	6843      	ldr	r3, [r0, #4]
{
 80047ee:	b510      	push	{r4, lr}
	*cycles = (uint64_t)(data->tim_clk / (cfg->prescaler + 1));
 80047f0:	6859      	ldr	r1, [r3, #4]
 80047f2:	68c4      	ldr	r4, [r0, #12]
 80047f4:	2000      	movs	r0, #0
 80047f6:	3101      	adds	r1, #1
 80047f8:	6823      	ldr	r3, [r4, #0]
 80047fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80047fe:	e9c2 3000 	strd	r3, r0, [r2]
}
 8004802:	bd10      	pop	{r4, pc}

08004804 <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 8004804:	68c3      	ldr	r3, [r0, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	600b      	str	r3, [r1, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800480a:	6843      	ldr	r3, [r0, #4]
 800480c:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800480e:	6813      	ldr	r3, [r2, #0]
 8004810:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 8004814:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004818:	d028      	beq.n	800486c <uart_stm32_config_get+0x68>
		return UART_CFG_PARITY_NONE;
 800481a:	f5a3 60c0 	sub.w	r0, r3, #1536	; 0x600
 800481e:	4243      	negs	r3, r0
 8004820:	4143      	adcs	r3, r0
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 8004822:	710b      	strb	r3, [r1, #4]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8004824:	6853      	ldr	r3, [r2, #4]
 8004826:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 800482a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800482e:	d01f      	beq.n	8004870 <uart_stm32_config_get+0x6c>
 8004830:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004834:	d01e      	beq.n	8004874 <uart_stm32_config_get+0x70>
 8004836:	2b00      	cmp	r3, #0
 8004838:	bf14      	ite	ne
 800483a:	2303      	movne	r3, #3
 800483c:	2301      	moveq	r3, #1
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 800483e:	714b      	strb	r3, [r1, #5]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8004840:	6813      	ldr	r3, [r2, #0]
 8004842:	f003 2310 	and.w	r3, r3, #268439552	; 0x10001000
	switch (db) {
 8004846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800484a:	d015      	beq.n	8004878 <uart_stm32_config_get+0x74>
 800484c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
		return UART_CFG_DATA_BITS_7;
 8004850:	bf14      	ite	ne
 8004852:	2303      	movne	r3, #3
 8004854:	2302      	moveq	r3, #2
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 8004856:	718b      	strb	r3, [r1, #6]
}
 8004858:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 800485a:	6893      	ldr	r3, [r2, #8]
 800485c:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 8004860:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 8004864:	4253      	negs	r3, r2
 8004866:	4153      	adcs	r3, r2
 8004868:	71cb      	strb	r3, [r1, #7]
}
 800486a:	4770      	bx	lr
	switch (parity) {
 800486c:	2302      	movs	r3, #2
 800486e:	e7d8      	b.n	8004822 <uart_stm32_config_get+0x1e>
		return UART_CFG_STOP_BITS_0_5;
 8004870:	2300      	movs	r3, #0
 8004872:	e7e4      	b.n	800483e <uart_stm32_config_get+0x3a>
		return UART_CFG_STOP_BITS_1_5;
 8004874:	2302      	movs	r3, #2
 8004876:	e7e2      	b.n	800483e <uart_stm32_config_get+0x3a>
	switch (db) {
 8004878:	2304      	movs	r3, #4
 800487a:	e7ec      	b.n	8004856 <uart_stm32_config_get+0x52>

0800487c <uart_stm32_poll_out>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800487c:	6843      	ldr	r3, [r0, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8004880:	69da      	ldr	r2, [r3, #28]
 8004882:	0612      	lsls	r2, r2, #24
 8004884:	d5fc      	bpl.n	8004880 <uart_stm32_poll_out+0x4>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8004886:	2240      	movs	r2, #64	; 0x40
 8004888:	621a      	str	r2, [r3, #32]
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 800488a:	6299      	str	r1, [r3, #40]	; 0x28
}
 800488c:	4770      	bx	lr

0800488e <uart_stm32_err_check>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800488e:	6843      	ldr	r3, [r0, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8004892:	69d8      	ldr	r0, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 8004894:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8004896:	f3c0 00c0 	ubfx	r0, r0, #3, #1
	if (LL_USART_IsActiveFlag_PE(UartInstance)) {
 800489a:	07d2      	lsls	r2, r2, #31
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 800489c:	69da      	ldr	r2, [r3, #28]
		err |= UART_ERROR_PARITY;
 800489e:	bf48      	it	mi
 80048a0:	f040 0002 	orrmi.w	r0, r0, #2
 80048a4:	0791      	lsls	r1, r2, #30
		err |= UART_ERROR_FRAMING;
 80048a6:	bf48      	it	mi
 80048a8:	f040 0004 	orrmi.w	r0, r0, #4
	if (err & UART_ERROR_OVERRUN) {
 80048ac:	07c2      	lsls	r2, r0, #31
 80048ae:	d501      	bpl.n	80048b4 <uart_stm32_err_check+0x26>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 80048b0:	2208      	movs	r2, #8
 80048b2:	621a      	str	r2, [r3, #32]
	if (err & UART_ERROR_PARITY) {
 80048b4:	0781      	lsls	r1, r0, #30
 80048b6:	d501      	bpl.n	80048bc <uart_stm32_err_check+0x2e>
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 80048b8:	2201      	movs	r2, #1
 80048ba:	621a      	str	r2, [r3, #32]
	if (err & UART_ERROR_FRAMING) {
 80048bc:	0742      	lsls	r2, r0, #29
 80048be:	d501      	bpl.n	80048c4 <uart_stm32_err_check+0x36>
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 80048c0:	2202      	movs	r2, #2
 80048c2:	621a      	str	r2, [r3, #32]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 80048c4:	2204      	movs	r2, #4
 80048c6:	621a      	str	r2, [r3, #32]
}
 80048c8:	4770      	bx	lr

080048ca <uart_stm32_poll_in>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80048ca:	6843      	ldr	r3, [r0, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80048ce:	69da      	ldr	r2, [r3, #28]
 80048d0:	0710      	lsls	r0, r2, #28
 80048d2:	d501      	bpl.n	80048d8 <uart_stm32_poll_in+0xe>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 80048d4:	2208      	movs	r2, #8
 80048d6:	621a      	str	r2, [r3, #32]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 80048d8:	69da      	ldr	r2, [r3, #28]
 80048da:	0692      	lsls	r2, r2, #26
 80048dc:	d503      	bpl.n	80048e6 <uart_stm32_poll_in+0x1c>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80048de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	return 0;
 80048e0:	2000      	movs	r0, #0
 80048e2:	700b      	strb	r3, [r1, #0]
 80048e4:	4770      	bx	lr
		return -1;
 80048e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80048ea:	4770      	bx	lr

080048ec <LL_RCC_CalcPLLClockFreq>:
{
 80048ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ee:	4605      	mov	r5, r0
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 80048f0:	4618      	mov	r0, r3
{
 80048f2:	4617      	mov	r7, r2
 80048f4:	460e      	mov	r6, r1
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 80048f6:	f7fb fd85 	bl	8000404 <__aeabi_ui2f>
 80048fa:	f04f 5164 	mov.w	r1, #956301312	; 0x39000000
 80048fe:	f7fb fdd9 	bl	80004b4 <__aeabi_fmul>
 8004902:	4604      	mov	r4, r0
 8004904:	4638      	mov	r0, r7
 8004906:	f7fb fd7d 	bl	8000404 <__aeabi_ui2f>
 800490a:	4601      	mov	r1, r0
 800490c:	4620      	mov	r0, r4
 800490e:	f7fb fcc9 	bl	80002a4 <__addsf3>
 8004912:	4604      	mov	r4, r0
 8004914:	4628      	mov	r0, r5
 8004916:	f7fb fd75 	bl	8000404 <__aeabi_ui2f>
 800491a:	4605      	mov	r5, r0
 800491c:	4630      	mov	r0, r6
 800491e:	f7fb fd71 	bl	8000404 <__aeabi_ui2f>
 8004922:	4601      	mov	r1, r0
 8004924:	4628      	mov	r0, r5
 8004926:	f7fb fe79 	bl	800061c <__aeabi_fdiv>
 800492a:	4601      	mov	r1, r0
 800492c:	4620      	mov	r0, r4
 800492e:	f7fb fdc1 	bl	80004b4 <__aeabi_fmul>
 8004932:	4604      	mov	r4, r0
  freq = freq/(float_t)PQR;
 8004934:	9806      	ldr	r0, [sp, #24]
 8004936:	f7fb fd65 	bl	8000404 <__aeabi_ui2f>
 800493a:	4601      	mov	r1, r0
 800493c:	4620      	mov	r0, r4
 800493e:	f7fb fe6d 	bl	800061c <__aeabi_fdiv>
  return (uint32_t)freq;
 8004942:	f7fb ff07 	bl	8000754 <__aeabi_f2uiz>
}
 8004946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004948 <LL_RCC_GetSystemClocksFreq>:
{
 8004948:	b510      	push	{r4, lr}
 800494a:	4604      	mov	r4, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800494c:	f7fe fa28 	bl	8002da0 <RCC_GetSystemClockFreq>
 8004950:	6020      	str	r0, [r4, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8004952:	f7fe fa4f 	bl	8002df4 <RCC_GetHCLKClockFreq>
 8004956:	60a0      	str	r0, [r4, #8]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004958:	f7fe fa5a 	bl	8002e10 <RCC_GetPCLK1ClockFreq>
 800495c:	60e0      	str	r0, [r4, #12]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800495e:	68a0      	ldr	r0, [r4, #8]
 8004960:	f7fe fa64 	bl	8002e2c <RCC_GetPCLK2ClockFreq>
 8004964:	6120      	str	r0, [r4, #16]
  RCC_Clocks->PCLK3_Frequency  = RCC_GetPCLK3ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004966:	68a0      	ldr	r0, [r4, #8]
 8004968:	f7fe fa6e 	bl	8002e48 <RCC_GetPCLK3ClockFreq>
 800496c:	6160      	str	r0, [r4, #20]
  RCC_Clocks->PCLK4_Frequency  = RCC_GetPCLK4ClockFreq(RCC_Clocks->HCLK_Frequency);
 800496e:	68a0      	ldr	r0, [r4, #8]
 8004970:	f7fe fa78 	bl	8002e64 <RCC_GetPCLK4ClockFreq>
 8004974:	61a0      	str	r0, [r4, #24]
}
 8004976:	bd10      	pop	{r4, pc}

08004978 <LL_TIM_StructInit>:
  TIM_InitStruct->Prescaler         = (uint16_t)0x0000;
 8004978:	2300      	movs	r3, #0
  TIM_InitStruct->Autoreload        = 0xFFFFFFFFU;
 800497a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  TIM_InitStruct->Prescaler         = (uint16_t)0x0000;
 800497e:	8003      	strh	r3, [r0, #0]
  TIM_InitStruct->CounterMode       = LL_TIM_COUNTERMODE_UP;
 8004980:	6043      	str	r3, [r0, #4]
  TIM_InitStruct->RepetitionCounter = 0x00000000U;
 8004982:	6103      	str	r3, [r0, #16]
  TIM_InitStruct->ClockDivision     = LL_TIM_CLOCKDIVISION_DIV1;
 8004984:	e9c0 2302 	strd	r2, r3, [r0, #8]
}
 8004988:	4770      	bx	lr

0800498a <LL_TIM_OC_StructInit>:
  TIM_OC_InitStruct->OCMode       = LL_TIM_OCMODE_FROZEN;
 800498a:	2300      	movs	r3, #0
  TIM_OC_InitStruct->OCState      = LL_TIM_OCSTATE_DISABLE;
 800498c:	e9c0 3300 	strd	r3, r3, [r0]
  TIM_OC_InitStruct->CompareValue = 0x00000000U;
 8004990:	e9c0 3302 	strd	r3, r3, [r0, #8]
  TIM_OC_InitStruct->OCNPolarity  = LL_TIM_OCPOLARITY_HIGH;
 8004994:	e9c0 3304 	strd	r3, r3, [r0, #16]
  TIM_OC_InitStruct->OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8004998:	e9c0 3306 	strd	r3, r3, [r0, #24]
}
 800499c:	4770      	bx	lr

0800499e <arch_system_halt>:
	__asm__ volatile(
 800499e:	f04f 0210 	mov.w	r2, #16
 80049a2:	f3ef 8311 	mrs	r3, BASEPRI
 80049a6:	f382 8811 	msr	BASEPRI, r2
 80049aa:	f3bf 8f6f 	isb	sy
	for (;;) {
 80049ae:	e7fe      	b.n	80049ae <arch_system_halt+0x10>

080049b0 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 80049b0:	4603      	mov	r3, r0
 80049b2:	b920      	cbnz	r0, 80049be <z_reschedule_irqlock+0xe>
 80049b4:	f3ef 8205 	mrs	r2, IPSR
 80049b8:	b90a      	cbnz	r2, 80049be <z_reschedule_irqlock+0xe>
 80049ba:	f7fd b93f 	b.w	8001c3c <arch_swap>
	__asm__ volatile(
 80049be:	f383 8811 	msr	BASEPRI, r3
 80049c2:	f3bf 8f6f 	isb	sy
}
 80049c6:	4770      	bx	lr

080049c8 <z_reschedule_unlocked>:
	__asm__ volatile(
 80049c8:	f04f 0310 	mov.w	r3, #16
 80049cc:	f3ef 8011 	mrs	r0, BASEPRI
 80049d0:	f383 8811 	msr	BASEPRI, r3
 80049d4:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 80049d8:	f7ff bfea 	b.w	80049b0 <z_reschedule_irqlock>

080049dc <unpend_thread_no_timeout>:
{
 80049dc:	4601      	mov	r1, r0
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
 80049de:	6880      	ldr	r0, [r0, #8]
{
 80049e0:	b508      	push	{r3, lr}
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
 80049e2:	f7fe fedf 	bl	80037a4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 80049e6:	7b4b      	ldrb	r3, [r1, #13]
 80049e8:	f023 0302 	bic.w	r3, r3, #2
 80049ec:	734b      	strb	r3, [r1, #13]
	thread->base.pended_on = NULL;
 80049ee:	2300      	movs	r3, #0
 80049f0:	608b      	str	r3, [r1, #8]
}
 80049f2:	bd08      	pop	{r3, pc}

080049f4 <z_priq_dumb_best>:
{
 80049f4:	4603      	mov	r3, r0
	return list->head == list;
 80049f6:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80049f8:	4283      	cmp	r3, r0
 80049fa:	d003      	beq.n	8004a04 <z_priq_dumb_best+0x10>
	if (n != NULL) {
 80049fc:	2800      	cmp	r0, #0
 80049fe:	bf38      	it	cc
 8004a00:	2000      	movcc	r0, #0
 8004a02:	4770      	bx	lr
	struct k_thread *thread = NULL;
 8004a04:	2000      	movs	r0, #0
}
 8004a06:	4770      	bx	lr

08004a08 <z_ready_thread>:
{
 8004a08:	b510      	push	{r4, lr}
 8004a0a:	f04f 0310 	mov.w	r3, #16
 8004a0e:	f3ef 8411 	mrs	r4, BASEPRI
 8004a12:	f383 8811 	msr	BASEPRI, r3
 8004a16:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
 8004a1a:	f7fe ff1d 	bl	8003858 <ready_thread>
	__asm__ volatile(
 8004a1e:	f384 8811 	msr	BASEPRI, r4
 8004a22:	f3bf 8f6f 	isb	sy
}
 8004a26:	bd10      	pop	{r4, pc}

08004a28 <z_thread_timeout>:
{
 8004a28:	b570      	push	{r4, r5, r6, lr}
 8004a2a:	4604      	mov	r4, r0
	__asm__ volatile(
 8004a2c:	f04f 0310 	mov.w	r3, #16
 8004a30:	f3ef 8611 	mrs	r6, BASEPRI
 8004a34:	f383 8811 	msr	BASEPRI, r3
 8004a38:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
 8004a3c:	f850 3c10 	ldr.w	r3, [r0, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
 8004a40:	f1a0 0518 	sub.w	r5, r0, #24
		if (thread->base.pended_on != NULL) {
 8004a44:	b113      	cbz	r3, 8004a4c <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
 8004a46:	4628      	mov	r0, r5
 8004a48:	f7ff ffc8 	bl	80049dc <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 8004a4c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		ready_thread(thread);
 8004a50:	4628      	mov	r0, r5
 8004a52:	f023 0314 	bic.w	r3, r3, #20
 8004a56:	f804 3c0b 	strb.w	r3, [r4, #-11]
 8004a5a:	f7fe fefd 	bl	8003858 <ready_thread>
	__asm__ volatile(
 8004a5e:	f386 8811 	msr	BASEPRI, r6
 8004a62:	f3bf 8f6f 	isb	sy
}
 8004a66:	bd70      	pop	{r4, r5, r6, pc}

08004a68 <z_unpend_first_thread>:
{
 8004a68:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 8004a6a:	f04f 0310 	mov.w	r3, #16
 8004a6e:	f3ef 8211 	mrs	r2, BASEPRI
 8004a72:	f383 8811 	msr	BASEPRI, r3
 8004a76:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
 8004a7a:	f7ff ffbb 	bl	80049f4 <z_priq_dumb_best>
 8004a7e:	4604      	mov	r4, r0
	__asm__ volatile(
 8004a80:	f382 8811 	msr	BASEPRI, r2
 8004a84:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
 8004a88:	b188      	cbz	r0, 8004aae <z_unpend_first_thread+0x46>
	__asm__ volatile(
 8004a8a:	f04f 0310 	mov.w	r3, #16
 8004a8e:	f3ef 8511 	mrs	r5, BASEPRI
 8004a92:	f383 8811 	msr	BASEPRI, r3
 8004a96:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
 8004a9a:	f7ff ff9f 	bl	80049dc <unpend_thread_no_timeout>
	__asm__ volatile(
 8004a9e:	f385 8811 	msr	BASEPRI, r5
 8004aa2:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
 8004aa6:	f104 0018 	add.w	r0, r4, #24
 8004aaa:	f000 f804 	bl	8004ab6 <z_abort_timeout>
}
 8004aae:	4620      	mov	r0, r4
 8004ab0:	bd38      	pop	{r3, r4, r5, pc}

08004ab2 <k_thread_name_get>:
}
 8004ab2:	2000      	movs	r0, #0
 8004ab4:	4770      	bx	lr

08004ab6 <z_abort_timeout>:
{
 8004ab6:	b510      	push	{r4, lr}
	__asm__ volatile(
 8004ab8:	f04f 0210 	mov.w	r2, #16
 8004abc:	f3ef 8411 	mrs	r4, BASEPRI
 8004ac0:	f382 8811 	msr	BASEPRI, r2
 8004ac4:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 8004ac8:	6803      	ldr	r3, [r0, #0]
 8004aca:	b13b      	cbz	r3, 8004adc <z_abort_timeout+0x26>
			remove_timeout(to);
 8004acc:	f7ff f9d0 	bl	8003e70 <remove_timeout>
			ret = 0;
 8004ad0:	2000      	movs	r0, #0
	__asm__ volatile(
 8004ad2:	f384 8811 	msr	BASEPRI, r4
 8004ad6:	f3bf 8f6f 	isb	sy
}
 8004ada:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 8004adc:	f06f 0015 	mvn.w	r0, #21
 8004ae0:	e7f7      	b.n	8004ad2 <z_abort_timeout+0x1c>

08004ae2 <z_get_next_timeout_expiry>:
{
 8004ae2:	b510      	push	{r4, lr}
	__asm__ volatile(
 8004ae4:	f04f 0310 	mov.w	r3, #16
 8004ae8:	f3ef 8411 	mrs	r4, BASEPRI
 8004aec:	f383 8811 	msr	BASEPRI, r3
 8004af0:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
 8004af4:	f7ff f9d6 	bl	8003ea4 <next_timeout>
	__asm__ volatile(
 8004af8:	f384 8811 	msr	BASEPRI, r4
 8004afc:	f3bf 8f6f 	isb	sy
}
 8004b00:	bd10      	pop	{r4, pc}

08004b02 <z_set_timeout_expiry>:
{
 8004b02:	b570      	push	{r4, r5, r6, lr}
 8004b04:	4604      	mov	r4, r0
 8004b06:	460d      	mov	r5, r1
	__asm__ volatile(
 8004b08:	f04f 0310 	mov.w	r3, #16
 8004b0c:	f3ef 8611 	mrs	r6, BASEPRI
 8004b10:	f383 8811 	msr	BASEPRI, r3
 8004b14:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
 8004b18:	f7ff f9c4 	bl	8003ea4 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 8004b1c:	2801      	cmp	r0, #1
 8004b1e:	dd05      	ble.n	8004b2c <z_set_timeout_expiry+0x2a>
 8004b20:	42a0      	cmp	r0, r4
 8004b22:	dd03      	ble.n	8004b2c <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
 8004b24:	4629      	mov	r1, r5
 8004b26:	4620      	mov	r0, r4
 8004b28:	f7fd f806 	bl	8001b38 <z_clock_set_timeout>
	__asm__ volatile(
 8004b2c:	f386 8811 	msr	BASEPRI, r6
 8004b30:	f3bf 8f6f 	isb	sy
}
 8004b34:	bd70      	pop	{r4, r5, r6, pc}

08004b36 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
 8004b36:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
 8004b38:	f7ff fad0 	bl	80040dc <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
 8004b3c:	bd08      	pop	{r3, pc}

08004b3e <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
 8004b3e:	f7ff bacd 	b.w	80040dc <z_tick_get>

08004b42 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
 8004b42:	b538      	push	{r3, r4, r5, lr}
 8004b44:	4604      	mov	r4, r0
		 */
		int key = arch_irq_lock();
		struct k_thread *to_abort = cpu->pending_abort;

		if (to_abort) {
			cpu->pending_abort = NULL;
 8004b46:	2500      	movs	r5, #0
	__asm__ volatile(
 8004b48:	f04f 0210 	mov.w	r2, #16
 8004b4c:	f3ef 8311 	mrs	r3, BASEPRI
 8004b50:	f382 8811 	msr	BASEPRI, r2
 8004b54:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
 8004b58:	6920      	ldr	r0, [r4, #16]
		if (to_abort) {
 8004b5a:	b188      	cbz	r0, 8004b80 <idle+0x3e>
			cpu->pending_abort = NULL;
 8004b5c:	6125      	str	r5, [r4, #16]
	__asm__ volatile(
 8004b5e:	f383 8811 	msr	BASEPRI, r3
 8004b62:	f3bf 8f6f 	isb	sy
			 * is continued below.
			 */
			LOG_DBG("idle %p aborting thread %p",
				_current, to_abort);

			z_thread_single_abort(to_abort);
 8004b66:	f7fe ff7d 	bl	8003a64 <z_thread_single_abort>
	__asm__ volatile(
 8004b6a:	f04f 0310 	mov.w	r3, #16
 8004b6e:	f3ef 8011 	mrs	r0, BASEPRI
 8004b72:	f383 8811 	msr	BASEPRI, r3
 8004b76:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 8004b7a:	f7ff ff19 	bl	80049b0 <z_reschedule_irqlock>
			 * in order to abort the thread, and we now need to
			 * figure out what to do next, it's not necessarily
			 * the case that there are no other runnable threads.
			 */
			z_reschedule_unlocked();
			continue;
 8004b7e:	e7e3      	b.n	8004b48 <idle+0x6>
	__asm__ volatile(
 8004b80:	f383 8811 	msr	BASEPRI, r3
 8004b84:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 8004b88:	f04f 0210 	mov.w	r2, #16
 8004b8c:	f3ef 8311 	mrs	r3, BASEPRI
 8004b90:	f382 8811 	msr	BASEPRI, r2
 8004b94:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
 8004b98:	f7ff ffa3 	bl	8004ae2 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
 8004b9c:	2101      	movs	r1, #1
 8004b9e:	2802      	cmp	r0, #2
 8004ba0:	bfd8      	it	le
 8004ba2:	4608      	movle	r0, r1
 8004ba4:	f7ff ffad 	bl	8004b02 <z_set_timeout_expiry>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 8004ba8:	f7fd f912 	bl	8001dd0 <arch_cpu_idle>
}
 8004bac:	e7cc      	b.n	8004b48 <idle+0x6>

08004bae <k_heap_init>:
{
 8004bae:	b410      	push	{r4}
 8004bb0:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
 8004bb4:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
 8004bb8:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
 8004bba:	f7ff bb5e 	b.w	800427a <sys_heap_init>

08004bbe <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
 8004bbe:	4770      	bx	lr
